[
{
	"kind": "module",
	"file": "source/vibe/data/bson.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.data.json"
		},
		{
			"kind": "alias",
			"line": 25,
			"deco": "Ayh",
			"name": "bdata_t"
		},
		{
			"kind": "struct",
			"line": 32,
			"members": [
				{
					"kind": "enum",
					"line": 34,
					"members": [
						{
							"kind": "enum member",
							"line": 36,
							"name": "End",
							"comment": " End marker - should never occur explicitly\n"
						},
						{
							"kind": "enum member",
							"line": 38,
							"name": "Double",
							"comment": " A 64-bit floating point value\n"
						},
						{
							"kind": "enum member",
							"line": 40,
							"name": "String",
							"comment": " A UTF-8 string\n"
						},
						{
							"kind": "enum member",
							"line": 42,
							"name": "Object",
							"comment": " An object aka. dictionary of string to Bson\n"
						},
						{
							"kind": "enum member",
							"line": 44,
							"name": "Array",
							"comment": " An array of BSON values\n"
						},
						{
							"kind": "enum member",
							"line": 46,
							"name": "BinData",
							"comment": " Raw binary data (ubyte[])\n"
						},
						{
							"kind": "enum member",
							"line": 48,
							"name": "Undefined",
							"comment": " Deprecated\n"
						},
						{
							"kind": "enum member",
							"line": 50,
							"name": "ObjectID",
							"comment": " BSON Object ID (96-bit)\n"
						},
						{
							"kind": "enum member",
							"line": 52,
							"name": "Bool",
							"comment": " Boolean value\n"
						},
						{
							"kind": "enum member",
							"line": 54,
							"name": "Date",
							"comment": " Date value (UTC)\n"
						},
						{
							"kind": "enum member",
							"line": 56,
							"name": "Null",
							"comment": " Null value\n"
						},
						{
							"kind": "enum member",
							"line": 58,
							"name": "Regex",
							"comment": " Regular expression\n"
						},
						{
							"kind": "enum member",
							"line": 60,
							"name": "DBRef",
							"comment": " Deprecated\n"
						},
						{
							"kind": "enum member",
							"line": 62,
							"name": "Code",
							"comment": " JaveScript code\n"
						},
						{
							"kind": "enum member",
							"line": 64,
							"name": "Symbol",
							"comment": " Symbol/variable name\n"
						},
						{
							"kind": "enum member",
							"line": 66,
							"name": "CodeWScope",
							"comment": " JavaScript code with scope\n"
						},
						{
							"kind": "enum member",
							"line": 68,
							"name": "Int",
							"comment": " 32-bit integer\n"
						},
						{
							"kind": "enum member",
							"line": 70,
							"name": "Timestamp",
							"comment": " Timestamp value\n"
						},
						{
							"kind": "enum member",
							"line": 72,
							"name": "Long",
							"comment": " 64-bit integer\n"
						},
						{
							"kind": "enum member",
							"line": 74,
							"name": "MinKey",
							"comment": " Internal value\n"
						},
						{
							"kind": "enum member",
							"line": 76,
							"name": "MaxKey",
							"comment": " Internal value\n"
						}
					],
					"baseDeco": "h",
					"name": "Type",
					"comment": " Represents the type of a BSON value\n"
				},
				{
					"kind": "function",
					"line": 80,
					"storageClass": [
						"static",
						"@property"
					],
					"deco": "FNdZS4vibe4data4bson4Bson",
					"name": "EmptyObject",
					"comment": " Returns a new, empty Bson value of type Object.\n",
					"originalType": "Bson()",
					"endline": 80
				},
				{
					"kind": "function",
					"line": 83,
					"storageClass": [
						"static",
						"@property"
					],
					"deco": "FNdZS4vibe4data4bson4Bson",
					"name": "EmptyArray",
					"comment": " Returns a new, empty Bson value of type Object.\n",
					"originalType": "Bson()",
					"endline": 83
				},
				{
					"kind": "constructor",
					"line": 96,
					"deco": "FNcE4vibe4data4bson4Bson4TypeAyhZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "E4vibe4data4bson4Bson4Type",
							"name": "type"
						},
						{
							"deco": "Ayh",
							"name": "data"
						}
					],
					"name": "this",
					"comment": "\n\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of 'data' is stored, containg the data related to the value. An\n\t\texception is thrown if 'data' is too short.\n\t\n",
					"originalType": "(Type type, bdata_t data)",
					"endline": 128
				},
				{
					"kind": "constructor",
					"line": 133,
					"deco": "FNcdZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "d",
							"name": "value"
						}
					],
					"name": "this",
					"comment": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
					"originalType": "(double value)",
					"endline": 133
				},
				{
					"kind": "constructor",
					"line": 135,
					"deco": "FNcAyaE4vibe4data4bson4Bson4TypeZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						},
						{
							"deco": "E4vibe4data4bson4Bson4Type",
							"default": "cast(Type)cast(ubyte)2u",
							"name": "type"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(string value, Type type = Type.String)",
					"endline": 140
				},
				{
					"kind": "constructor",
					"line": 142,
					"deco": "FNcxHAyaS4vibe4data4bson4BsonZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xHAyaS4vibe4data4bson4Bson",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in Bson[string] value)",
					"endline": 142
				},
				{
					"kind": "constructor",
					"line": 144,
					"deco": "FNcxAS4vibe4data4bson4BsonZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xAS4vibe4data4bson4Bson",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in Bson[] value)",
					"endline": 144
				},
				{
					"kind": "constructor",
					"line": 146,
					"deco": "FNcxS4vibe4data4bson11BsonBinDataZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson11BsonBinData",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in BsonBinData value)",
					"endline": 146
				},
				{
					"kind": "constructor",
					"line": 148,
					"deco": "FNcxS4vibe4data4bson12BsonObjectIDZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson12BsonObjectID",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in BsonObjectID value)",
					"endline": 148
				},
				{
					"kind": "constructor",
					"line": 150,
					"deco": "FNcbZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "b",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(bool value)",
					"endline": 150
				},
				{
					"kind": "constructor",
					"line": 152,
					"deco": "FNcxS4vibe4data4bson8BsonDateZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson8BsonDate",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in BsonDate value)",
					"endline": 152
				},
				{
					"kind": "constructor",
					"line": 154,
					"deco": "FNcnZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "n",
							"name": "_param_0"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(typeof(null))",
					"endline": 154
				},
				{
					"kind": "constructor",
					"line": 156,
					"deco": "FNcxS4vibe4data4bson9BsonRegexZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson9BsonRegex",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in BsonRegex value)",
					"endline": 156
				},
				{
					"kind": "constructor",
					"line": 158,
					"deco": "FNciZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "i",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(int value)",
					"endline": 158
				},
				{
					"kind": "constructor",
					"line": 160,
					"deco": "FNcxS4vibe4data4bson13BsonTimestampZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson13BsonTimestamp",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in BsonTimestamp value)",
					"endline": 160
				},
				{
					"kind": "constructor",
					"line": 162,
					"deco": "FNclZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "l",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(long value)",
					"endline": 162
				},
				{
					"kind": "constructor",
					"line": 164,
					"deco": "FNcxS4vibe4data4json4JsonZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"name": "value"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(in Json value)",
					"endline": 164
				},
				{
					"kind": "function",
					"line": 169,
					"deco": "FxS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson4Bson",
							"name": "other"
						}
					],
					"name": "opAssign",
					"comment": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
					"originalType": "void(in Bson other)",
					"endline": 173
				},
				{
					"kind": "function",
					"line": 175,
					"deco": "FdZv",
					"parameters": [
						{
							"deco": "d",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 179
				},
				{
					"kind": "function",
					"line": 181,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 191
				},
				{
					"kind": "function",
					"line": 193,
					"deco": "FxHAyaS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "xHAyaS4vibe4data4bson4Bson",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in Bson[string] value)",
					"endline": 208
				},
				{
					"kind": "function",
					"line": 210,
					"deco": "FxAS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "xAS4vibe4data4bson4Bson",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in Bson[] value)",
					"endline": 225
				},
				{
					"kind": "function",
					"line": 227,
					"deco": "FxS4vibe4data4bson11BsonBinDataZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson11BsonBinData",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in BsonBinData value)",
					"endline": 236
				},
				{
					"kind": "function",
					"line": 238,
					"deco": "FxS4vibe4data4bson12BsonObjectIDZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson12BsonObjectID",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in BsonObjectID value)",
					"endline": 242
				},
				{
					"kind": "function",
					"line": 244,
					"deco": "FbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 248
				},
				{
					"kind": "function",
					"line": 250,
					"deco": "FxS4vibe4data4bson8BsonDateZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson8BsonDate",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in BsonDate value)",
					"endline": 254
				},
				{
					"kind": "function",
					"line": 256,
					"deco": "FnZv",
					"parameters": [
						{
							"deco": "n",
							"name": "_param_0"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 260
				},
				{
					"kind": "function",
					"line": 262,
					"deco": "FxS4vibe4data4bson9BsonRegexZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson9BsonRegex",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in BsonRegex value)",
					"endline": 269
				},
				{
					"kind": "function",
					"line": 271,
					"deco": "FiZv",
					"parameters": [
						{
							"deco": "i",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 275
				},
				{
					"kind": "function",
					"line": 277,
					"deco": "FxS4vibe4data4bson13BsonTimestampZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson13BsonTimestamp",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in BsonTimestamp value)",
					"endline": 281
				},
				{
					"kind": "function",
					"line": 283,
					"deco": "FlZv",
					"parameters": [
						{
							"deco": "l",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 287
				},
				{
					"kind": "function",
					"line": 289,
					"deco": "FxS4vibe4data4json4JsonZv",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"name": "value"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"originalType": "void(in Json value)",
					"endline": 294
				},
				{
					"kind": "function",
					"line": 299,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZE4vibe4data4bson4Bson4Type",
					"name": "type",
					"comment": "\n\t\tReturns the BSON type of this value.\n\t\n",
					"originalType": "const Type()",
					"endline": 299
				},
				{
					"kind": "function",
					"line": 301,
					"deco": "xFZb",
					"name": "isNull",
					"endline": 301
				},
				{
					"kind": "function",
					"line": 306,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAyh",
					"name": "data",
					"comment": "\n\t\tReturns the raw data representing this BSON value (not including the field name and type).\n\t\n",
					"originalType": "const bdata_t()",
					"endline": 306
				},
				{
					"kind": "template",
					"line": 313,
					"members": [
						{
							"kind": "function",
							"line": 313,
							"type": "const T()",
							"name": "opCast",
							"comment": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
							"endline": 313
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
					"name": "opCast"
				},
				{
					"kind": "template",
					"line": 315,
					"members": [
						{
							"kind": "function",
							"line": 315,
							"type": "const T()",
							"name": "get",
							"endline": 377
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "get"
				},
				{
					"kind": "template",
					"line": 384,
					"members": [
						{
							"kind": "function",
							"line": 384,
							"type": "inout inout(T)(T def = T.init)",
							"parameters": [
								{
									"default": "T.init",
									"type": "T",
									"name": "def"
								}
							],
							"name": "opt",
							"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n",
							"endline": 389
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n",
					"name": "opt"
				},
				{
					"kind": "function",
					"line": 393,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "length",
					"comment": " Returns the length of a BSON value of type String, Array, Object or BinData.\n\t\n",
					"originalType": "const size_t()",
					"endline": 402
				},
				{
					"kind": "function",
					"line": 406,
					"storageClass": [
						"static"
					],
					"deco": "FxS4vibe4data4json4JsonZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"name": "value"
						}
					],
					"name": "fromJson",
					"comment": " Converts a given JSON value to the corresponding BSON value.\n\t\n",
					"originalType": "Bson(in Json value)",
					"endline": 411
				},
				{
					"kind": "function",
					"line": 418,
					"deco": "xFZS4vibe4data4json4Json",
					"name": "toJson",
					"comment": " Converts a BSON value to a JSON value.\n\n\t\tAll BSON types that cannot be exactly represented as JSON, will\n\t\tbe converted to a string.\n\t\n",
					"endline": 448
				},
				{
					"kind": "function",
					"line": 455,
					"deco": "NgFAyaZNgS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "Aya",
							"name": "idx"
						}
					],
					"name": "opIndex",
					"comment": " Allows accessing fields of a BSON object using [].\n\n\t\tReturns a null value if the specified field does not exist.\n\t\n",
					"endline": 460
				},
				{
					"kind": "template",
					"line": 462,
					"members": [
						{
							"kind": "function",
							"line": 462,
							"type": "void(T value, string idx)",
							"parameters": [
								{
									"type": "T",
									"name": "value"
								},
								{
									"type": "string",
									"name": "idx"
								}
							],
							"name": "opIndexAssign",
							"comment": " ditto\n",
							"endline": 496
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "opIndexAssign"
				},
				{
					"kind": "function",
					"line": 502,
					"deco": "NgFkZNgS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "k",
							"name": "idx"
						}
					],
					"name": "opIndex",
					"comment": " Allows index based access of a BSON array value.\n\n\t\tReturns a null value if the index is out of bounds.\n\t\n",
					"originalType": "inout inout(Bson)(size_t idx)",
					"endline": 507
				},
				{
					"kind": "function",
					"line": 517,
					"deco": "xFDFKS4vibe4data4bson4BsonZiZi",
					"parameters": [
						{
							"deco": "DFKS4vibe4data4bson4BsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": "\n\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n\t\n",
					"endline": 531
				},
				{
					"kind": "function",
					"line": 533,
					"deco": "xFDFKkKS4vibe4data4bson4BsonZiZi",
					"parameters": [
						{
							"deco": "DFKkKS4vibe4data4bson4BsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"originalType": "const int(int delegate(ref size_t idx, ref Bson obj) del)",
					"endline": 553
				},
				{
					"kind": "function",
					"line": 555,
					"deco": "xFDFKAyaKS4vibe4data4bson4BsonZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKS4vibe4data4bson4BsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"endline": 571
				},
				{
					"kind": "template",
					"line": 577,
					"members": [
						{
							"kind": "function",
							"line": 577,
							"type": "inout inout(Bson)()",
							"name": "opDispatch",
							"endline": 577
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "prop"
						}
					],
					"comment": " Allows to access existing fields of a JSON object using dot syntax.\n\n\t\tReturns a null value for non-existent fields.\n\t\n",
					"name": "opDispatch"
				},
				{
					"kind": "template",
					"line": 579,
					"members": [
						{
							"kind": "function",
							"line": 579,
							"type": "void(T val)",
							"parameters": [
								{
									"type": "T",
									"name": "val"
								}
							],
							"name": "opDispatch",
							"endline": 579
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "prop"
						},
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "opDispatch"
				},
				{
					"kind": "function",
					"line": 582,
					"deco": "xFKxS4vibe4data4bson4BsonZb",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson4Bson",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": "\n",
					"originalType": "const bool(ref const Bson other)",
					"endline": 585
				},
				{
					"kind": "function",
					"line": 587,
					"deco": "xFxS4vibe4data4bson4BsonZb",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson4Bson",
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"originalType": "const bool(const Bson other)",
					"endline": 590
				}
			],
			"name": "Bson",
			"comment": "\n\tRepresents a BSON value.\n\n\n"
		},
		{
			"kind": "struct",
			"line": 605,
			"members": [
				{
					"kind": "enum",
					"line": 606,
					"members": [
						{
							"kind": "enum member",
							"line": 607,
							"name": "Generic"
						},
						{
							"kind": "enum member",
							"line": 608,
							"name": "Function"
						},
						{
							"kind": "enum member",
							"line": 609,
							"name": "BinaryOld"
						},
						{
							"kind": "enum member",
							"line": 610,
							"name": "UUID"
						},
						{
							"kind": "enum member",
							"line": 611,
							"name": "MD5"
						},
						{
							"kind": "enum member",
							"line": 612,
							"name": "UserDefined"
						}
					],
					"baseDeco": "h",
					"name": "Type"
				},
				{
					"kind": "constructor",
					"line": 620,
					"deco": "FNcE4vibe4data4bson11BsonBinData4TypeAyhZS4vibe4data4bson11BsonBinData",
					"parameters": [
						{
							"deco": "E4vibe4data4bson11BsonBinData4Type",
							"name": "type"
						},
						{
							"deco": "Ayh",
							"name": "data"
						}
					],
					"name": "this",
					"originalType": "(Type type, immutable(ubyte)[] data)",
					"endline": 624
				},
				{
					"kind": "function",
					"line": 626,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZE4vibe4data4bson11BsonBinData4Type",
					"name": "type",
					"originalType": "const Type()",
					"endline": 626
				},
				{
					"kind": "function",
					"line": 627,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAyh",
					"name": "rawData",
					"originalType": "const bdata_t()",
					"endline": 627
				}
			],
			"name": "BsonBinData",
			"comment": "\n\tRepresents a BSON binary data value (Bson.Type.BinData).\n"
		},
		{
			"kind": "struct",
			"line": 634,
			"members": [
				{
					"kind": "constructor",
					"line": 644,
					"deco": "FNcxAhZS4vibe4data4bson12BsonObjectID",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "this",
					"comment": " Constructs a new object ID from the given raw byte array.\n\t\n",
					"originalType": "(in ubyte[] bytes)",
					"endline": 647
				},
				{
					"kind": "function",
					"line": 651,
					"storageClass": [
						"static"
					],
					"deco": "FAyaZS4vibe4data4bson12BsonObjectID",
					"parameters": [
						{
							"deco": "Aya",
							"name": "str"
						}
					],
					"name": "fromString",
					"comment": " Creates an on object ID from a string in standard hexa-decimal form.\n\t\n",
					"endline": 671
				},
				{
					"kind": "alias",
					"line": 673,
					"name": "fromHexString",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 677,
					"storageClass": [
						"static"
					],
					"deco": "FZS4vibe4data4bson12BsonObjectID",
					"name": "generate",
					"comment": " Generates a unique object ID.\n\t\n",
					"endline": 693
				},
				{
					"kind": "function",
					"line": 703,
					"storageClass": [
						"static"
					],
					"deco": "FxS3std8datetime7SysTimeZS4vibe4data4bson12BsonObjectID",
					"parameters": [
						{
							"deco": "xS3std8datetime7SysTime",
							"name": "date"
						}
					],
					"name": "createDateID",
					"comment": " Creates a pseudo object ID that matches the given date.\n\n\t\tThis kind of ID can be useful to query a database for items in a certain\n\t\tdate interval using their ID. This works using the property of standard BSON\n\t\tobject IDs that they store their creation date as part of the ID. Note that\n\t\tthis date part is only 32-bit wide and is limited to the same timespan as a\n\t\t32-bit Unix timestamp.\n\t\n",
					"originalType": "BsonObjectID(in SysTime date)",
					"endline": 708
				},
				{
					"kind": "function",
					"line": 712,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "valid",
					"comment": " Returns true for any non-zero ID.\n\t\n",
					"originalType": "const bool()",
					"endline": 717
				},
				{
					"kind": "function",
					"line": 724,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZS3std8datetime7SysTime",
					"name": "timeStamp",
					"comment": " Extracts the time/date portion of the object ID.\n\n\t\tFor IDs created using the standard generation algorithm or using createDateID\n\t\tthis will return the associated time stamp.\n\t\n",
					"originalType": "SysTime()",
					"endline": 728
				},
				{
					"kind": "function",
					"line": 732,
					"deco": "xFKxS4vibe4data4bson12BsonObjectIDZi",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson12BsonObjectID",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opCmp",
					"comment": " Allows for relational comparison of different IDs.\n\t\n",
					"originalType": "const int(ref const BsonObjectID other)",
					"endline": 736
				},
				{
					"kind": "function",
					"line": 740,
					"deco": "xFZAya",
					"name": "toString",
					"comment": " Converts the ID to its standard hexa-decimal string representation.\n\t\n",
					"endline": 748
				},
				{
					"kind": "function",
					"line": 750,
					"deco": "FZAh",
					"name": "opCast",
					"endline": 752
				}
			],
			"name": "BsonObjectID",
			"comment": "\n\tRepresents a BSON object id (Bson.Type.BinData).\n"
		},
		{
			"kind": "struct",
			"line": 759,
			"members": [
				{
					"kind": "constructor",
					"line": 762,
					"deco": "FNcxS3std8datetime4DateZS4vibe4data4bson8BsonDate",
					"parameters": [
						{
							"deco": "xS3std8datetime4Date",
							"name": "date"
						}
					],
					"name": "this",
					"originalType": "(in Date date)",
					"endline": 764
				},
				{
					"kind": "constructor",
					"line": 766,
					"deco": "FNcxS3std8datetime8DateTimeZS4vibe4data4bson8BsonDate",
					"parameters": [
						{
							"deco": "xS3std8datetime8DateTime",
							"name": "date"
						}
					],
					"name": "this",
					"originalType": "(in DateTime date)",
					"endline": 768
				},
				{
					"kind": "constructor",
					"line": 770,
					"deco": "FNclZS4vibe4data4bson8BsonDate",
					"parameters": [
						{
							"deco": "l",
							"name": "time"
						}
					],
					"name": "this",
					"originalType": "(long time)",
					"endline": 772
				},
				{
					"kind": "constructor",
					"line": 774,
					"deco": "FNcxS3std8datetime7SysTimeZS4vibe4data4bson8BsonDate",
					"parameters": [
						{
							"deco": "xS3std8datetime7SysTime",
							"name": "time"
						}
					],
					"name": "this",
					"originalType": "(in SysTime time)",
					"endline": 777
				},
				{
					"kind": "function",
					"line": 779,
					"storageClass": [
						"static"
					],
					"deco": "FAyaZS4vibe4data4bson8BsonDate",
					"parameters": [
						{
							"deco": "Aya",
							"name": "iso_ext_string"
						}
					],
					"name": "fromString",
					"endline": 779
				},
				{
					"kind": "function",
					"line": 781,
					"deco": "xFZAya",
					"name": "toString",
					"endline": 781
				},
				{
					"kind": "function",
					"line": 783,
					"deco": "xFZS3std8datetime7SysTime",
					"name": "toSysTime",
					"endline": 786
				},
				{
					"kind": "function",
					"line": 788,
					"deco": "xFKxS4vibe4data4bson8BsonDateZb",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson8BsonDate",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opEquals",
					"originalType": "const bool(ref const BsonDate other)",
					"endline": 788
				},
				{
					"kind": "function",
					"line": 789,
					"deco": "xFKxS4vibe4data4bson8BsonDateZi",
					"parameters": [
						{
							"deco": "xS4vibe4data4bson8BsonDate",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opCmp",
					"originalType": "const int(ref const BsonDate other)",
					"endline": 793
				},
				{
					"kind": "function",
					"line": 795,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZl",
					"name": "value",
					"originalType": "const long()",
					"endline": 795
				},
				{
					"kind": "function",
					"line": 796,
					"storageClass": [
						"@property"
					],
					"deco": "FNdlZv",
					"parameters": [
						{
							"deco": "l",
							"name": "v"
						}
					],
					"name": "value",
					"originalType": "void(long v)",
					"endline": 796
				}
			],
			"name": "BsonDate",
			"comment": "\n\tRepresents a BSON date value (Bson.Type.Date).\n"
		},
		{
			"kind": "struct",
			"line": 803,
			"members": [
				{
					"kind": "constructor",
					"line": 806,
					"deco": "FNclZS4vibe4data4bson13BsonTimestamp",
					"parameters": [
						{
							"deco": "l",
							"name": "time"
						}
					],
					"name": "this",
					"originalType": "(long time)",
					"endline": 808
				}
			],
			"name": "BsonTimestamp",
			"comment": "\n\tRepresents a BSON timestamp value (Bson.Type.Timestamp)\n"
		},
		{
			"kind": "struct",
			"line": 815,
			"members": [
				{
					"kind": "constructor",
					"line": 821,
					"deco": "FNcAyaAyaZS4vibe4data4bson9BsonRegex",
					"parameters": [
						{
							"deco": "Aya",
							"name": "expr"
						},
						{
							"deco": "Aya",
							"name": "options"
						}
					],
					"name": "this",
					"originalType": "(string expr, string options)",
					"endline": 825
				},
				{
					"kind": "function",
					"line": 827,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "expression",
					"originalType": "const string()",
					"endline": 827
				},
				{
					"kind": "function",
					"line": 828,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "options",
					"originalType": "const string()",
					"endline": 828
				}
			],
			"name": "BsonRegex",
			"comment": "\n\tRepresents a BSON regular expression value (Bson.Type.Regex).\n"
		},
		{
			"kind": "template",
			"line": 880,
			"members": [
				{
					"kind": "function",
					"line": 880,
					"type": "Bson(T value)",
					"parameters": [
						{
							"type": "T",
							"name": "value"
						}
					],
					"name": "serializeToBson",
					"comment": "\n\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.BinData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.ObjectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.Date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.Timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.Regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Long)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.BinData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toBson overrides toJson).\n",
					"endline": 938
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.BinData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.ObjectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.Date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.Timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.Regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Long)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.BinData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toBson overrides toJson).\n",
			"name": "serializeToBson"
		},
		{
			"kind": "template",
			"line": 946,
			"members": [
				{
					"kind": "function",
					"line": 946,
					"type": "void(ref T dst, Bson src)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "T",
							"name": "dst"
						},
						{
							"type": "Bson",
							"name": "src"
						}
					],
					"name": "deserializeBson",
					"comment": "\n\tDeserializes a BSON value into the destination variable.\n\n\tThe same types as for serializeToBson() are supported and handled inversely.\n",
					"endline": 949
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tDeserializes a BSON value into the destination variable.\n\n\tThe same types as for serializeToBson() are supported and handled inversely.\n",
			"name": "deserializeBson"
		},
		{
			"kind": "template",
			"line": 951,
			"members": [
				{
					"kind": "function",
					"line": 951,
					"type": "T(Bson src)",
					"parameters": [
						{
							"type": "Bson",
							"name": "src"
						}
					],
					"name": "deserializeBson",
					"comment": " ditto\n",
					"endline": 1018
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "deserializeBson"
		},
		{
			"kind": "template",
			"line": 1172,
			"members": [
				{
					"kind": "function",
					"line": 1172,
					"type": "ubyte[](T v)",
					"parameters": [
						{
							"type": "T",
							"name": "v"
						}
					],
					"name": "toBsonData",
					"endline": 1180
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "toBsonData"
		},
		{
			"kind": "template",
			"line": 1182,
			"members": [
				{
					"kind": "function",
					"line": 1182,
					"type": "T(in ubyte[] v)",
					"parameters": [
						{
							"storageClass": [
								"in"
							],
							"type": "ubyte[]",
							"name": "v"
						}
					],
					"name": "fromBsonData",
					"endline": 1188
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "fromBsonData"
		},
		{
			"kind": "template",
			"line": 1190,
			"members": [
				{
					"kind": "function",
					"line": 1190,
					"type": "ubyte[](T v)",
					"parameters": [
						{
							"type": "T",
							"name": "v"
						}
					],
					"name": "toBigEndianData",
					"endline": 1198
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "toBigEndianData"
		}
	],
	"name": "vibe.data.bson",
	"comment": "\n\tBSON serialization and value handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/data/utils.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "std.traits"
		},
		{
			"kind": "template",
			"line": 13,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"deco": "Aya",
					"name": "M"
				}
			],
			"name": "isRWPlainField"
		},
		{
			"kind": "template",
			"line": 23,
			"members": [
				{
					"kind": "variable",
					"line": 25,
					"init": "__traits(compiles, __traits(getMember, Tgen!(T)(), M) = __traits(getMember, Tgen!(T)(), M))",
					"storageClass": [
						"enum"
					],
					"name": "isRWField"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"deco": "Aya",
					"name": "M"
				}
			],
			"name": "isRWField"
		}
	],
	"name": "vibe.data.utils",
	"comment": "\n\tUtility functions for data serialization\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/data/json.d",
	"members": [
		{
			"kind": "struct",
			"line": 68,
			"members": [
				{
					"kind": "enum",
					"line": 88,
					"members": [
						{
							"kind": "enum member",
							"line": 90,
							"name": "Undefined",
							"comment": " A non-existent value in a JSON object\n"
						},
						{
							"kind": "enum member",
							"line": 92,
							"name": "Null",
							"comment": " Null value\n"
						},
						{
							"kind": "enum member",
							"line": 94,
							"name": "Bool",
							"comment": " Boolean value\n"
						},
						{
							"kind": "enum member",
							"line": 96,
							"name": "Int",
							"comment": " 64-bit integer value\n"
						},
						{
							"kind": "enum member",
							"line": 98,
							"name": "Float",
							"comment": " 64-bit floating point value\n"
						},
						{
							"kind": "enum member",
							"line": 100,
							"name": "String",
							"comment": " UTF-8 string\n"
						},
						{
							"kind": "enum member",
							"line": 102,
							"name": "Array",
							"comment": " Array of JSON values\n"
						},
						{
							"kind": "enum member",
							"line": 104,
							"name": "Object",
							"comment": " JSON object aka. dictionary from string to Json\n"
						}
					],
					"baseDeco": "i",
					"name": "Type",
					"comment": " Represents the run time type of a JSON value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 108,
					"storageClass": [
						"static",
						"@property"
					],
					"deco": "FNdZS4vibe4data4json4Json",
					"name": "undefined",
					"comment": " New JSON value of Type.Undefined\n",
					"originalType": "Json()",
					"endline": 108
				},
				{
					"kind": "function",
					"line": 111,
					"storageClass": [
						"static",
						"@property"
					],
					"deco": "FNdZS4vibe4data4json4Json",
					"name": "emptyObject",
					"comment": " New JSON value of Type.Object\n",
					"originalType": "Json()",
					"endline": 111
				},
				{
					"kind": "function",
					"line": 114,
					"storageClass": [
						"static",
						"@property"
					],
					"deco": "FNdZS4vibe4data4json4Json",
					"name": "emptyArray",
					"comment": " New JSON value of Type.Array\n",
					"originalType": "Json()",
					"endline": 114
				},
				{
					"kind": "alias",
					"line": 117,
					"storageClass": [
						"deprecated"
					],
					"name": "Undefined",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "alias",
					"line": 119,
					"storageClass": [
						"deprecated"
					],
					"name": "EmptyObject",
					"comment": " ditto\n"
				},
				{
					"kind": "alias",
					"line": 121,
					"storageClass": [
						"deprecated"
					],
					"name": "EmptyArray",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 128,
					"deco": "FNcnZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "n",
							"name": "_param_0"
						}
					],
					"name": "this",
					"comment": "\n\t\tConstructor for a JSON object.\n\t\n",
					"originalType": "(typeof(null))",
					"endline": 128
				},
				{
					"kind": "constructor",
					"line": 130,
					"deco": "FNcbZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "b",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(bool v)",
					"endline": 130
				},
				{
					"kind": "constructor",
					"line": 132,
					"deco": "FNciZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "i",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(int v)",
					"endline": 132
				},
				{
					"kind": "constructor",
					"line": 134,
					"deco": "FNclZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "l",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(long v)",
					"endline": 134
				},
				{
					"kind": "constructor",
					"line": 136,
					"deco": "FNcdZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "d",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(double v)",
					"endline": 136
				},
				{
					"kind": "constructor",
					"line": 138,
					"deco": "FNcAyaZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(string v)",
					"endline": 138
				},
				{
					"kind": "constructor",
					"line": 140,
					"deco": "FNcAS4vibe4data4json4JsonZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "AS4vibe4data4json4Json",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(Json[] v)",
					"endline": 140
				},
				{
					"kind": "constructor",
					"line": 142,
					"deco": "FNcHAyaS4vibe4data4json4JsonZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "HAyaS4vibe4data4json4Json",
							"name": "v"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(Json[string] v)",
					"endline": 142
				},
				{
					"kind": "function",
					"line": 147,
					"deco": "FNcS4vibe4data4json4JsonZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "S4vibe4data4json4Json",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
					"originalType": "Json(Json v)",
					"endline": 160
				},
				{
					"kind": "function",
					"line": 162,
					"deco": "FnZv",
					"parameters": [
						{
							"deco": "n",
							"name": "_param_0"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 162
				},
				{
					"kind": "function",
					"line": 164,
					"deco": "FbZb",
					"parameters": [
						{
							"deco": "b",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 164
				},
				{
					"kind": "function",
					"line": 166,
					"deco": "FiZi",
					"parameters": [
						{
							"deco": "i",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 166
				},
				{
					"kind": "function",
					"line": 168,
					"deco": "FlZl",
					"parameters": [
						{
							"deco": "l",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 168
				},
				{
					"kind": "function",
					"line": 170,
					"deco": "FdZd",
					"parameters": [
						{
							"deco": "d",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 170
				},
				{
					"kind": "function",
					"line": 172,
					"deco": "FAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 172
				},
				{
					"kind": "function",
					"line": 174,
					"deco": "FAS4vibe4data4json4JsonZAS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "AS4vibe4data4json4Json",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 174
				},
				{
					"kind": "function",
					"line": 176,
					"deco": "FHAyaS4vibe4data4json4JsonZHAyaS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "HAyaS4vibe4data4json4Json",
							"name": "v"
						}
					],
					"name": "opAssign",
					"comment": " ditto\n",
					"endline": 176
				},
				{
					"kind": "function",
					"line": 181,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "item"
						}
					],
					"name": "remove",
					"comment": "\n\t\tAllows removement of values from Type.Object Json objects.\n\t\n",
					"endline": 181
				},
				{
					"kind": "function",
					"line": 186,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZE4vibe4data4json4Json4Type",
					"name": "type",
					"comment": "\n\t\tThe current type id of this JSON object.\n\t\n",
					"originalType": "const Type()",
					"endline": 186
				},
				{
					"kind": "function",
					"line": 191,
					"deco": "NgFNckZNgS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "k",
							"name": "idx"
						}
					],
					"name": "opIndex",
					"comment": "\n\t\tAllows direct indexing of array typed JSON values.\n\t\n",
					"originalType": "inout inout(Json)(size_t idx)",
					"endline": 191
				},
				{
					"kind": "function",
					"line": 197,
					"deco": "xFAyaZxS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "opIndex",
					"comment": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n",
					"endline": 203
				},
				{
					"kind": "function",
					"line": 205,
					"deco": "FNcAyaZS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "opIndex",
					"comment": " ditto\n",
					"originalType": "Json(string key)",
					"endline": 214
				},
				{
					"kind": "function",
					"line": 219,
					"deco": "NgFZNgAS4vibe4data4json4Json",
					"name": "opSlice",
					"comment": "\n\t\tReturns a slice of a JSON array.\n\t\n",
					"endline": 219
				},
				{
					"kind": "function",
					"line": 221,
					"deco": "NgFkkZNgAS4vibe4data4json4Json",
					"parameters": [
						{
							"deco": "k",
							"name": "from"
						},
						{
							"deco": "k",
							"name": "to"
						}
					],
					"name": "opSlice",
					"comment": "\n",
					"originalType": "inout inout(Json[])(size_t from, size_t to)",
					"endline": 221
				},
				{
					"kind": "function",
					"line": 226,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "length",
					"comment": "\n\t\tReturns the number of entries of string, array or object typed JSON values.\n\t\n",
					"originalType": "const size_t()",
					"endline": 236
				},
				{
					"kind": "function",
					"line": 241,
					"deco": "FDFKS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
					"endline": 256
				},
				{
					"kind": "function",
					"line": 258,
					"deco": "xFDFKxS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKxS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"originalType": "const int(int delegate(ref const Json obj) del)",
					"endline": 273
				},
				{
					"kind": "function",
					"line": 275,
					"deco": "FDFKkKS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKkKS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"originalType": "int(int delegate(ref size_t idx, ref Json obj) del)",
					"endline": 282
				},
				{
					"kind": "function",
					"line": 284,
					"deco": "xFDFKkKxS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKkKxS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"originalType": "const int(int delegate(ref size_t idx, ref const Json obj) del)",
					"endline": 291
				},
				{
					"kind": "function",
					"line": 293,
					"deco": "FDFKAyaKS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"endline": 301
				},
				{
					"kind": "function",
					"line": 303,
					"deco": "xFDFKAyaKxS4vibe4data4json4JsonZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKxS4vibe4data4json4JsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": " ditto\n",
					"originalType": "const int(int delegate(ref string idx, ref const Json obj) del)",
					"endline": 311
				},
				{
					"kind": "template",
					"line": 316,
					"members": [
						{
							"kind": "function",
							"line": 316,
							"type": "inout inout(T)()",
							"name": "opCast",
							"comment": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
							"endline": 316
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
					"name": "opCast"
				},
				{
					"kind": "template",
					"line": 318,
					"members": [
						{
							"kind": "function",
							"line": 318,
							"type": "inout inout(T)()",
							"name": "get",
							"endline": 330
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "get"
				},
				{
					"kind": "template",
					"line": 332,
					"members": [
						{
							"kind": "function",
							"line": 332,
							"type": "const const(T)(const(T) def = T.init)",
							"parameters": [
								{
									"default": "T.init",
									"type": "const(T)",
									"name": "def"
								}
							],
							"name": "opt",
							"endline": 336
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "opt"
				},
				{
					"kind": "template",
					"line": 338,
					"members": [
						{
							"kind": "function",
							"line": 338,
							"type": "T(T def = T.init)",
							"parameters": [
								{
									"default": "T.init",
									"type": "T",
									"name": "def"
								}
							],
							"name": "opt",
							"endline": 342
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "opt"
				},
				{
					"kind": "template",
					"line": 347,
					"members": [
						{
							"kind": "function",
							"line": 347,
							"type": "inout inout(T)()",
							"name": "to",
							"endline": 421
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t\tConverts the JSON value to the corresponding D type - types are converted as neccessary.\n\t\n",
					"name": "to"
				},
				{
					"kind": "template",
					"line": 438,
					"members": [
						{
							"kind": "function",
							"line": 438,
							"type": "const Json()",
							"name": "opUnary",
							"comment": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
							"endline": 448
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
					"name": "opUnary"
				},
				{
					"kind": "template",
					"line": 467,
					"members": [
						{
							"kind": "function",
							"line": 467,
							"type": "const Json(ref const(Json) other)",
							"parameters": [
								{
									"storageClass": [
										"ref"
									],
									"type": "const(Json)",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD in)\n\t\t)\n\t\n",
							"endline": 501
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD in)\n\t\t)\n\t\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 503,
					"members": [
						{
							"kind": "function",
							"line": 503,
							"type": "Json(Json other)",
							"parameters": [
								{
									"type": "Json",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 512
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 514,
					"members": [
						{
							"kind": "function",
							"line": 514,
							"type": "void(Json other)",
							"parameters": [
								{
									"type": "Json",
									"name": "other"
								}
							],
							"name": "opOpAssign",
							"comment": " ditto\n",
							"endline": 544
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opOpAssign"
				},
				{
					"kind": "template",
					"line": 546,
					"members": [
						{
							"kind": "function",
							"line": 546,
							"type": "const Json(bool other)",
							"parameters": [
								{
									"deco": "b",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 546
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 548,
					"members": [
						{
							"kind": "function",
							"line": 548,
							"type": "const Json(long other)",
							"parameters": [
								{
									"deco": "l",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 548
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 550,
					"members": [
						{
							"kind": "function",
							"line": 550,
							"type": "const Json(double other)",
							"parameters": [
								{
									"deco": "d",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 550
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 552,
					"members": [
						{
							"kind": "function",
							"line": 552,
							"type": "const Json(string other)",
							"parameters": [
								{
									"type": "string",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 552
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 554,
					"members": [
						{
							"kind": "function",
							"line": 554,
							"type": "Json(Json[] other)",
							"parameters": [
								{
									"type": "Json[]",
									"name": "other"
								}
							],
							"name": "opBinary",
							"comment": " ditto\n",
							"endline": 554
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 556,
					"members": [
						{
							"kind": "function",
							"line": 556,
							"type": "const Json(bool other)",
							"parameters": [
								{
									"deco": "b",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 556
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 558,
					"members": [
						{
							"kind": "function",
							"line": 558,
							"type": "const Json(long other)",
							"parameters": [
								{
									"deco": "l",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 558
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 560,
					"members": [
						{
							"kind": "function",
							"line": 560,
							"type": "const Json(double other)",
							"parameters": [
								{
									"deco": "d",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 560
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 562,
					"members": [
						{
							"kind": "function",
							"line": 562,
							"type": "const Json(string other)",
							"parameters": [
								{
									"type": "string",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 562
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 564,
					"members": [
						{
							"kind": "function",
							"line": 564,
							"type": "inout inout(Json)*(string other)",
							"parameters": [
								{
									"type": "string",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 570
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 572,
					"members": [
						{
							"kind": "function",
							"line": 572,
							"type": "Json(Json[] other)",
							"parameters": [
								{
									"type": "Json[]",
									"name": "other"
								}
							],
							"name": "opBinaryRight",
							"comment": " ditto\n",
							"endline": 572
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"comment": " ditto\n",
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 577,
					"members": [
						{
							"kind": "function",
							"line": 577,
							"type": "const const(Json)()",
							"name": "opDispatch",
							"endline": 577
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "prop"
						}
					],
					"comment": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
					"name": "opDispatch"
				},
				{
					"kind": "template",
					"line": 579,
					"members": [
						{
							"kind": "function",
							"line": 579,
							"type": "Json()",
							"name": "opDispatch",
							"endline": 579
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "prop"
						}
					],
					"comment": " ditto\n",
					"name": "opDispatch"
				},
				{
					"kind": "function",
					"line": 588,
					"deco": "xFKxS4vibe4data4json4JsonZb",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n",
					"originalType": "const bool(ref const Json other)",
					"endline": 601
				},
				{
					"kind": "function",
					"line": 603,
					"deco": "xFxS4vibe4data4json4JsonZb",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"originalType": "const bool(const Json other)",
					"endline": 603
				},
				{
					"kind": "function",
					"line": 605,
					"deco": "xFnZb",
					"parameters": [
						{
							"deco": "n",
							"name": "_param_0"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"endline": 605
				},
				{
					"kind": "function",
					"line": 607,
					"deco": "xFbZb",
					"parameters": [
						{
							"deco": "b",
							"name": "v"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"endline": 607
				},
				{
					"kind": "function",
					"line": 609,
					"deco": "xFlZb",
					"parameters": [
						{
							"deco": "l",
							"name": "v"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"endline": 609
				},
				{
					"kind": "function",
					"line": 611,
					"deco": "xFdZb",
					"parameters": [
						{
							"deco": "d",
							"name": "v"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"endline": 611
				},
				{
					"kind": "function",
					"line": 613,
					"deco": "xFAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"endline": 613
				},
				{
					"kind": "function",
					"line": 625,
					"deco": "xFKxS4vibe4data4json4JsonZi",
					"parameters": [
						{
							"deco": "xS4vibe4data4json4Json",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opCmp",
					"comment": "\n\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n\t\n",
					"originalType": "const int(ref const Json other)",
					"endline": 640
				},
				{
					"kind": "template",
					"line": 647,
					"members": [
						{
							"kind": "function",
							"line": 647,
							"type": "Type()",
							"name": "typeId",
							"endline": 657
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t\tReturns the type id corresponding to the given D type.\n\t\n",
					"name": "typeId"
				},
				{
					"kind": "function",
					"line": 667,
					"deco": "xFZAya",
					"name": "toString",
					"comment": "\n\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use writeJsonString instead as this function will store the whole string\n\t\tin memory, whereas writeJsonString writes it out bit for bit.\n\n\t\tSee_Also: writeJsonString, toPrettyString\n\t\n",
					"endline": 672
				},
				{
					"kind": "function",
					"line": 693,
					"deco": "xFiZAya",
					"parameters": [
						{
							"deco": "i",
							"default": "0",
							"name": "level"
						}
					],
					"name": "toPrettyString",
					"comment": "\n\t\tReturns the JSON object as a \"pretty\" string.\n\n\t\t---\n\t\tauto json = Json([\"foo\": Json(\"bar\")]);\n\t\twriteln(json.toPrettyString());\n\n\t\t// output:\n\t\t// {\n\t\t//     \"foo\": \"bar\"\n\t\t// }\n\t\t---\n\n\t\tParams:\n\t\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t\t\tdone using tab characters.\n\n\t\tSee_Also: writePrettyJsonString, toString\n\t\n",
					"endline": 698
				}
			],
			"name": "Json",
			"comment": "\n\n\n\tRepresents a single JSON value.\n\n\tJson values can have one of the types defined in the Json.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\tan exception. Additionally, an explicit cast or using get!() or to!() is\n\trequired to convert a JSON value to the corresponding static D type.\n"
		},
		{
			"kind": "template",
			"line": 726,
			"members": [
				{
					"kind": "function",
					"line": 726,
					"type": "Json(ref R range, int* line = null)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "range"
						},
						{
							"default": "null",
							"type": "int*",
							"name": "line"
						}
					],
					"name": "parseJson",
					"comment": "\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is not part of\n\tthe JSON contents.\n\n\tThrows an Exception if any parsing error occured.\n",
					"endline": 811
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is not part of\n\tthe JSON contents.\n\n\tThrows an Exception if any parsing error occured.\n",
			"name": "parseJson"
		},
		{
			"kind": "function",
			"line": 818,
			"deco": "FAyaZS4vibe4data4json4Json",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "parseJsonString",
			"comment": "\n\tParses the given JSON string and returns the corresponding Json object.\n\n\tThrows an Exception if any parsing error occurs.\n",
			"endline": 828
		},
		{
			"kind": "template",
			"line": 881,
			"members": [
				{
					"kind": "function",
					"line": 881,
					"type": "Json(T value)",
					"parameters": [
						{
							"type": "T",
							"name": "value"
						}
					],
					"name": "serializeToJson",
					"comment": "\n\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Json.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Json.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Json.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Json.Type.Int)\n\t\t$(DT string)          $(DD Converted to Json.Type.String)\n\t\t$(DT T[])             $(DD Converted to Json.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Json.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Json.Type.Object)\n\t\t$(DT class)           $(DD Converted to Json.Type.Object or Json.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toJson overrides toString).\n",
					"endline": 932
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Json.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Json.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Json.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Json.Type.Int)\n\t\t$(DT string)          $(DD Converted to Json.Type.String)\n\t\t$(DT T[])             $(DD Converted to Json.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Json.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Json.Type.Object)\n\t\t$(DT class)           $(DD Converted to Json.Type.Object or Json.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toJson overrides toString).\n",
			"name": "serializeToJson"
		},
		{
			"kind": "template",
			"line": 940,
			"members": [
				{
					"kind": "function",
					"line": 940,
					"type": "void(ref T dst, Json src)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "T",
							"name": "dst"
						},
						{
							"type": "Json",
							"name": "src"
						}
					],
					"name": "deserializeJson",
					"comment": "\n\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n",
					"endline": 943
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n",
			"name": "deserializeJson"
		},
		{
			"kind": "template",
			"line": 945,
			"members": [
				{
					"kind": "function",
					"line": 945,
					"type": "T(Json src)",
					"parameters": [
						{
							"type": "Json",
							"name": "src"
						}
					],
					"name": "deserializeJson",
					"comment": " ditto\n",
					"endline": 1000
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "deserializeJson"
		},
		{
			"kind": "template",
			"line": 1072,
			"members": [
				{
					"kind": "function",
					"line": 1072,
					"type": "void(ref R dst, in Json json)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"storageClass": [
								"in"
							],
							"type": "Json",
							"name": "json"
						}
					],
					"name": "writeJsonString",
					"comment": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThis function will convert the given JSON value to a string without adding\n\tany white space between tokens (no newlines, no indentation and no padding).\n\tThe output size is thus minizized, at the cost of bad human readability.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\n\tSee_Also: Json.toString, writePrettyJsonString\n",
					"endline": 1112
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThis function will convert the given JSON value to a string without adding\n\tany white space between tokens (no newlines, no indentation and no padding).\n\tThe output size is thus minizized, at the cost of bad human readability.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\n\tSee_Also: Json.toString, writePrettyJsonString\n",
			"name": "writeJsonString"
		},
		{
			"kind": "template",
			"line": 1127,
			"members": [
				{
					"kind": "function",
					"line": 1127,
					"type": "void(ref R dst, in Json json, int level = 0)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"storageClass": [
								"in"
							],
							"type": "Json",
							"name": "json"
						},
						{
							"deco": "i",
							"default": "0",
							"name": "level"
						}
					],
					"name": "writePrettyJsonString",
					"comment": "\n\tWrites the given JSON object as a prettified JSON string into the destination range.\n\n\tThe output will contain newlines and indents to make the output human readable.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t        done using tab characters.\n\n\tSee_Also: Json.toPrettyString, writeJsonString\n",
					"endline": 1179
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites the given JSON object as a prettified JSON string into the destination range.\n\n\tThe output will contain newlines and indents to make the output human readable.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t        done using tab characters.\n\n\tSee_Also: Json.toPrettyString, writeJsonString\n",
			"name": "writePrettyJsonString"
		}
	],
	"name": "vibe.data.json",
	"comment": "\n\tJSON serialization and value handling.\n\n\tThis module provides the Json struct for reading, writing and manipulating JSON values in a seamless,\n\tJavaScript like way. De(serialization) of arbitrary D types is also supported.\n\n\tExamples:\n\n\t---\n\tvoid manipulateJson(Json j)\n\t{\n\t\t// object members can be accessed using member syntax, just like in JavaScript\n\t\tj = Json.EmptyObject;\n\t\tj.name = \"Example\";\n\t\tj.id = 1;\n\n\t\t// retrieving the values is done using get()\n\t\tassert(j[\"name\"].get!string == \"Example\");\n\t\tassert(j[\"id\"].get!int == 1);\n\n\t\t// semantic convertions can be done using to()\n\t\tassert(j.id.to!string == \"1\");\n\n\t\t// prints:\n\t\t// name: \"Example\"\n\t\t// id: 1\n\t\tforeach( string key, value; j ){\n\t\t\twritefln(\"%s: %s\", key, value);\n\t\t}\n\n\t\t// print out as JSON: {\"name\": \"Example\", \"id\": 1}\n\t\twritefln(\"JSON: %s\", j.toString());\n\t}\n\t---\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/templ/parsertools.d",
	"members": [
		{
			"kind": "struct",
			"line": 16,
			"members": [
				{
					"kind": "variable",
					"line": 17,
					"deco": "Aya",
					"name": "file",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 18,
					"deco": "i",
					"name": "number",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 19,
					"deco": "Aya",
					"name": "text",
					"offset": 12
				}
			],
			"name": "Line"
		},
		{
			"kind": "function",
			"line": 23,
			"deco": "FKxS4vibe5templ11parsertools4LinebAyaAyaiZv",
			"parameters": [
				{
					"deco": "xS4vibe5templ11parsertools4Line",
					"storageClass": [
						"ref"
					],
					"name": "ln"
				},
				{
					"deco": "b",
					"name": "cond"
				},
				{
					"deco": "Aya",
					"default": "null",
					"name": "text"
				},
				{
					"deco": "Aya",
					"default": "__FILE__",
					"name": "file"
				},
				{
					"deco": "i",
					"default": "__LINE__",
					"name": "line"
				}
			],
			"name": "assert_ln",
			"originalType": "void(ref Line ln, bool cond, string text = null, string file = __FILE__, int line = __LINE__)",
			"endline": 27
		},
		{
			"kind": "function",
			"line": 30,
			"deco": "FKxAyaKxAyaZAya",
			"parameters": [
				{
					"deco": "xAya",
					"storageClass": [
						"ref"
					],
					"name": "str"
				},
				{
					"deco": "xAya",
					"storageClass": [
						"ref"
					],
					"name": "indent"
				}
			],
			"name": "unindent",
			"originalType": "string(ref string str, ref string indent)",
			"endline": 34
		},
		{
			"kind": "function",
			"line": 36,
			"deco": "FKxAyaKxAyaZi",
			"parameters": [
				{
					"deco": "xAya",
					"storageClass": [
						"ref"
					],
					"name": "s"
				},
				{
					"deco": "xAya",
					"storageClass": [
						"ref"
					],
					"name": "indent"
				}
			],
			"name": "indentLevel",
			"originalType": "int(ref string s, ref string indent)",
			"endline": 43
		},
		{
			"kind": "function",
			"line": 46,
			"deco": "FKxS4vibe5templ11parsertools4LineZAya",
			"parameters": [
				{
					"deco": "xS4vibe5templ11parsertools4Line",
					"storageClass": [
						"ref"
					],
					"name": "ln"
				}
			],
			"name": "lineMarker",
			"originalType": "string(ref Line ln)",
			"endline": 50
		},
		{
			"kind": "function",
			"line": 53,
			"deco": "FaZAya",
			"parameters": [
				{
					"deco": "a",
					"name": "ch"
				}
			],
			"name": "dstringEscape",
			"endline": 63
		},
		{
			"kind": "function",
			"line": 65,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "sanitizeEscaping",
			"endline": 69
		},
		{
			"kind": "function",
			"line": 71,
			"deco": "FKxAyaZAya",
			"parameters": [
				{
					"deco": "xAya",
					"storageClass": [
						"ref"
					],
					"name": "str"
				}
			],
			"name": "dstringEscape",
			"originalType": "string(ref string str)",
			"endline": 76
		},
		{
			"kind": "function",
			"line": 78,
			"deco": "FxAyaZAya",
			"parameters": [
				{
					"deco": "xAya",
					"name": "str"
				}
			],
			"name": "dstringUnescape",
			"originalType": "string(in string str)",
			"endline": 103
		},
		{
			"kind": "function",
			"line": 106,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "s"
				}
			],
			"name": "ctstrip",
			"endline": 112
		},
		{
			"kind": "function",
			"line": 114,
			"deco": "FKxAS4vibe5templ11parsertools4LineZAya",
			"parameters": [
				{
					"deco": "xAS4vibe5templ11parsertools4Line",
					"storageClass": [
						"ref"
					],
					"name": "lines"
				}
			],
			"name": "detectIndentStyle",
			"originalType": "string(ref Line[] lines)",
			"endline": 134
		},
		{
			"kind": "function",
			"line": 136,
			"deco": "FAyaAyaZAS4vibe5templ11parsertools4Line",
			"parameters": [
				{
					"deco": "Aya",
					"name": "text"
				},
				{
					"deco": "Aya",
					"name": "file"
				}
			],
			"name": "removeEmptyLines",
			"endline": 168
		}
	],
	"name": "vibe.templ.parsertools",
	"comment": "\n\tContains useful functions for template the template parser implementations.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/templ/utils.d",
	"members": [
		{
			"kind": "template",
			"line": 62,
			"members": [
				{
					"kind": "function",
					"line": 62,
					"storageClass": [
						"auto"
					],
					"type": "@property ()",
					"name": "inject",
					"comment": "\n\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.064, as it suffers from DMD BUG 2962/10086/10857.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Aliases, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new URLRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n",
					"endline": 65
				}
			],
			"parameters": [
				{
					"kind": "alias",
					"name": "Page"
				},
				{
					"kind": "tuple",
					"name": "Injectors"
				}
			],
			"comment": "\n\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.064, as it suffers from DMD BUG 2962/10086/10857.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Aliases, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new URLRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n",
			"name": "inject"
		},
		{
			"kind": "template",
			"line": 96,
			"members": [
				{
					"kind": "struct",
					"line": 96,
					"members": [],
					"name": "InjectedParams"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Aliases"
				}
			],
			"comment": "\n\tMakes the variable aliases passed to one of the injectors of the inject!() template accessible\n\tto the local function.\n\n\tExamples:\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\t// access the userinfo variable:\n\t\t\tif( InjectedParams!Aliases.userinfo.length == 0 ) return;\n\n\t\t\t// it's also possible to declare a pseudo-\n\t\t\t// variable like this to access the parameters:\n\t\t\tInjectedParams!Aliases params;\n\t\t\tif( params.userinfo == \"peter\" )\n\t\t\t\tthrow Exception(\"Not allowed!\")\n\n\t\t\tNext!(Aliases)(req, res);\n\t\t}\n\t\t---\n",
			"name": "InjectedParams"
		},
		{
			"kind": "template",
			"line": 101,
			"members": [],
			"parameters": [
				{
					"kind": "value",
					"deco": "i",
					"name": "i"
				},
				{
					"kind": "tuple",
					"name": "ALIASES"
				}
			],
			"comment": " When mixed in, makes all ALIASES available in the local scope\n",
			"name": "localAliases"
		},
		{
			"kind": "template",
			"line": 113,
			"members": [],
			"parameters": [
				{
					"kind": "value",
					"deco": "i",
					"name": "i"
				},
				{
					"kind": "tuple",
					"name": "TYPES_AND_NAMES"
				}
			],
			"comment": " When mixed in, makes all ALIASES available in the local scope. Note that there must be a\n Variant[] args__ available that matches TYPES_AND_NAMES\n",
			"name": "localAliasesCompat"
		},
		{
			"kind": "template",
			"line": 134,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "Rebindable2"
		}
	],
	"name": "vibe.templ.utils",
	"comment": "\n\tUtility functions for dealing with templates.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/templ/diet.d",
	"members": [
		{
			"kind": "import",
			"line": 14,
			"name": "vibe.core.stream"
		},
		{
			"kind": "template",
			"line": 48,
			"members": [
				{
					"kind": "function",
					"line": 48,
					"file": "diet.d",
					"type": "void(OutputStream stream__)",
					"parameters": [
						{
							"type": "OutputStream",
							"name": "stream__"
						}
					],
					"name": "compileDietFile",
					"comment": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function suffers from multiple compiler bugsin conjunction with local\n\tvariables passed as alias template parameters up to DMD 2.063.2. DMD 2.064 supposedly\n\thas these fixed.\n",
					"endline": 67
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				},
				{
					"kind": "tuple",
					"name": "ALIASES"
				}
			],
			"comment": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function suffers from multiple compiler bugsin conjunction with local\n\tvariables passed as alias template parameters up to DMD 2.063.2. DMD 2.064 supposedly\n\thas these fixed.\n",
			"name": "compileDietFile"
		},
		{
			"kind": "alias",
			"line": 70,
			"name": "parseDietFile",
			"comment": " compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 78,
			"members": [
				{
					"kind": "function",
					"line": 78,
					"type": "void(OutputStream stream__, ...)",
					"parameters": [
						{
							"type": "OutputStream",
							"name": "stream__"
						}
					],
					"name": "compileDietFileCompat",
					"comment": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indirectly through HTTPServerResponse.renderCompat().\n\n",
					"endline": 81
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				},
				{
					"kind": "tuple",
					"name": "TYPES_AND_NAMES"
				}
			],
			"comment": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indirectly through HTTPServerResponse.renderCompat().\n\n",
			"name": "compileDietFileCompat"
		},
		{
			"kind": "template",
			"line": 83,
			"members": [
				{
					"kind": "function",
					"line": 83,
					"type": "void(OutputStream stream__, void* _argptr, TypeInfo[] _arguments)",
					"parameters": [
						{
							"type": "OutputStream",
							"name": "stream__"
						},
						{
							"type": "void*",
							"name": "_argptr"
						},
						{
							"type": "TypeInfo[]",
							"name": "_arguments"
						}
					],
					"name": "compileDietFileCompatV",
					"comment": " ditto\n",
					"endline": 99
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				},
				{
					"kind": "tuple",
					"name": "TYPES_AND_NAMES"
				}
			],
			"comment": " ditto\n",
			"name": "compileDietFileCompatV"
		},
		{
			"kind": "alias",
			"line": 102,
			"name": "parseDietFileCompat",
			"comment": " compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 128,
			"members": [
				{
					"kind": "variable",
					"line": 130,
					"init": "\"OutputStream stream__ = \" ~ stream_variable ~ \";\\x0a\" ~ dietParser!(template_file)",
					"storageClass": [
						"enum"
					],
					"name": "compileDietFileMixin"
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				},
				{
					"kind": "value",
					"deco": "Aya",
					"name": "stream_variable"
				}
			],
			"comment": "\n\tGenerates a diet template compiler to use as a mixin.\n\n\tThis can be used as an alternative to compileDietFile or compileDietFileCompat. It allows\n\tthe template to use all symbols visible in the enclosing scope. In situations where many\n\tvariables from the calling function's scope are used within the template, it can reduce the\n\tamount of code required for invoking the template.\n\n\tNote that even if this method of using diet templates can reduce the amount of source code. It\n\tis generally recommended to use compileDietFile(Compat) instead, as those\n\tfacilitate a cleaner interface between D code and diet code by explicity documenting the\n\tsymbols usable inside of the template and thus avoiding unwanted, hidden dependencies. A\n\tpossible alternative for passing many variables is to pass a struct or class value to\n\tcompileDietFile(Compat).\n\n\tExamples:\n\t---\n\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t{\n\t\tint this_variable_is_automatically_visible_to_the_template;\n\t\tmixin(compileDietFileMixin!(\"index.dt\", \"res.bodyWriter\"));\n\t}\n\t---\n",
			"name": "compileDietFileMixin"
		},
		{
			"kind": "function",
			"line": 139,
			"deco": "FAyaPFAyaiZAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "name"
				},
				{
					"deco": "PFAyaiZAya",
					"name": "filter"
				}
			],
			"name": "registerDietTextFilter",
			"comment": "\n\tRegisters a new text filter for use in Diet templates.\n\n\tThe filter will be available using :filtername inside of the template. The following filters are\n\tpredefined: css, javascript, markdown\n",
			"endline": 142
		},
		{
			"kind": "template",
			"line": 1051,
			"members": [
				{
					"kind": "function",
					"line": 1051,
					"type": "string(T v)",
					"parameters": [
						{
							"type": "T",
							"name": "v"
						}
					],
					"name": "_toString",
					"comment": " Internal function used for converting an interpolation expression to string\n",
					"endline": 1057
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " Internal function used for converting an interpolation expression to string\n",
			"name": "_toString"
		}
	],
	"name": "vibe.templ.diet",
	"comment": "\n\tImplements a compile-time Diet template parser.\n\n\tDiet templates are an more or less compatible incarnation of Jade templates but with\n\tembedded D source instead of JavaScript. The Diet syntax reference is found at\n\t$(LINK http://vibed.org/templates/diet).\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/mail/smtp.d",
	"members": [
		{
			"kind": "enum",
			"line": 25,
			"members": [
				{
					"kind": "enum member",
					"line": 26,
					"name": "plain"
				},
				{
					"kind": "enum member",
					"line": 27,
					"name": "ssl"
				},
				{
					"kind": "enum member",
					"line": 28,
					"name": "startTLS"
				}
			],
			"baseDeco": "i",
			"name": "SMTPConnectionType",
			"comment": "\n\tDetermines the (encryption) type of an SMTP connection.\n"
		},
		{
			"kind": "alias",
			"line": 32,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4mail4smtp18SMTPConnectionType",
			"name": "SmtpConnectionType",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 37,
			"members": [
				{
					"kind": "enum member",
					"line": 38,
					"name": "_success"
				},
				{
					"kind": "enum member",
					"line": 39,
					"name": "systemStatus"
				},
				{
					"kind": "enum member",
					"line": 40,
					"name": "helpMessage"
				},
				{
					"kind": "enum member",
					"line": 41,
					"name": "serviceReady"
				},
				{
					"kind": "enum member",
					"line": 42,
					"name": "serviceClosing"
				},
				{
					"kind": "enum member",
					"line": 43,
					"name": "success"
				},
				{
					"kind": "enum member",
					"line": 44,
					"name": "forwarding"
				},
				{
					"kind": "enum member",
					"line": 45,
					"name": "serverAuthReady"
				},
				{
					"kind": "enum member",
					"line": 46,
					"name": "startMailInput"
				},
				{
					"kind": "enum member",
					"line": 47,
					"name": "serviceUnavailable"
				},
				{
					"kind": "enum member",
					"line": 48,
					"name": "mailboxTemporarilyUnavailable"
				},
				{
					"kind": "enum member",
					"line": 49,
					"name": "processingError"
				},
				{
					"kind": "enum member",
					"line": 50,
					"name": "outOfDiskSpace"
				},
				{
					"kind": "enum member",
					"line": 51,
					"name": "commandUnrecognized"
				},
				{
					"kind": "enum member",
					"line": 52,
					"name": "invalidParameters"
				},
				{
					"kind": "enum member",
					"line": 53,
					"name": "commandNotImplemented"
				},
				{
					"kind": "enum member",
					"line": 54,
					"name": "badCommandSequence"
				},
				{
					"kind": "enum member",
					"line": 55,
					"name": "commandParameterNotImplemented"
				},
				{
					"kind": "enum member",
					"line": 56,
					"name": "domainAcceptsNoMail"
				},
				{
					"kind": "enum member",
					"line": 57,
					"name": "accessDenied"
				},
				{
					"kind": "enum member",
					"line": 58,
					"name": "mailboxUnavailable"
				},
				{
					"kind": "enum member",
					"line": 59,
					"name": "userNotLocal"
				},
				{
					"kind": "enum member",
					"line": 60,
					"name": "exceededStorageAllocation"
				},
				{
					"kind": "enum member",
					"line": 61,
					"name": "mailboxNameNotAllowed"
				},
				{
					"kind": "enum member",
					"line": 62,
					"name": "transactionFailed"
				}
			],
			"baseDeco": "i",
			"name": "SMTPStatus",
			"comment": " Represents the different status codes for SMTP replies.\n"
		},
		{
			"kind": "alias",
			"line": 66,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4mail4smtp10SMTPStatus",
			"name": "SmtpStatus",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 72,
			"members": [
				{
					"kind": "enum member",
					"line": 73,
					"name": "none"
				},
				{
					"kind": "enum member",
					"line": 74,
					"name": "plain"
				},
				{
					"kind": "enum member",
					"line": 75,
					"name": "login"
				},
				{
					"kind": "enum member",
					"line": 76,
					"name": "cramMd5"
				}
			],
			"baseDeco": "i",
			"name": "SMTPAuthType",
			"comment": "\n\tRepresents the authentication mechanism used by the SMTP client.\n"
		},
		{
			"kind": "alias",
			"line": 80,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4mail4smtp12SMTPAuthType",
			"name": "SmtpAuthType",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 86,
			"members": [
				{
					"kind": "variable",
					"line": 87,
					"init": "\"127.0.0.1\"",
					"deco": "Aya",
					"name": "host",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 88,
					"init": "cast(ushort)25u",
					"deco": "t",
					"name": "port",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 89,
					"init": "\"localhost\"",
					"deco": "Aya",
					"name": "localname",
					"offset": 20
				},
				{
					"kind": "variable",
					"line": 90,
					"init": "cast(SMTPConnectionType)0",
					"deco": "E4vibe4mail4smtp18SMTPConnectionType",
					"name": "connectionType",
					"offset": 28
				},
				{
					"kind": "variable",
					"line": 91,
					"init": "cast(SMTPAuthType)0",
					"deco": "E4vibe4mail4smtp12SMTPAuthType",
					"name": "authType",
					"offset": 32
				},
				{
					"kind": "variable",
					"line": 92,
					"deco": "Aya",
					"name": "username",
					"offset": 36
				},
				{
					"kind": "variable",
					"line": 93,
					"deco": "Aya",
					"name": "password",
					"offset": 44
				},
				{
					"kind": "constructor",
					"line": 95,
					"deco": "FZC4vibe4mail4smtp18SMTPClientSettings",
					"name": "this",
					"originalType": "()",
					"endline": 95
				},
				{
					"kind": "constructor",
					"line": 96,
					"deco": "FAyatZC4vibe4mail4smtp18SMTPClientSettings",
					"parameters": [
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "port"
						}
					],
					"name": "this",
					"originalType": "(string host, ushort port)",
					"endline": 96
				}
			],
			"name": "SMTPClientSettings",
			"comment": "\n\tConfiguration options for the SMTP client.\n"
		},
		{
			"kind": "alias",
			"line": 100,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4mail4smtp18SMTPClientSettings",
			"name": "SmtpClientSettings",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 106,
			"members": [
				{
					"kind": "variable",
					"line": 107,
					"deco": "S4vibe4inet7message13InetHeaderMap",
					"name": "headers",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 108,
					"deco": "Aya",
					"name": "bodyText",
					"offset": 1300
				}
			],
			"name": "Mail",
			"comment": "\n\tRepresents an email message, including its headers.\n"
		},
		{
			"kind": "function",
			"line": 114,
			"deco": "FC4vibe4mail4smtp18SMTPClientSettingsC4vibe4mail4smtp4MailZv",
			"parameters": [
				{
					"deco": "C4vibe4mail4smtp18SMTPClientSettings",
					"name": "settings"
				},
				{
					"deco": "C4vibe4mail4smtp4Mail",
					"name": "mail"
				}
			],
			"name": "sendMail",
			"comment": "\n\tSends am email using the given settings.\n",
			"endline": 199
		}
	],
	"name": "vibe.mail.smtp",
	"comment": "\n\tSMTP client implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/vibe.d",
	"members": [
		{
			"kind": "import",
			"line": 14,
			"name": "vibe.core.args"
		},
		{
			"kind": "import",
			"line": 15,
			"name": "vibe.core.concurrency"
		},
		{
			"kind": "import",
			"line": 16,
			"name": "vibe.core.core"
		},
		{
			"kind": "import",
			"line": 17,
			"name": "vibe.core.file"
		},
		{
			"kind": "import",
			"line": 18,
			"name": "vibe.core.log"
		},
		{
			"kind": "import",
			"line": 19,
			"name": "vibe.core.net"
		},
		{
			"kind": "import",
			"line": 20,
			"name": "vibe.core.sync"
		},
		{
			"kind": "import",
			"line": 21,
			"name": "vibe.crypto.passwordhash"
		},
		{
			"kind": "import",
			"line": 22,
			"name": "vibe.data.bson"
		},
		{
			"kind": "import",
			"line": 23,
			"name": "vibe.data.json"
		},
		{
			"kind": "import",
			"line": 24,
			"name": "vibe.db.mongo.mongo"
		},
		{
			"kind": "import",
			"line": 25,
			"name": "vibe.db.redis.redis"
		},
		{
			"kind": "import",
			"line": 26,
			"name": "vibe.http.auth.basic_auth"
		},
		{
			"kind": "import",
			"line": 27,
			"name": "vibe.http.client"
		},
		{
			"kind": "import",
			"line": 28,
			"name": "vibe.http.fileserver"
		},
		{
			"kind": "import",
			"line": 29,
			"name": "vibe.http.form"
		},
		{
			"kind": "import",
			"line": 30,
			"name": "vibe.http.proxy"
		},
		{
			"kind": "import",
			"line": 31,
			"name": "vibe.http.rest"
		},
		{
			"kind": "import",
			"line": 32,
			"name": "vibe.http.router"
		},
		{
			"kind": "import",
			"line": 33,
			"name": "vibe.http.server"
		},
		{
			"kind": "import",
			"line": 34,
			"name": "vibe.http.websockets"
		},
		{
			"kind": "import",
			"line": 35,
			"name": "vibe.inet.message"
		},
		{
			"kind": "import",
			"line": 36,
			"name": "vibe.inet.url"
		},
		{
			"kind": "import",
			"line": 37,
			"name": "vibe.inet.urltransfer"
		},
		{
			"kind": "import",
			"line": 38,
			"name": "vibe.mail.smtp"
		},
		{
			"kind": "import",
			"line": 40,
			"name": "vibe.stream.counting"
		},
		{
			"kind": "import",
			"line": 41,
			"name": "vibe.stream.memory"
		},
		{
			"kind": "import",
			"line": 42,
			"name": "vibe.stream.operations"
		},
		{
			"kind": "import",
			"line": 43,
			"name": "vibe.stream.ssl"
		},
		{
			"kind": "import",
			"line": 44,
			"name": "vibe.stream.zlib"
		},
		{
			"kind": "import",
			"line": 45,
			"name": "vibe.templ.diet"
		},
		{
			"kind": "import",
			"line": 46,
			"name": "vibe.templ.utils"
		},
		{
			"kind": "import",
			"line": 47,
			"name": "vibe.textfilter.html"
		},
		{
			"kind": "import",
			"line": 48,
			"name": "vibe.textfilter.markdown"
		},
		{
			"kind": "import",
			"line": 49,
			"name": "vibe.textfilter.urlencode"
		},
		{
			"kind": "import",
			"line": 50,
			"name": "vibe.utils.string"
		},
		{
			"kind": "import",
			"line": 55,
			"name": "std.datetime"
		}
	],
	"name": "vibe.vibe",
	"comment": "\n\tProvides the full vibe.d API as a single import module.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/appmain.d",
	"members": [
		{
			"kind": "function",
			"line": 36,
			"deco": "FZi",
			"name": "main",
			"comment": "\n\tThe predefined vibe.d application entry point.\n\n\tThis function will automatically be executed if you import the module vibe.d in your code. It\n\twill perform default command line parsing and starts the event loop.\n",
			"endline": 65
		}
	],
	"name": "vibe.appmain",
	"comment": "\n\tProvides vibe based applications with a central program entry point.\n\n\tThis module is included automatically through the import 'vibe.d'. It will provide a default\n\tapplication entry point which parses command line arguments, reads the global vibe configuration\n\tfile, and starts the event loop.\n\n\tThe application itself then just has to initialize itself from within a 'static this' module\n\tconstructor and perform the appropriate calls to listen for connections or other operations.\n\n\tIf you want to provide your own main function, you have to import vibe.vibe instead of\n\tvibe.d and define a -version=VibeCustomMain. Be sure to call vibe.core.core.runEventLoop\n\tat the end of your main function in this case. Also beware that you have to make appropriate\n\tcalls to vibe.core.args.finalizeCommandLineOptions and vibe.core.core.lowerPrivileges to get the\n\tsame behavior.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/textfilter/markdown.d",
	"members": [
		{
			"kind": "template",
			"line": 43,
			"members": [
				{
					"kind": "function",
					"line": 43,
					"type": "string(string str, MarkdownFlags flags = MarkdownFlags.vanillaMarkdown)",
					"parameters": [
						{
							"type": "string",
							"name": "str"
						},
						{
							"default": "MarkdownFlags.vanillaMarkdown",
							"type": "MarkdownFlags",
							"name": "flags"
						}
					],
					"name": "filterMarkdown",
					"comment": " Returns a Markdown filtered HTML string.\n",
					"endline": 48
				}
			],
			"parameters": [],
			"comment": " Returns a Markdown filtered HTML string.\n",
			"name": "filterMarkdown"
		},
		{
			"kind": "template",
			"line": 53,
			"members": [
				{
					"kind": "function",
					"line": 53,
					"type": "void(ref R dst, string src, MarkdownFlags flags = MarkdownFlags.vanillaMarkdown)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "src"
						},
						{
							"default": "MarkdownFlags.vanillaMarkdown",
							"type": "MarkdownFlags",
							"name": "flags"
						}
					],
					"name": "filterMarkdown",
					"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n",
					"endline": 61
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n",
			"name": "filterMarkdown"
		},
		{
			"kind": "enum",
			"line": 63,
			"members": [
				{
					"kind": "enum member",
					"line": 64,
					"name": "none"
				},
				{
					"kind": "enum member",
					"line": 65,
					"name": "keepLineBreaks"
				},
				{
					"kind": "enum member",
					"line": 66,
					"name": "backtickCodeBlocks"
				},
				{
					"kind": "enum member",
					"line": 67,
					"name": "noInlineHtml"
				},
				{
					"kind": "enum member",
					"line": 68,
					"name": "vanillaMarkdown"
				},
				{
					"kind": "enum member",
					"line": 69,
					"name": "forumDefault"
				}
			],
			"baseDeco": "i",
			"name": "MarkdownFlags"
		},
		{
			"kind": "enum",
			"line": 76,
			"members": [
				{
					"kind": "enum member",
					"line": 77,
					"name": "White"
				},
				{
					"kind": "enum member",
					"line": 78,
					"name": "Quote"
				}
			],
			"baseDeco": "i",
			"name": "IndentType"
		},
		{
			"kind": "enum",
			"line": 81,
			"members": [
				{
					"kind": "enum member",
					"line": 82,
					"name": "Undefined"
				},
				{
					"kind": "enum member",
					"line": 83,
					"name": "Blank"
				},
				{
					"kind": "enum member",
					"line": 84,
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 85,
					"name": "Hline"
				},
				{
					"kind": "enum member",
					"line": 86,
					"name": "AtxHeader"
				},
				{
					"kind": "enum member",
					"line": 87,
					"name": "SetextHeader"
				},
				{
					"kind": "enum member",
					"line": 88,
					"name": "UList"
				},
				{
					"kind": "enum member",
					"line": 89,
					"name": "OList"
				},
				{
					"kind": "enum member",
					"line": 90,
					"name": "HtmlBlock"
				},
				{
					"kind": "enum member",
					"line": 91,
					"name": "CodeBlockDelimiter"
				}
			],
			"baseDeco": "i",
			"name": "LineType"
		},
		{
			"kind": "enum",
			"line": 161,
			"members": [
				{
					"kind": "enum member",
					"line": 162,
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 163,
					"name": "Text"
				},
				{
					"kind": "enum member",
					"line": 164,
					"name": "Paragraph"
				},
				{
					"kind": "enum member",
					"line": 165,
					"name": "Header"
				},
				{
					"kind": "enum member",
					"line": 166,
					"name": "OList"
				},
				{
					"kind": "enum member",
					"line": 167,
					"name": "UList"
				},
				{
					"kind": "enum member",
					"line": 168,
					"name": "ListItem"
				},
				{
					"kind": "enum member",
					"line": 169,
					"name": "Code"
				},
				{
					"kind": "enum member",
					"line": 170,
					"name": "Quote"
				}
			],
			"baseDeco": "i",
			"name": "BlockType"
		}
	],
	"name": "vibe.textfilter.markdown",
	"comment": "\n\tMarkdown parser implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/textfilter/urlencode.d",
	"members": [
		{
			"kind": "function",
			"line": 21,
			"deco": "FAyaAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"default": "null",
					"name": "allowed_chars"
				}
			],
			"name": "urlEncode",
			"comment": " Returns the URL encoded version of a given string.\n",
			"endline": 27
		},
		{
			"kind": "function",
			"line": 31,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "urlDecode",
			"comment": " Returns the decoded version of a given URL encoded string.\n",
			"endline": 38
		},
		{
			"kind": "template",
			"line": 42,
			"members": [
				{
					"kind": "function",
					"line": 42,
					"type": "void(ref R dst, string str, string allowed_chars = null)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "str"
						},
						{
							"default": "null",
							"type": "string",
							"name": "allowed_chars"
						}
					],
					"name": "filterURLEncode",
					"comment": " Writes the URL encoded version of the given string to an output range.\n",
					"endline": 61
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Writes the URL encoded version of the given string to an output range.\n",
			"name": "filterURLEncode"
		},
		{
			"kind": "alias",
			"line": 64,
			"storageClass": [
				"deprecated"
			],
			"name": "filterUrlEncode",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 69,
			"members": [
				{
					"kind": "function",
					"line": 69,
					"type": "void(ref R dst, string str)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "str"
						}
					],
					"name": "filterURLDecode",
					"comment": " Writes the decoded version of the given URL encoded string to an output range.\n",
					"endline": 90
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Writes the decoded version of the given URL encoded string to an output range.\n",
			"name": "filterURLDecode"
		},
		{
			"kind": "alias",
			"line": 93,
			"storageClass": [
				"deprecated"
			],
			"name": "filterUrlDecode",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.textfilter.urlencode",
	"comment": "\n\tURL-encoding implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/textfilter/html.d",
	"members": [
		{
			"kind": "function",
			"line": 17,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "htmlEscape",
			"comment": " Returns the HTML escaped version of a given string.\n",
			"endline": 28
		},
		{
			"kind": "template",
			"line": 33,
			"members": [
				{
					"kind": "function",
					"line": 33,
					"type": "void(ref R dst, string str)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "str"
						}
					],
					"name": "filterHTMLEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range.\n",
					"endline": 37
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Writes the HTML escaped version of a given string to an output range.\n",
			"name": "filterHTMLEscape"
		},
		{
			"kind": "alias",
			"line": 40,
			"storageClass": [
				"deprecated"
			],
			"name": "filterHtmlEscape",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 45,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "htmlAttribEscape",
			"comment": " Returns the HTML escaped version of a given string (also escapes double quotes).\n",
			"endline": 56
		},
		{
			"kind": "template",
			"line": 60,
			"members": [
				{
					"kind": "function",
					"line": 60,
					"type": "void(ref R dst, string str)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "str"
						}
					],
					"name": "filterHTMLAttribEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n",
					"endline": 64
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n",
			"name": "filterHTMLAttribEscape"
		},
		{
			"kind": "alias",
			"line": 67,
			"storageClass": [
				"deprecated"
			],
			"name": "filterHtmlAttribEscape",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 72,
			"members": [
				{
					"kind": "function",
					"line": 72,
					"type": "string(string str)",
					"parameters": [
						{
							"type": "string",
							"name": "str"
						}
					],
					"name": "htmlAllEscape",
					"comment": " Returns the HTML escaped version of a given string (escapes every character).\n",
					"endline": 83
				}
			],
			"parameters": [],
			"comment": " Returns the HTML escaped version of a given string (escapes every character).\n",
			"name": "htmlAllEscape"
		},
		{
			"kind": "template",
			"line": 87,
			"members": [
				{
					"kind": "function",
					"line": 87,
					"type": "void(ref R dst, string str)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "str"
						}
					],
					"name": "filterHTMLAllEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n",
					"endline": 94
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n",
			"name": "filterHTMLAllEscape"
		},
		{
			"kind": "alias",
			"line": 97,
			"storageClass": [
				"deprecated"
			],
			"name": "filterHtmlAllEscape",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 103,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "htmlEscapeMin",
			"comment": "\n\tMinimally escapes a text so that no HTML tags appear in it.\n",
			"endline": 109
		},
		{
			"kind": "template",
			"line": 115,
			"members": [
				{
					"kind": "function",
					"line": 115,
					"type": "void(ref R dst, dchar ch, HTMLEscapeFlags flags = HTMLEscapeFlags.escapeNewline)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"deco": "w",
							"name": "ch"
						},
						{
							"default": "HTMLEscapeFlags.escapeNewline",
							"type": "HTMLEscapeFlags",
							"name": "flags"
						}
					],
					"name": "filterHTMLEscape",
					"comment": "\n\tWrites the HTML escaped version of a character to an output range.\n",
					"endline": 148
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites the HTML escaped version of a character to an output range.\n",
			"name": "filterHTMLEscape"
		},
		{
			"kind": "enum",
			"line": 151,
			"members": [
				{
					"kind": "enum member",
					"line": 152,
					"name": "escapeMinimal"
				},
				{
					"kind": "enum member",
					"line": 153,
					"name": "escapeQuotes"
				},
				{
					"kind": "enum member",
					"line": 154,
					"name": "escapeNewline"
				},
				{
					"kind": "enum member",
					"line": 155,
					"name": "escapeUnknown"
				}
			],
			"baseDeco": "i",
			"name": "HTMLEscapeFlags"
		},
		{
			"kind": "alias",
			"line": 159,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe10textfilter4html15HTMLEscapeFlags",
			"name": "HtmlEscapeFlags",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.textfilter.html",
	"comment": "\n\tHTML character entity escaping.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/utils/hashmap.d",
	"members": [
		{
			"kind": "template",
			"line": 16,
			"members": [
				{
					"kind": "struct",
					"line": 16,
					"members": [
						{
							"kind": "variable",
							"line": 17,
							"init": "Key.init",
							"storageClass": [
								"enum"
							],
							"name": "clearValue"
						},
						{
							"kind": "function",
							"line": 18,
							"type": "bool(in Key a, in Key b)",
							"parameters": [
								{
									"storageClass": [
										"in"
									],
									"type": "Key",
									"name": "a"
								},
								{
									"storageClass": [
										"in"
									],
									"type": "Key",
									"name": "b"
								}
							],
							"name": "equals",
							"endline": 22
						}
					],
					"name": "DefaultHashMapTraits"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Key"
				}
			],
			"name": "DefaultHashMapTraits"
		},
		{
			"kind": "template",
			"line": 26,
			"members": [
				{
					"kind": "struct",
					"line": 26,
					"members": [
						{
							"kind": "struct",
							"line": 27,
							"members": [
								{
									"kind": "variable",
									"line": 28,
									"type": "UnConst!(Key)",
									"name": "key"
								},
								{
									"kind": "variable",
									"line": 29,
									"type": "Value",
									"name": "value"
								},
								{
									"kind": "constructor",
									"line": 31,
									"type": "(Key key, Value value)",
									"parameters": [
										{
											"type": "Key",
											"name": "key"
										},
										{
											"type": "Value",
											"name": "value"
										}
									],
									"name": "this",
									"endline": 31
								}
							],
							"name": "TableEntry"
						},
						{
							"kind": "variable",
							"line": 34,
							"type": "TableEntry[]",
							"name": "m_table"
						},
						{
							"kind": "variable",
							"line": 35,
							"type": "size_t",
							"name": "m_length"
						},
						{
							"kind": "variable",
							"line": 36,
							"type": "shared(Allocator)",
							"name": "m_allocator"
						},
						{
							"kind": "variable",
							"line": 37,
							"type": "hash_t delegate(Key)",
							"name": "m_hasher"
						},
						{
							"kind": "variable",
							"line": 38,
							"deco": "b",
							"name": "m_resizing"
						},
						{
							"kind": "constructor",
							"line": 41,
							"type": "(shared(Allocator) allocator)",
							"parameters": [
								{
									"type": "shared(Allocator)",
									"name": "allocator"
								}
							],
							"name": "this",
							"endline": 44
						},
						{
							"kind": "destructor",
							"line": 46,
							"name": "~this",
							"endline": 49
						},
						{
							"kind": "function",
							"line": 53,
							"type": "const size_t()",
							"name": "length",
							"endline": 53
						},
						{
							"kind": "function",
							"line": 55,
							"type": "void(Key key)",
							"parameters": [
								{
									"type": "Key",
									"name": "key"
								}
							],
							"name": "remove",
							"endline": 75
						},
						{
							"kind": "function",
							"line": 77,
							"type": "Value(Key key, lazy Value default_value = Value.init)",
							"parameters": [
								{
									"type": "Key",
									"name": "key"
								},
								{
									"storageClass": [
										"lazy"
									],
									"default": "Value.init",
									"type": "Value",
									"name": "default_value"
								}
							],
							"name": "get",
							"endline": 82
						},
						{
							"kind": "function",
							"line": 93,
							"type": "void()",
							"name": "clear",
							"endline": 101
						},
						{
							"kind": "function",
							"line": 103,
							"type": "void(Value value, Key key)",
							"parameters": [
								{
									"type": "Value",
									"name": "value"
								},
								{
									"type": "Key",
									"name": "key"
								}
							],
							"name": "opIndexAssign",
							"endline": 117
						},
						{
							"kind": "function",
							"line": 119,
							"type": "inout inout(Value)(Key key)",
							"parameters": [
								{
									"type": "Key",
									"name": "key"
								}
							],
							"name": "opIndex",
							"endline": 124
						},
						{
							"kind": "template",
							"line": 126,
							"members": [
								{
									"kind": "function",
									"line": 126,
									"type": "inout inout(Value)*(Key key)",
									"parameters": [
										{
											"type": "Key",
											"name": "key"
										}
									],
									"name": "opBinaryRight",
									"endline": 131
								}
							],
							"parameters": [
								{
									"kind": "value",
									"type": "string",
									"name": "op"
								}
							],
							"name": "opBinaryRight"
						},
						{
							"kind": "function",
							"line": 133,
							"type": "int(int delegate(ref Value) del)",
							"parameters": [
								{
									"type": "int delegate(ref Value)",
									"name": "del"
								}
							],
							"name": "opApply",
							"endline": 140
						},
						{
							"kind": "function",
							"line": 142,
							"type": "const int(int delegate(ref Value) del)",
							"parameters": [
								{
									"type": "int delegate(ref Value)",
									"name": "del"
								}
							],
							"name": "opApply",
							"endline": 149
						},
						{
							"kind": "function",
							"line": 151,
							"type": "int(int delegate(ref Key, ref Value) del)",
							"parameters": [
								{
									"type": "int delegate(ref Key, ref Value)",
									"name": "del"
								}
							],
							"name": "opApply",
							"endline": 158
						},
						{
							"kind": "function",
							"line": 160,
							"type": "const int(int delegate(ref Key, ref Value) del)",
							"parameters": [
								{
									"type": "int delegate(ref Key, ref Value)",
									"name": "del"
								}
							],
							"name": "opApply",
							"endline": 167
						},
						{
							"kind": "function",
							"line": 169,
							"type": "const size_t(Key key)",
							"parameters": [
								{
									"type": "Key",
									"name": "key"
								}
							],
							"name": "findIndex",
							"endline": 180
						},
						{
							"kind": "function",
							"line": 182,
							"type": "void(size_t amount)",
							"parameters": [
								{
									"type": "size_t",
									"name": "amount"
								}
							],
							"name": "grow",
							"endline": 189
						},
						{
							"kind": "function",
							"line": 191,
							"type": "void(size_t new_size)",
							"parameters": [
								{
									"type": "size_t",
									"name": "new_size"
								}
							],
							"name": "resize",
							"endline": 226
						}
					],
					"name": "HashMap"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Key"
				},
				{
					"kind": "type",
					"name": "Value"
				},
				{
					"kind": "type",
					"default": "DefaultHashMapTraits!(Key)",
					"name": "Traits"
				}
			],
			"name": "HashMap"
		}
	],
	"name": "vibe.utils.hashmap",
	"comment": "\n\tInternal hash map implementation.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/utils/memory.d",
	"members": [
		{
			"kind": "function",
			"line": 24,
			"deco": "FZOC4vibe5utils6memory9Allocator",
			"name": "defaultAllocator",
			"endline": 37
		},
		{
			"kind": "function",
			"line": 39,
			"deco": "FZOC4vibe5utils6memory9Allocator",
			"name": "manualAllocator",
			"endline": 48
		},
		{
			"kind": "template",
			"line": 50,
			"members": [
				{
					"kind": "function",
					"line": 50,
					"storageClass": [
						"auto"
					],
					"type": "(Allocator allocator, ARGS args)",
					"parameters": [
						{
							"type": "Allocator",
							"name": "allocator"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "allocObject",
					"endline": 60
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"defaultValue": "true",
					"deco": "b",
					"name": "MANAGED"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"name": "allocObject"
		},
		{
			"kind": "template",
			"line": 62,
			"members": [
				{
					"kind": "function",
					"line": 62,
					"type": "T[](shared(Allocator) allocator, size_t n)",
					"parameters": [
						{
							"type": "shared(Allocator)",
							"name": "allocator"
						},
						{
							"type": "size_t",
							"name": "n"
						}
					],
					"name": "allocArray",
					"endline": 75
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"defaultValue": "true",
					"deco": "b",
					"name": "MANAGED"
				}
			],
			"name": "allocArray"
		},
		{
			"kind": "interface",
			"line": 78,
			"members": [
				{
					"kind": "variable",
					"line": 79,
					"init": "16u",
					"storageClass": [
						"enum"
					],
					"deco": "k",
					"name": "alignment",
					"originalType": "size_t"
				},
				{
					"kind": "variable",
					"line": 80,
					"init": "15u",
					"storageClass": [
						"enum"
					],
					"deco": "k",
					"name": "alignmentMask",
					"originalType": "size_t"
				},
				{
					"kind": "function",
					"line": 82,
					"storageClass": [
						"abstract",
						"shared"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"out": {
						"kind": "function",
						"line": 83,
						"deco": "FKxAvZv",
						"parameters": [
							{
								"deco": "xAv",
								"storageClass": [
									"ref"
								],
								"name": "__result"
							}
						],
						"name": "__ensure",
						"originalType": "void(ref const void[] __result)",
						"endline": 83
					},
					"name": "alloc",
					"originalType": "void[](size_t sz)"
				},
				{
					"kind": "function",
					"line": 85,
					"storageClass": [
						"abstract",
						"shared"
					],
					"deco": "OFAvkZAv",
					"in": {
						"kind": "function",
						"line": 86,
						"deco": "FZv",
						"name": "__require",
						"endline": 86
					},
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						},
						{
							"deco": "k",
							"name": "new_sz"
						}
					],
					"out": {
						"kind": "function",
						"line": 87,
						"deco": "FKxAvZv",
						"parameters": [
							{
								"deco": "xAv",
								"storageClass": [
									"ref"
								],
								"name": "__result"
							}
						],
						"name": "__ensure",
						"originalType": "void(ref const void[] __result)",
						"endline": 87
					},
					"name": "realloc",
					"originalType": "void[](void[] mem, size_t new_sz)"
				},
				{
					"kind": "function",
					"line": 89,
					"storageClass": [
						"abstract",
						"shared"
					],
					"deco": "OFAvZv",
					"in": {
						"kind": "function",
						"line": 90,
						"deco": "FZv",
						"name": "__require",
						"endline": 90
					},
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)"
				}
			],
			"name": "Allocator"
		},
		{
			"kind": "class",
			"line": 93,
			"members": [
				{
					"kind": "constructor",
					"line": 101,
					"storageClass": [
						"synchronized",
						"shared"
					],
					"deco": "OFOC4vibe5utils6memory9AllocatorZOC4vibe5utils6memory14DebugAllocator",
					"parameters": [
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"name": "base_allocator"
						}
					],
					"name": "this",
					"originalType": "(shared(Allocator) base_allocator)",
					"endline": 104
				},
				{
					"kind": "function",
					"line": 106,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OxFNdZk",
					"name": "allocatedBlockCount",
					"originalType": "const size_t()",
					"endline": 106
				},
				{
					"kind": "function",
					"line": 107,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OxFNdZk",
					"name": "bytesAllocated",
					"originalType": "const size_t()",
					"endline": 107
				},
				{
					"kind": "function",
					"line": 108,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OxFNdZk",
					"name": "maxBytesAllocated",
					"originalType": "const size_t()",
					"endline": 108
				},
				{
					"kind": "function",
					"line": 110,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 122,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 124,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						},
						{
							"deco": "k",
							"name": "new_size"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] mem, size_t new_size)",
					"endline": 137,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 138,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)",
					"endline": 146,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "DebugAllocator"
		},
		{
			"kind": "class",
			"line": 149,
			"members": [
				{
					"kind": "function",
					"line": 150,
					"storageClass": [
						"shared"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 155,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 157,
					"storageClass": [
						"shared"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						},
						{
							"deco": "k",
							"name": "new_size"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] mem, size_t new_size)",
					"endline": 162,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 164,
					"storageClass": [
						"shared"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)",
					"endline": 167,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "MallocAllocator"
		},
		{
			"kind": "class",
			"line": 170,
			"members": [
				{
					"kind": "function",
					"line": 171,
					"storageClass": [
						"shared"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 174,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 175,
					"storageClass": [
						"shared"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						},
						{
							"deco": "k",
							"name": "new_size"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] mem, size_t new_size)",
					"endline": 180,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 181,
					"storageClass": [
						"shared"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)",
					"endline": 185,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "GCAllocator"
		},
		{
			"kind": "class",
			"line": 188,
			"members": [
				{
					"kind": "constructor",
					"line": 194,
					"storageClass": [
						"synchronized",
						"shared"
					],
					"deco": "OFOC4vibe5utils6memory9AllocatorZOC4vibe5utils6memory21AutoFreeListAllocator",
					"parameters": [
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"name": "base_allocator"
						}
					],
					"name": "this",
					"originalType": "(shared(Allocator) base_allocator)",
					"endline": 200
				},
				{
					"kind": "function",
					"line": 202,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 213,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 215,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "data"
						},
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] data, size_t sz)",
					"endline": 225,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 227,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "data"
						}
					],
					"name": "free",
					"originalType": "void(void[] data)",
					"endline": 236,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "AutoFreeListAllocator"
		},
		{
			"kind": "class",
			"line": 239,
			"members": [
				{
					"kind": "struct",
					"line": 240,
					"members": [
						{
							"kind": "variable",
							"line": 240,
							"deco": "PS4vibe5utils6memory13PoolAllocator4Pool",
							"name": "next",
							"offset": 0
						},
						{
							"kind": "variable",
							"line": 240,
							"deco": "Av",
							"name": "data",
							"offset": 4
						},
						{
							"kind": "variable",
							"line": 240,
							"deco": "Av",
							"name": "remaining",
							"offset": 12
						}
					],
					"name": "Pool"
				},
				{
					"kind": "struct",
					"line": 241,
					"members": [
						{
							"kind": "variable",
							"line": 241,
							"deco": "PS4vibe5utils6memory13PoolAllocator10Destructor",
							"name": "next",
							"offset": 0
						},
						{
							"kind": "variable",
							"line": 241,
							"deco": "PFPvZv",
							"name": "destructor",
							"offset": 4
						},
						{
							"kind": "variable",
							"line": 241,
							"deco": "Pv",
							"name": "object",
							"offset": 8
						}
					],
					"name": "Destructor"
				},
				{
					"kind": "constructor",
					"line": 250,
					"storageClass": [
						"synchronized",
						"shared"
					],
					"deco": "OFkOC4vibe5utils6memory9AllocatorZOC4vibe5utils6memory13PoolAllocator",
					"parameters": [
						{
							"deco": "k",
							"name": "pool_size"
						},
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"name": "base"
						}
					],
					"name": "this",
					"originalType": "(size_t pool_size, shared(Allocator) base)",
					"endline": 254
				},
				{
					"kind": "function",
					"line": 256,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OFNdZk",
					"name": "totalSize",
					"originalType": "size_t()",
					"endline": 264
				},
				{
					"kind": "function",
					"line": 266,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OFNdZk",
					"name": "allocatedSize",
					"originalType": "size_t()",
					"endline": 274
				},
				{
					"kind": "function",
					"line": 276,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 311,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 313,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "arr"
						},
						{
							"deco": "k",
							"name": "newsize"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] arr, size_t newsize)",
					"endline": 333,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 335,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)",
					"endline": 337,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				},
				{
					"kind": "function",
					"line": 339,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFZv",
					"name": "freeAll",
					"originalType": "void()",
					"endline": 358
				},
				{
					"kind": "function",
					"line": 360,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFZv",
					"name": "reset",
					"originalType": "void()",
					"endline": 372
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "PoolAllocator"
		},
		{
			"kind": "class",
			"line": 381,
			"members": [
				{
					"kind": "constructor",
					"line": 392,
					"storageClass": [
						"synchronized",
						"shared"
					],
					"deco": "OFkOC4vibe5utils6memory9AllocatorZOC4vibe5utils6memory13FreeListAlloc",
					"parameters": [
						{
							"deco": "k",
							"name": "elem_size"
						},
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"name": "base_allocator"
						}
					],
					"name": "this",
					"originalType": "(size_t elem_size, shared(Allocator) base_allocator)",
					"endline": 398
				},
				{
					"kind": "function",
					"line": 400,
					"storageClass": [
						"synchronized",
						"@property"
					],
					"deco": "OxFNdZk",
					"name": "elementSize",
					"originalType": "const size_t()",
					"endline": 400
				},
				{
					"kind": "function",
					"line": 402,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFkZAv",
					"parameters": [
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "alloc",
					"originalType": "void[](size_t sz)",
					"endline": 419,
					"overrides": [
						"vibe.utils.memory.Allocator.alloc"
					]
				},
				{
					"kind": "function",
					"line": 421,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvkZAv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						},
						{
							"deco": "k",
							"name": "sz"
						}
					],
					"name": "realloc",
					"originalType": "void[](void[] mem, size_t sz)",
					"endline": 426,
					"overrides": [
						"vibe.utils.memory.Allocator.realloc"
					]
				},
				{
					"kind": "function",
					"line": 428,
					"storageClass": [
						"synchronized"
					],
					"deco": "OFAvZv",
					"parameters": [
						{
							"deco": "Av",
							"name": "mem"
						}
					],
					"name": "free",
					"originalType": "void(void[] mem)",
					"endline": 436,
					"overrides": [
						"vibe.utils.memory.Allocator.free"
					]
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "FreeListAlloc"
		},
		{
			"kind": "template",
			"line": 439,
			"members": [
				{
					"kind": "variable",
					"line": 441,
					"init": "AllocSize!(T)",
					"storageClass": [
						"enum"
					],
					"name": "ElemSize"
				},
				{
					"kind": "template",
					"line": 449,
					"members": [
						{
							"kind": "function",
							"line": 449,
							"type": "TR(ARGS args)",
							"parameters": [
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "alloc",
							"endline": 456
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 458,
					"type": "void(TR obj)",
					"parameters": [
						{
							"type": "TR",
							"name": "obj"
						}
					],
					"name": "free",
					"endline": 466
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"defaultValue": "true",
					"deco": "b",
					"name": "USE_GC"
				},
				{
					"kind": "value",
					"defaultValue": "true",
					"deco": "b",
					"name": "INIT"
				}
			],
			"name": "FreeListObjectAlloc"
		},
		{
			"kind": "template",
			"line": 469,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "AllocSize"
		},
		{
			"kind": "template",
			"line": 476,
			"members": [
				{
					"kind": "struct",
					"line": 476,
					"members": [
						{
							"kind": "variable",
							"line": 477,
							"init": "AllocSize!(T)",
							"storageClass": [
								"enum"
							],
							"name": "ElemSize"
						},
						{
							"kind": "variable",
							"line": 485,
							"type": "TR",
							"name": "m_object"
						},
						{
							"kind": "variable",
							"line": 486,
							"init": "518477847",
							"type": "size_t",
							"name": "m_magic"
						},
						{
							"kind": "template",
							"line": 488,
							"members": [
								{
									"kind": "function",
									"line": 488,
									"type": "FreeListRef(ARGS args)",
									"parameters": [
										{
											"type": "ARGS",
											"name": "args"
										}
									],
									"name": "opCall",
									"endline": 498
								}
							],
							"parameters": [
								{
									"kind": "tuple",
									"name": "ARGS"
								}
							],
							"name": "opCall"
						},
						{
							"kind": "destructor",
							"line": 500,
							"name": "~this",
							"endline": 508
						},
						{
							"kind": "function",
							"line": 519,
							"type": "void(FreeListRef other)",
							"parameters": [
								{
									"type": "FreeListRef",
									"name": "other"
								}
							],
							"name": "opAssign",
							"endline": 527
						},
						{
							"kind": "function",
							"line": 529,
							"type": "void()",
							"name": "clear",
							"endline": 548
						},
						{
							"kind": "function",
							"line": 550,
							"type": "const const(TR)()",
							"name": "get",
							"endline": 550
						},
						{
							"kind": "function",
							"line": 551,
							"type": "TR()",
							"name": "get",
							"endline": 551
						},
						{
							"kind": "function",
							"line": 554,
							"type": "const int()",
							"name": "refCount",
							"endline": 559
						},
						{
							"kind": "function",
							"line": 561,
							"type": "const void()",
							"name": "checkInvariants",
							"endline": 565
						}
					],
					"name": "FreeListRef"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"defaultValue": "true",
					"deco": "b",
					"name": "INIT"
				}
			],
			"name": "FreeListRef"
		}
	],
	"name": "vibe.utils.memory",
	"comment": "\n\tUtility functions for memory management\n\n\tNote that this module currently is a big sand box for testing allocation related stuff.\n\tNothing here, including the interfaces, is final but rather a lot of experimentation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/utils/validation.d",
	"members": [
		{
			"kind": "function",
			"line": 31,
			"deco": "FAyakZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "k",
					"default": "64u",
					"name": "max_length"
				}
			],
			"name": "validateEmail",
			"comment": " Provides a simple email address validation.\n\n\tNote that the validation could be stricter in some cases than required. The user name\n\tis forced to be ASCII, which is not strictly required as of RFC 6531. It also does not\n\tallow quotiations for the user name part (RFC 5321).\n\n\tInvalid email adresses will cause an exception with the error description to be thrown.\n",
			"originalType": "string(string str, size_t max_length = 64)",
			"endline": 47
		},
		{
			"kind": "function",
			"line": 62,
			"deco": "FAyaiiAyabZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "i",
					"default": "3",
					"name": "min_length"
				},
				{
					"deco": "i",
					"default": "32",
					"name": "max_length"
				},
				{
					"deco": "Aya",
					"default": "\"-_\"",
					"name": "additional_chars"
				},
				{
					"deco": "b",
					"default": "true",
					"name": "no_number_start"
				}
			],
			"name": "validateUserName",
			"comment": " Validates a user name string.\n\n\tUser names may only contain ASCII letters and digits or any of the specified additional\n\tletters.\n\n\tInvalid user names will cause an exception with the error description to be thrown.\n",
			"endline": 71
		},
		{
			"kind": "function",
			"line": 80,
			"deco": "FAyaAyaAyabZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"default": "\"_\"",
					"name": "additional_chars"
				},
				{
					"deco": "Aya",
					"default": "\"An identifier\"",
					"name": "entity_name"
				},
				{
					"deco": "b",
					"default": "true",
					"name": "no_number_start"
				}
			],
			"name": "validateIdent",
			"comment": " Validates an identifier string as used in most programming languages.\n\n\tThe identifier must begin with a letter or with any of the additional_chars and may\n\tcontain only ASCII letters and digits and any of the additional_chars.\n\n\tInvalid identifiers will cause an exception with the error description to be thrown.\n",
			"endline": 95
		},
		{
			"kind": "function",
			"line": 99,
			"deco": "FAyaAyakkZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"name": "str_confirm"
				},
				{
					"deco": "k",
					"default": "8u",
					"name": "min_length"
				},
				{
					"deco": "k",
					"default": "64u",
					"name": "max_length"
				}
			],
			"name": "validatePassword",
			"comment": " Checks a password for minimum complexity requirements\n",
			"originalType": "string(string str, string str_confirm, size_t min_length = 8, size_t max_length = 64)",
			"endline": 107
		},
		{
			"kind": "function",
			"line": 111,
			"deco": "FAyakkAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "k",
					"default": "0u",
					"name": "min_length"
				},
				{
					"deco": "k",
					"default": "0u",
					"name": "max_length"
				},
				{
					"deco": "Aya",
					"default": "\"String\"",
					"name": "entity_name"
				}
			],
			"name": "validateString",
			"comment": " Checks if a string falls within the specified length range.\n",
			"originalType": "string(string str, size_t min_length = 0, size_t max_length = 0, string entity_name = \"String\")",
			"endline": 119
		}
	],
	"name": "vibe.utils.validation",
	"comment": "\n\tString validation routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/utils/array.d",
	"members": [
		{
			"kind": "template",
			"line": 17,
			"members": [
				{
					"kind": "function",
					"line": 17,
					"type": "void(ref T[] array, T item)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "T[]",
							"name": "array"
						},
						{
							"type": "T",
							"name": "item"
						}
					],
					"name": "removeFromArray",
					"endline": 24
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "removeFromArray"
		},
		{
			"kind": "template",
			"line": 26,
			"members": [
				{
					"kind": "function",
					"line": 26,
					"type": "void(ref T[] array, size_t idx)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "T[]",
							"name": "array"
						},
						{
							"type": "size_t",
							"name": "idx"
						}
					],
					"name": "removeFromArrayIdx",
					"endline": 31
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "removeFromArrayIdx"
		},
		{
			"kind": "enum",
			"line": 33,
			"members": [
				{
					"kind": "enum member",
					"line": 34,
					"name": "keepData"
				},
				{
					"kind": "enum member",
					"line": 35,
					"name": "freeData"
				},
				{
					"kind": "enum member",
					"line": 36,
					"name": "reuseData"
				}
			],
			"baseDeco": "i",
			"name": "AppenderResetMode"
		},
		{
			"kind": "template",
			"line": 39,
			"members": [
				{
					"kind": "struct",
					"line": 39,
					"members": [
						{
							"kind": "alias",
							"line": 40,
							"type": "Unqual!(E)",
							"name": "ElemType"
						},
						{
							"kind": "variable",
							"line": 42,
							"type": "ElemType[]",
							"name": "m_data"
						},
						{
							"kind": "variable",
							"line": 43,
							"type": "ElemType[]",
							"name": "m_remaining"
						},
						{
							"kind": "variable",
							"line": 44,
							"type": "shared(Allocator)",
							"name": "m_alloc"
						},
						{
							"kind": "constructor",
							"line": 47,
							"type": "(shared(Allocator) alloc)",
							"parameters": [
								{
									"type": "shared(Allocator)",
									"name": "alloc"
								}
							],
							"name": "this",
							"endline": 50
						},
						{
							"kind": "function",
							"line": 54,
							"type": "ArrayType()",
							"name": "data",
							"endline": 54
						},
						{
							"kind": "function",
							"line": 56,
							"type": "void(AppenderResetMode reset_mode = AppenderResetMode.keepData)",
							"parameters": [
								{
									"default": "AppenderResetMode.keepData",
									"type": "AppenderResetMode",
									"name": "reset_mode"
								}
							],
							"name": "reset",
							"endline": 61
						},
						{
							"kind": "function",
							"line": 63,
							"type": "void(size_t amt)",
							"parameters": [
								{
									"type": "size_t",
									"name": "amt"
								}
							],
							"name": "reserve",
							"endline": 75
						},
						{
							"kind": "function",
							"line": 77,
							"type": "void(E el)",
							"parameters": [
								{
									"type": "E",
									"name": "el"
								}
							],
							"name": "put",
							"endline": 82
						},
						{
							"kind": "function",
							"line": 84,
							"type": "void(ArrayType arr)",
							"parameters": [
								{
									"type": "ArrayType",
									"name": "arr"
								}
							],
							"name": "put",
							"endline": 89
						},
						{
							"kind": "function",
							"line": 121,
							"type": "void(size_t min_free)",
							"parameters": [
								{
									"type": "size_t",
									"name": "min_free"
								}
							],
							"name": "grow",
							"endline": 130
						}
					],
					"name": "AllocAppender"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"type": "E[]",
					"name": "ArrayType"
				},
				{
					"kind": "type",
					"name": "E"
				}
			],
			"name": "AllocAppender"
		},
		{
			"kind": "template",
			"line": 133,
			"members": [
				{
					"kind": "struct",
					"line": 133,
					"members": [
						{
							"kind": "alias",
							"line": 134,
							"type": "Unqual!(E)",
							"name": "ElemType"
						},
						{
							"kind": "variable",
							"line": 136,
							"type": "ElemType[NELEM]",
							"name": "m_data"
						},
						{
							"kind": "variable",
							"line": 137,
							"type": "size_t",
							"name": "m_fill"
						},
						{
							"kind": "function",
							"line": 140,
							"type": "void()",
							"name": "clear",
							"endline": 143
						},
						{
							"kind": "function",
							"line": 145,
							"type": "void(E el)",
							"parameters": [
								{
									"type": "E",
									"name": "el"
								}
							],
							"name": "put",
							"endline": 148
						},
						{
							"kind": "function",
							"line": 174,
							"type": "void(ArrayType arr)",
							"parameters": [
								{
									"type": "ArrayType",
									"name": "arr"
								}
							],
							"name": "put",
							"endline": 178
						},
						{
							"kind": "function",
							"line": 180,
							"type": "ArrayType()",
							"name": "data",
							"endline": 180
						}
					],
					"name": "FixedAppender"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"type": "E[]",
					"name": "ArrayType"
				},
				{
					"kind": "value",
					"deco": "k",
					"name": "NELEM"
				},
				{
					"kind": "type",
					"name": "E"
				}
			],
			"name": "FixedAppender"
		},
		{
			"kind": "template",
			"line": 186,
			"members": [
				{
					"kind": "struct",
					"line": 186,
					"members": [
						{
							"kind": "variable",
							"line": 195,
							"init": "0",
							"type": "size_t",
							"name": "m_start"
						},
						{
							"kind": "variable",
							"line": 196,
							"init": "0",
							"type": "size_t",
							"name": "m_fill"
						},
						{
							"kind": "function",
							"line": 203,
							"type": "const bool()",
							"name": "empty",
							"endline": 203
						},
						{
							"kind": "function",
							"line": 205,
							"type": "const bool()",
							"name": "full",
							"endline": 205
						},
						{
							"kind": "function",
							"line": 207,
							"type": "const size_t()",
							"name": "length",
							"endline": 207
						},
						{
							"kind": "function",
							"line": 209,
							"type": "const size_t()",
							"name": "freeSpace",
							"endline": 209
						},
						{
							"kind": "function",
							"line": 211,
							"type": "const size_t()",
							"name": "capacity",
							"endline": 211
						},
						{
							"kind": "function",
							"line": 228,
							"type": "inout inout(T)()",
							"name": "front",
							"endline": 228
						},
						{
							"kind": "function",
							"line": 230,
							"type": "inout inout(T)()",
							"name": "back",
							"endline": 230
						},
						{
							"kind": "function",
							"line": 232,
							"type": "void(T itm)",
							"parameters": [
								{
									"type": "T",
									"name": "itm"
								}
							],
							"name": "put",
							"endline": 232
						},
						{
							"kind": "function",
							"line": 233,
							"type": "void(TC[] itms)",
							"parameters": [
								{
									"type": "TC[]",
									"name": "itms"
								}
							],
							"name": "put",
							"endline": 246
						},
						{
							"kind": "function",
							"line": 247,
							"type": "void(size_t n)",
							"parameters": [
								{
									"type": "size_t",
									"name": "n"
								}
							],
							"name": "putN",
							"endline": 247
						},
						{
							"kind": "function",
							"line": 249,
							"type": "void()",
							"name": "popFront",
							"endline": 249
						},
						{
							"kind": "function",
							"line": 250,
							"type": "void(size_t n)",
							"parameters": [
								{
									"type": "size_t",
									"name": "n"
								}
							],
							"name": "popFrontN",
							"endline": 250
						},
						{
							"kind": "function",
							"line": 252,
							"type": "void()",
							"name": "popBack",
							"endline": 252
						},
						{
							"kind": "function",
							"line": 253,
							"type": "void(size_t n)",
							"parameters": [
								{
									"type": "size_t",
									"name": "n"
								}
							],
							"name": "popBackN",
							"endline": 253
						},
						{
							"kind": "function",
							"line": 255,
							"type": "void(Range r)",
							"parameters": [
								{
									"type": "Range",
									"name": "r"
								}
							],
							"name": "removeAt",
							"endline": 277
						},
						{
							"kind": "function",
							"line": 279,
							"type": "inout inout(T)[]()",
							"name": "peek",
							"endline": 279
						},
						{
							"kind": "function",
							"line": 280,
							"type": "T[]()",
							"name": "peekDst",
							"endline": 283
						},
						{
							"kind": "function",
							"line": 285,
							"type": "void(T[] dst)",
							"parameters": [
								{
									"type": "T[]",
									"name": "dst"
								}
							],
							"name": "read",
							"endline": 298
						},
						{
							"kind": "function",
							"line": 300,
							"type": "int(scope int delegate(ref T itm) del)",
							"parameters": [
								{
									"storageClass": [
										"scope"
									],
									"type": "int delegate(ref T itm)",
									"name": "del"
								}
							],
							"name": "opApply",
							"endline": 315
						},
						{
							"kind": "function",
							"line": 317,
							"type": "inout inout(T)(size_t idx)",
							"parameters": [
								{
									"type": "size_t",
									"name": "idx"
								}
							],
							"name": "opIndex",
							"endline": 317
						},
						{
							"kind": "function",
							"line": 319,
							"type": "Range()",
							"name": "opSlice",
							"endline": 319
						},
						{
							"kind": "function",
							"line": 321,
							"type": "Range(size_t from, size_t to)",
							"parameters": [
								{
									"type": "size_t",
									"name": "from"
								},
								{
									"type": "size_t",
									"name": "to"
								}
							],
							"name": "opSlice",
							"endline": 326
						},
						{
							"kind": "template",
							"line": 328,
							"members": [
								{
									"kind": "function",
									"line": 328,
									"type": "const size_t()",
									"name": "opDollar",
									"endline": 328
								}
							],
							"parameters": [
								{
									"kind": "value",
									"type": "size_t",
									"name": "dim"
								}
							],
							"name": "opDollar"
						},
						{
							"kind": "function",
							"line": 330,
							"type": "const size_t(size_t n)",
							"parameters": [
								{
									"type": "size_t",
									"name": "n"
								}
							],
							"name": "mod",
							"endline": 341
						},
						{
							"kind": "struct",
							"line": 343,
							"members": [
								{
									"kind": "variable",
									"line": 345,
									"type": "T[]",
									"name": "m_buffer"
								},
								{
									"kind": "variable",
									"line": 346,
									"type": "size_t",
									"name": "m_start"
								},
								{
									"kind": "variable",
									"line": 347,
									"type": "size_t",
									"name": "m_length"
								},
								{
									"kind": "constructor",
									"line": 350,
									"type": "(T[] buffer, size_t start, size_t length)",
									"parameters": [
										{
											"type": "T[]",
											"name": "buffer"
										},
										{
											"type": "size_t",
											"name": "start"
										},
										{
											"type": "size_t",
											"name": "length"
										}
									],
									"name": "this",
									"endline": 355
								},
								{
									"kind": "function",
									"line": 357,
									"type": "const bool()",
									"name": "empty",
									"endline": 357
								},
								{
									"kind": "function",
									"line": 359,
									"type": "inout inout(T)()",
									"name": "front",
									"endline": 359
								},
								{
									"kind": "function",
									"line": 361,
									"type": "void()",
									"name": "popFront",
									"endline": 368
								}
							],
							"name": "Range"
						}
					],
					"name": "FixedRingBuffer"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"defaultValue": "0",
					"deco": "k",
					"name": "N"
				}
			],
			"comment": "\n",
			"name": "FixedRingBuffer"
		}
	],
	"name": "vibe.utils.array",
	"comment": "\n\tUtility functions for array processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/utils/string.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "std.string"
		},
		{
			"kind": "function",
			"line": 28,
			"deco": "FxAhZAya",
			"parameters": [
				{
					"deco": "xAh",
					"name": "str"
				}
			],
			"name": "sanitizeUTF8",
			"comment": "\n\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n",
			"originalType": "string(in ubyte[] str)",
			"endline": 46
		},
		{
			"kind": "function",
			"line": 52,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "stripUTF8Bom",
			"comment": "\n\tStrips the byte order mark of an UTF8 encoded string.\n\tThis is useful when the string is coming from a file.\n",
			"endline": 57
		},
		{
			"kind": "function",
			"line": 63,
			"deco": "FAyaAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"name": "chars"
				}
			],
			"name": "allOf",
			"comment": "\n\tChecks if all characters in 'str' are contained in 'chars'.\n",
			"endline": 69
		},
		{
			"kind": "template",
			"line": 71,
			"members": [
				{
					"kind": "function",
					"line": 71,
					"type": "ptrdiff_t(in Char[] s, dchar c, CaseSensitive cs = CaseSensitive.yes)",
					"parameters": [
						{
							"storageClass": [
								"in"
							],
							"type": "Char[]",
							"name": "s"
						},
						{
							"deco": "w",
							"name": "c"
						},
						{
							"default": "CaseSensitive.yes",
							"type": "CaseSensitive",
							"name": "cs"
						}
					],
					"name": "indexOfCT",
					"endline": 86
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Char"
				}
			],
			"name": "indexOfCT"
		},
		{
			"kind": "function",
			"line": 91,
			"deco": "FAyaAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"name": "chars"
				}
			],
			"name": "anyOf",
			"comment": "\n\tChecks if any character in 'str' is contained in 'chars'.\n",
			"endline": 97
		},
		{
			"kind": "function",
			"line": 101,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "s"
				}
			],
			"name": "stripLeftA",
			"comment": " ASCII whitespace trimming (space and tab)\n",
			"endline": 106
		},
		{
			"kind": "function",
			"line": 109,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "s"
				}
			],
			"name": "stripRightA",
			"comment": " ASCII whitespace trimming (space and tab)\n",
			"endline": 114
		},
		{
			"kind": "function",
			"line": 117,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "s"
				}
			],
			"name": "stripA",
			"comment": " ASCII whitespace trimming (space and tab)\n",
			"endline": 120
		},
		{
			"kind": "function",
			"line": 123,
			"deco": "FAyaAyaZi",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "Aya",
					"name": "chars"
				}
			],
			"name": "indexOfAny",
			"comment": " Finds the first occurence of any of the characters in `chars`\n",
			"originalType": "sizediff_t(string str, string chars)",
			"endline": 129
		},
		{
			"kind": "alias",
			"line": 130,
			"name": "countUntilAny"
		},
		{
			"kind": "template",
			"line": 133,
			"members": [
				{
					"kind": "function",
					"line": 133,
					"type": "string(shared(Allocator) alloc, string fmt, ARGS args)",
					"parameters": [
						{
							"type": "shared(Allocator)",
							"name": "alloc"
						},
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "formatAlloc",
					"comment": " Same as std.string.format, just using an allocator.\n",
					"endline": 138
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": " Same as std.string.format, just using an allocator.\n",
			"name": "formatAlloc"
		},
		{
			"kind": "function",
			"line": 141,
			"deco": "FAyaAyaZi",
			"parameters": [
				{
					"deco": "Aya",
					"name": "a"
				},
				{
					"deco": "Aya",
					"name": "b"
				}
			],
			"name": "icmp2",
			"comment": " Special version of icmp() with optimization for ASCII characters\n",
			"endline": 179
		}
	],
	"name": "vibe.utils.string",
	"comment": "\n\tUtility functions for string processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/crypto/passwordhash.d",
	"members": [
		{
			"kind": "function",
			"line": 37,
			"deco": "FAyaAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "password"
				},
				{
					"deco": "Aya",
					"default": "null",
					"name": "additional_salt"
				}
			],
			"name": "generateSimplePasswordHash",
			"comment": "\n\tGenerates a password hash using MD5 together with a 32-bit salt.\n\n\tParams:\n\t\tpassword = The password for which a one-way hash is to be computed\n\t\tadditional_salt = An optional string that is used to compute the final\n\t\t\thash. The same string must be given to testSimplePassword to\n\t\t\tverify a password later. If this string is kept secret, it can\n\t\t\tenhance the security of this function.\n\n\tReturns:\n\t\tA base64 encoded string containing the salt and the hash value is returned.\n\n\tRemarks:\n\t\tMD5 is not considered safe and is computationally cheap. Although the\n\t\tuse of salt helps a bit, using this function is discouraged for systems\n\t\twhere security matters.\n\n\tSee_Also:\n\t\ttestSimplePasswordHash, vibe.crypto.md5\n",
			"endline": 43
		},
		{
			"kind": "function",
			"line": 61,
			"deco": "FAyaAyaAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "hashstring"
				},
				{
					"deco": "Aya",
					"name": "password"
				},
				{
					"deco": "Aya",
					"default": "null",
					"name": "additional_salt"
				}
			],
			"name": "testSimplePasswordHash",
			"comment": "\n\tTests a password hash generated using generateSimplePasswordHash.\n\n\tParams:\n\t\thashstring: The string that was returned by a call to\n\t\t\tgenerateSimplePasswordHash\n\t\tpassword: Password string to test against the hash\n\t\tadditional_salt: The same optional salt that was given to the original\n\t\t\tcall to generateSimplePasswordHash\n\n\tReturns:\n\t\tReturns true if the password matches the specified hash.\n\n\tSee_Also:\n\t\tgenerateSimplePasswordHash, vibe.crypto.md5\n",
			"endline": 69
		}
	],
	"name": "vibe.crypto.passwordhash",
	"comment": "\n\tPassword hashing routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/log.d",
	"members": [
		{
			"kind": "function",
			"line": 26,
			"deco": "FNbE4vibe4core3log8LogLevelZv",
			"parameters": [
				{
					"deco": "E4vibe4core3log8LogLevel",
					"name": "level"
				}
			],
			"name": "setLogLevel",
			"comment": "\n\tSets the minimum log level to be printed.\n\n\tThis level applies to the default stdout/stderr logger only.\n",
			"endline": 29
		},
		{
			"kind": "function",
			"line": 37,
			"deco": "FbZv",
			"parameters": [
				{
					"deco": "b",
					"name": "enable"
				}
			],
			"name": "setPlainLogging",
			"comment": "\n\tEnables/disables output of thread/task ids with each log message-\n\n\tBy default, only the log message is displayed (enable=true).\n",
			"endline": 40
		},
		{
			"kind": "function",
			"line": 49,
			"deco": "FAyaE4vibe4core3log8LogLevelZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "filename"
				},
				{
					"deco": "E4vibe4core3log8LogLevel",
					"default": "cast(LogLevel)6",
					"name": "min_level"
				}
			],
			"name": "setLogFile",
			"comment": "\n\tSets a log file for disk file logging.\n\n\tMultiple calls to this function will register multiple log\n\tfiles for output.\n",
			"originalType": "void(string filename, LogLevel min_level = LogLevel.error)",
			"endline": 58
		},
		{
			"kind": "function",
			"line": 76,
			"deco": "FOC4vibe4core3log6LoggerZv",
			"parameters": [
				{
					"deco": "OC4vibe4core3log6Logger",
					"name": "logger"
				}
			],
			"name": "registerLogger",
			"comment": "\n\tRegisters a new logger instance.\n\n\tThe specified Logger will receive all log messages in its Logger.log\n\tmethod after it has been registered.\n\n\tExamples:\n\t---\n\tauto logger = cast(shared)new HTMLLogger(\"log.html\");\n\tlogger.lock().format = FileLogger.Format.threadTime;\n\tregisterLogger(logger);\n\t---\n\n\tSee_Also: deregisterLogger\n",
			"endline": 79
		},
		{
			"kind": "function",
			"line": 87,
			"deco": "FOC4vibe4core3log6LoggerZv",
			"parameters": [
				{
					"deco": "OC4vibe4core3log6Logger",
					"name": "logger"
				}
			],
			"name": "deregisterLogger",
			"comment": "\n\tDeregisters an active logger instance.\n\n\tSee_Also: registerLogger\n",
			"endline": 93
		},
		{
			"kind": "template",
			"line": 110,
			"members": [
				{
					"kind": "function",
					"line": 110,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "log",
					"comment": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n\n\tExamples:\n\t---\n\tlogInfo(\"Hello, World!\");\n\tlogWarn(\"This may not be %s.\", \"good\");\n\tlog!(LogLevel.info)(\"This is a %s.\", \"test\");\n\t---\n",
					"endline": 122
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "E4vibe4core3log8LogLevel",
					"name": "level"
				},
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n\n\tExamples:\n\t---\n\tlogInfo(\"Hello, World!\");\n\tlogWarn(\"This may not be %s.\", \"good\");\n\tlog!(LogLevel.info)(\"This is a %s.\", \"test\");\n\t---\n",
			"name": "log"
		},
		{
			"kind": "template",
			"line": 124,
			"members": [
				{
					"kind": "function",
					"line": 124,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logTrace",
					"comment": " ditto\n",
					"endline": 124
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logTrace"
		},
		{
			"kind": "template",
			"line": 126,
			"members": [
				{
					"kind": "function",
					"line": 126,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logDebugV",
					"comment": " ditto\n",
					"endline": 126
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logDebugV"
		},
		{
			"kind": "template",
			"line": 128,
			"members": [
				{
					"kind": "function",
					"line": 128,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logDebug",
					"comment": " ditto\n",
					"endline": 128
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logDebug"
		},
		{
			"kind": "template",
			"line": 130,
			"members": [
				{
					"kind": "function",
					"line": 130,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logDiagnostic",
					"comment": " ditto\n",
					"endline": 130
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logDiagnostic"
		},
		{
			"kind": "template",
			"line": 132,
			"members": [
				{
					"kind": "function",
					"line": 132,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logInfo",
					"comment": " ditto\n",
					"endline": 132
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logInfo"
		},
		{
			"kind": "template",
			"line": 134,
			"members": [
				{
					"kind": "function",
					"line": 134,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logWarn",
					"comment": " ditto\n",
					"endline": 134
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logWarn"
		},
		{
			"kind": "template",
			"line": 136,
			"members": [
				{
					"kind": "function",
					"line": 136,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logError",
					"comment": " ditto\n",
					"endline": 136
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logError"
		},
		{
			"kind": "template",
			"line": 138,
			"members": [
				{
					"kind": "function",
					"line": 138,
					"type": "nothrow void(string fmt, auto ref T args)",
					"parameters": [
						{
							"type": "string",
							"name": "fmt"
						},
						{
							"storageClass": [
								"auto",
								"ref"
							],
							"type": "T",
							"name": "args"
						}
					],
					"name": "logCritical",
					"comment": " ditto\n",
					"endline": 138
				}
			],
			"parameters": [
				{
					"kind": "value",
					"defaultValue": "__FILE__",
					"deco": "Aya",
					"name": "file"
				},
				{
					"kind": "value",
					"defaultValue": "__LINE__",
					"deco": "i",
					"name": "line"
				},
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "logCritical"
		},
		{
			"kind": "enum",
			"line": 142,
			"members": [
				{
					"kind": "enum member",
					"line": 143,
					"name": "trace",
					"comment": " Developer information for locating events when no useful stack traces are available\n"
				},
				{
					"kind": "enum member",
					"line": 144,
					"name": "debugV",
					"comment": " Developer information useful for algorithm debugging - for verbose output\n"
				},
				{
					"kind": "enum member",
					"line": 145,
					"name": "debug_",
					"comment": " Developer information useful for algorithm debugging\n"
				},
				{
					"kind": "enum member",
					"line": 146,
					"name": "diagnostic",
					"comment": " Extended user information (e.g. for more detailed error information)\n"
				},
				{
					"kind": "enum member",
					"line": 147,
					"name": "info",
					"comment": " Informational message for normal user education\n"
				},
				{
					"kind": "enum member",
					"line": 148,
					"name": "warn",
					"comment": " Unexpected condition that count indicate an error but has no direct consequences\n"
				},
				{
					"kind": "enum member",
					"line": 149,
					"name": "error",
					"comment": " Normal error that is handled gracefully\n"
				},
				{
					"kind": "enum member",
					"line": 150,
					"name": "critical",
					"comment": " Error that severely influences the execution of the application\n"
				},
				{
					"kind": "enum member",
					"line": 151,
					"name": "fatal",
					"comment": " Error that forces the application to terminate\n"
				},
				{
					"kind": "enum member",
					"line": 152,
					"name": "none",
					"comment": " Special value used to indicate no logging when set as the minimum log level\n"
				},
				{
					"kind": "enum member",
					"line": 154,
					"name": "verbose1",
					"comment": " Alias for diagnostic messages\n"
				},
				{
					"kind": "enum member",
					"line": 155,
					"name": "verbose2",
					"comment": " Alias for debug messages\n"
				},
				{
					"kind": "enum member",
					"line": 156,
					"name": "verbose3",
					"comment": " Alias for verbose debug messages\n"
				},
				{
					"kind": "enum member",
					"line": 157,
					"name": "verbose4",
					"comment": " Alias for trace messages\n"
				}
			],
			"baseDeco": "i",
			"name": "LogLevel",
			"comment": " Specifies the log level for a particular log message.\n"
		},
		{
			"kind": "struct",
			"line": 161,
			"members": [
				{
					"kind": "variable",
					"line": 162,
					"deco": "Aya",
					"name": "mod",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 163,
					"deco": "Aya",
					"name": "func",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 164,
					"deco": "Aya",
					"name": "file",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 165,
					"deco": "i",
					"name": "line",
					"offset": 24
				},
				{
					"kind": "variable",
					"line": 166,
					"deco": "E4vibe4core3log8LogLevel",
					"name": "level",
					"offset": 28
				},
				{
					"kind": "variable",
					"line": 167,
					"deco": "C4core6thread6Thread",
					"name": "thread",
					"originalType": "Thread",
					"offset": 32
				},
				{
					"kind": "variable",
					"line": 168,
					"deco": "Aya",
					"name": "threadName",
					"offset": 36
				},
				{
					"kind": "variable",
					"line": 169,
					"deco": "k",
					"name": "threadID",
					"offset": 44
				},
				{
					"kind": "variable",
					"line": 170,
					"deco": "C4core6thread5Fiber",
					"name": "fiber",
					"originalType": "Fiber",
					"offset": 48
				},
				{
					"kind": "variable",
					"line": 171,
					"deco": "k",
					"name": "fiberID",
					"offset": 52
				},
				{
					"kind": "variable",
					"line": 172,
					"deco": "S3std8datetime7SysTime",
					"name": "time",
					"offset": 56
				},
				{
					"kind": "variable",
					"line": 173,
					"deco": "Aya",
					"name": "text",
					"offset": 68
				},
				{
					"kind": "function",
					"line": 161,
					"deco": "FNcS4vibe4core3log7LogLineZS4vibe4core3log7LogLine",
					"parameters": [
						{
							"deco": "S4vibe4core3log7LogLine",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "LogLine",
			"comment": " Represents a single logged line\n"
		},
		{
			"kind": "class",
			"line": 177,
			"members": [
				{
					"kind": "function",
					"line": 178,
					"storageClass": [
						"abstract"
					],
					"deco": "FE4vibe4core3log8LogLevelZb",
					"parameters": [
						{
							"deco": "E4vibe4core3log8LogLevel",
							"name": "level"
						}
					],
					"name": "acceptsLevel"
				},
				{
					"kind": "function",
					"line": 179,
					"storageClass": [
						"abstract"
					],
					"deco": "FKS4vibe4core3log7LogLineZv",
					"parameters": [
						{
							"deco": "S4vibe4core3log7LogLine",
							"storageClass": [
								"ref"
							],
							"name": "message"
						}
					],
					"name": "log"
				}
			],
			"name": "Logger",
			"comment": " Abstract base class for all loggers\n"
		},
		{
			"kind": "class",
			"line": 186,
			"base": "Logger",
			"members": [
				{
					"kind": "enum",
					"line": 187,
					"members": [
						{
							"kind": "enum member",
							"line": 188,
							"name": "plain"
						},
						{
							"kind": "enum member",
							"line": 189,
							"name": "thread"
						},
						{
							"kind": "enum member",
							"line": 190,
							"name": "threadTime"
						}
					],
					"baseDeco": "i",
					"name": "Format"
				},
				{
					"kind": "variable",
					"line": 198,
					"init": "cast(Format)1",
					"deco": "E4vibe4core3log10FileLogger6Format",
					"name": "format",
					"offset": 32
				},
				{
					"kind": "variable",
					"line": 199,
					"init": "cast(LogLevel)0",
					"deco": "E4vibe4core3log8LogLevel",
					"name": "minLevel",
					"offset": 36
				},
				{
					"kind": "constructor",
					"line": 201,
					"deco": "FS3std5stdio4FileS3std5stdio4FileZC4vibe4core3log10FileLogger",
					"parameters": [
						{
							"deco": "S3std5stdio4File",
							"name": "info_file"
						},
						{
							"deco": "S3std5stdio4File",
							"name": "diag_file"
						}
					],
					"name": "this",
					"originalType": "(File info_file, File diag_file)",
					"endline": 205
				},
				{
					"kind": "constructor",
					"line": 207,
					"deco": "FAyaZC4vibe4core3log10FileLogger",
					"parameters": [
						{
							"deco": "Aya",
							"name": "filename"
						}
					],
					"name": "this",
					"originalType": "(string filename)",
					"endline": 211
				},
				{
					"kind": "function",
					"line": 213,
					"storageClass": [
						"override"
					],
					"deco": "FE4vibe4core3log8LogLevelZb",
					"parameters": [
						{
							"deco": "E4vibe4core3log8LogLevel",
							"name": "value"
						}
					],
					"name": "acceptsLevel",
					"endline": 213,
					"overrides": [
						"vibe.core.log.Logger.acceptsLevel"
					]
				},
				{
					"kind": "function",
					"line": 215,
					"storageClass": [
						"override"
					],
					"deco": "FKS4vibe4core3log7LogLineZv",
					"parameters": [
						{
							"deco": "S4vibe4core3log7LogLine",
							"storageClass": [
								"ref"
							],
							"name": "msg"
						}
					],
					"name": "log",
					"endline": 248,
					"overrides": [
						"vibe.core.log.Logger.log"
					]
				},
				{
					"kind": "destructor",
					"line": 186,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"name": "FileLogger",
			"comment": "\n\tPlain-text based logger for logging to regular files or stdout/stderr\n"
		},
		{
			"kind": "class",
			"line": 256,
			"base": "Logger",
			"members": [
				{
					"kind": "constructor",
					"line": 262,
					"deco": "FAyaZC4vibe4core3log10HTMLLogger",
					"parameters": [
						{
							"deco": "Aya",
							"default": "\"log.html\"",
							"name": "filename"
						}
					],
					"name": "this",
					"originalType": "(string filename = \"log.html\")",
					"endline": 266
				},
				{
					"kind": "destructor",
					"line": 268,
					"deco": "FZv",
					"name": "~this",
					"endline": 274
				},
				{
					"kind": "function",
					"line": 276,
					"storageClass": [
						"@property"
					],
					"deco": "FNdE4vibe4core3log8LogLevelZv",
					"parameters": [
						{
							"deco": "E4vibe4core3log8LogLevel",
							"name": "value"
						}
					],
					"name": "minLogLevel",
					"originalType": "void(LogLevel value)",
					"endline": 276
				},
				{
					"kind": "function",
					"line": 278,
					"storageClass": [
						"override"
					],
					"deco": "FE4vibe4core3log8LogLevelZb",
					"parameters": [
						{
							"deco": "E4vibe4core3log8LogLevel",
							"name": "value"
						}
					],
					"name": "acceptsLevel",
					"endline": 278,
					"overrides": [
						"vibe.core.log.Logger.acceptsLevel"
					]
				},
				{
					"kind": "function",
					"line": 280,
					"storageClass": [
						"override"
					],
					"deco": "FKS4vibe4core3log7LogLineZv",
					"parameters": [
						{
							"deco": "S4vibe4core3log7LogLine",
							"storageClass": [
								"ref"
							],
							"name": "msg"
						}
					],
					"name": "log",
					"endline": 307,
					"overrides": [
						"vibe.core.log.Logger.log"
					]
				},
				{
					"kind": "destructor",
					"line": 268,
					"deco": "FZv",
					"name": "~this"
				},
				{
					"kind": "destructor",
					"line": 268,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"name": "HTMLLogger",
			"comment": "\n\tLogger implementation for logging to an HTML file with dynamic filtering support.\n"
		},
		{
			"kind": "class",
			"line": 419,
			"base": "Logger",
			"members": [
				{
					"kind": "enum",
					"line": 429,
					"members": [
						{
							"kind": "enum member",
							"line": 430,
							"name": "kern",
							"comment": " kernel messages\n"
						},
						{
							"kind": "enum member",
							"line": 431,
							"name": "user",
							"comment": " user-level messages\n"
						},
						{
							"kind": "enum member",
							"line": 432,
							"name": "mail",
							"comment": " mail system\n"
						},
						{
							"kind": "enum member",
							"line": 433,
							"name": "daemon",
							"comment": " system daemons\n"
						},
						{
							"kind": "enum member",
							"line": 434,
							"name": "auth",
							"comment": " security/authorization messages\n"
						},
						{
							"kind": "enum member",
							"line": 435,
							"name": "syslog",
							"comment": " messages generated internally by syslogd\n"
						},
						{
							"kind": "enum member",
							"line": 436,
							"name": "lpr",
							"comment": " line printer subsystem\n"
						},
						{
							"kind": "enum member",
							"line": 437,
							"name": "news",
							"comment": " network news subsystem\n"
						},
						{
							"kind": "enum member",
							"line": 438,
							"name": "uucp",
							"comment": " UUCP subsystem\n"
						},
						{
							"kind": "enum member",
							"line": 439,
							"name": "clockDaemon",
							"comment": " clock daemon\n"
						},
						{
							"kind": "enum member",
							"line": 440,
							"name": "authpriv",
							"comment": " security/authorization messages\n"
						},
						{
							"kind": "enum member",
							"line": 441,
							"name": "ftp",
							"comment": " FTP daemon\n"
						},
						{
							"kind": "enum member",
							"line": 442,
							"name": "ntp",
							"comment": " NTP subsystem\n"
						},
						{
							"kind": "enum member",
							"line": 443,
							"name": "logAudit",
							"comment": " log audit\n"
						},
						{
							"kind": "enum member",
							"line": 444,
							"name": "logAlert",
							"comment": " log alert\n"
						},
						{
							"kind": "enum member",
							"line": 445,
							"name": "cron",
							"comment": " clock daemon\n"
						},
						{
							"kind": "enum member",
							"line": 446,
							"name": "local0",
							"comment": " local use 0\n"
						},
						{
							"kind": "enum member",
							"line": 447,
							"name": "local1",
							"comment": " local use 1\n"
						},
						{
							"kind": "enum member",
							"line": 448,
							"name": "local2",
							"comment": " local use 2\n"
						},
						{
							"kind": "enum member",
							"line": 449,
							"name": "local3",
							"comment": " local use 3\n"
						},
						{
							"kind": "enum member",
							"line": 450,
							"name": "local4",
							"comment": " local use 4\n"
						},
						{
							"kind": "enum member",
							"line": 451,
							"name": "local5",
							"comment": " local use 5\n"
						},
						{
							"kind": "enum member",
							"line": 452,
							"name": "local6",
							"comment": " local use 6\n"
						},
						{
							"kind": "enum member",
							"line": 453,
							"name": "local7",
							"comment": " local use 7\n"
						}
					],
					"baseDeco": "i",
					"name": "Facility",
					"comment": " Facilities\n"
				},
				{
					"kind": "enum",
					"line": 457,
					"members": [
						{
							"kind": "enum member",
							"line": 458,
							"name": "emergency",
							"comment": " system is unusable\n"
						},
						{
							"kind": "enum member",
							"line": 459,
							"name": "alert",
							"comment": " action must be taken immediately\n"
						},
						{
							"kind": "enum member",
							"line": 460,
							"name": "critical",
							"comment": " critical conditions\n"
						},
						{
							"kind": "enum member",
							"line": 461,
							"name": "error",
							"comment": " error conditions\n"
						},
						{
							"kind": "enum member",
							"line": 462,
							"name": "warning",
							"comment": " warning conditions\n"
						},
						{
							"kind": "enum member",
							"line": 463,
							"name": "notice",
							"comment": " normal but significant condition\n"
						},
						{
							"kind": "enum member",
							"line": 464,
							"name": "info",
							"comment": " informational messages\n"
						},
						{
							"kind": "enum member",
							"line": 465,
							"name": "debug_",
							"comment": " debug-level messages\n"
						}
					],
					"baseDeco": "i",
					"name": "Severity",
					"comment": " Severities\n"
				},
				{
					"kind": "constructor",
					"line": 488,
					"deco": "FC4vibe4core6stream12OutputStreamE4vibe4core3log12SyslogLogger8FacilityAyaAyaZC4vibe4core3log12SyslogLogger",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "stream"
						},
						{
							"deco": "E4vibe4core3log12SyslogLogger8Facility",
							"name": "facility"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "appName"
						},
						{
							"deco": "Aya",
							"default": "hostName()",
							"name": "hostName"
						}
					],
					"name": "this",
					"comment": "\n\t\tConstruct a SyslogLogger.\n\n\t\tThe log messages are sent to the given OutputStream stream using the given\n\t\tFacility facility.Optionally the appName and hostName can be set. The\n\t\tappName defaults to null. The hostName defaults to hostName().\n\n\t\tNote that the passed stream's write function must not use logging with\n\t\ta level for that this Logger's acceptsLevel returns true. Because this\n\t\tLogger uses the stream's write function when it logs and would hence\n\t\tlog forevermore.\n\t\n",
					"originalType": "(OutputStream stream, Facility facility, string appName = null, string hostName = hostName())",
					"endline": 494
				},
				{
					"kind": "function",
					"line": 499,
					"storageClass": [
						"override"
					],
					"deco": "FE4vibe4core3log8LogLevelZb",
					"parameters": [
						{
							"deco": "E4vibe4core3log8LogLevel",
							"name": "level"
						}
					],
					"name": "acceptsLevel",
					"comment": "\n\t\tReturns: true iff level >= debug_.\n\t\n",
					"endline": 502,
					"overrides": [
						"vibe.core.log.Logger.acceptsLevel"
					]
				},
				{
					"kind": "function",
					"line": 509,
					"storageClass": [
						"override"
					],
					"deco": "FKS4vibe4core3log7LogLineZv",
					"parameters": [
						{
							"deco": "S4vibe4core3log7LogLine",
							"storageClass": [
								"ref"
							],
							"name": "msg"
						}
					],
					"name": "log",
					"comment": "\n\t\tLogs the given LogLine msg.\n\n\t\tIt uses the msg's time, level, and text field.\n\t\n",
					"endline": 543,
					"overrides": [
						"vibe.core.log.Logger.log"
					]
				}
			],
			"name": "SyslogLogger",
			"comment": "\n\tA logger that logs in syslog format according to RFC 5424.\n\n\tMessages can be logged to files (via file streams) or over the network (via\n\tTCP or SSL streams).\n\n\tStandards: Conforms to RFC 5424.\n"
		}
	],
	"name": "vibe.core.log",
	"comment": "\n\tCentral logging facility for vibe.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/args.d",
	"members": [
		{
			"kind": "function",
			"line": 40,
			"storageClass": [
				"deprecated"
			],
			"deco": "FKAAyaZv",
			"parameters": [
				{
					"deco": "AAya",
					"storageClass": [
						"ref"
					],
					"name": "args"
				}
			],
			"name": "processCommandLineArgs",
			"comment": "\n\tDeprecated. Removes any recognized arguments from args leaving any unrecognized options.\n\n\tNote that vibe.d parses all options on start up and calling this function is not necessary.\n\tIt is recommended to use\n\tCurrently does nothing - Vibe will parse arguments\n\tautomatically on startup. Call $(D finalizeCommandLineArgs) from your\n\t$(D main()) if you use a custom one, to check for unrecognized options.\n",
			"endline": 43
		},
		{
			"kind": "template",
			"line": 59,
			"members": [
				{
					"kind": "function",
					"line": 59,
					"type": "bool(string names, T* pvalue, string help_text)",
					"parameters": [
						{
							"type": "string",
							"name": "names"
						},
						{
							"type": "T*",
							"name": "pvalue"
						},
						{
							"type": "string",
							"name": "help_text"
						}
					],
					"name": "getOption",
					"comment": "\n\tFinds and reads an option from the configuration file or command line.\n\n\tCommand line options take precedence over configuration file entries.\n\n\tParams:\n\t\tnames = Option names. Separate multiple name variants with \"|\",\n\t\t\t\tas for $(D std.getopt).\n\t\tpvalue = Pointer to store the value. Unchanged if value was not found.\n\n\tReturns:\n\t\t$(D true) if the value was found, $(D false) otherwise.\n",
					"endline": 82
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tFinds and reads an option from the configuration file or command line.\n\n\tCommand line options take precedence over configuration file entries.\n\n\tParams:\n\t\tnames = Option names. Separate multiple name variants with \"|\",\n\t\t\t\tas for $(D std.getopt).\n\t\tpvalue = Pointer to store the value. Unchanged if value was not found.\n\n\tReturns:\n\t\t$(D true) if the value was found, $(D false) otherwise.\n",
			"name": "getOption"
		},
		{
			"kind": "function",
			"line": 88,
			"deco": "FZv",
			"name": "printCommandLineHelp",
			"comment": "\n\tPrints a help screen consisting of all options encountered in getOption calls.\n",
			"endline": 122
		},
		{
			"kind": "function",
			"line": 141,
			"deco": "FPAAyaZb",
			"parameters": [
				{
					"deco": "PAAya",
					"default": "null",
					"name": "args_out"
				}
			],
			"name": "finalizeCommandLineOptions",
			"comment": "\n\tChecks for unrecognized command line options and display a help screen.\n\n\tThis function is called automatically from vibe.appmain to check for\n\tcorrect command line usage. It will print a help screen in case of\n\tunrecognized options.\n\n\tParams:\n\t\targs_out = Optional parameter for storing any arguments not handled\n\t\t           by any getOption call. If this is left to null, an error\n\t\t           will be triggered whenever unhandled arguments exist.\n\n\tReturns:\n\t\tIf \"--help\" was passed, the function returns false. In all other\n\t\tcases either true is returned or an exception is thrown.\n",
			"endline": 159
		}
	],
	"name": "vibe.core.args",
	"comment": "\n\tParses and allows querying the command line arguments and configuration\n\tfile.\n\n\tThe optional configuration file (vibe.conf) is a JSON file, containing an\n\tobject with the keys corresponding to option names, and values corresponding\n\tto their values. It is searched for in the local directory, user's home\n\tdirectory, or /etc/vibe/ (POSIX only), whichever is found first.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Vladimir Panteleev\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/driver.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.file"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.core.net"
		},
		{
			"kind": "import",
			"line": 12,
			"name": "vibe.core.sync"
		},
		{
			"kind": "import",
			"line": 13,
			"name": "vibe.core.stream"
		},
		{
			"kind": "import",
			"line": 14,
			"name": "vibe.core.task"
		},
		{
			"kind": "import",
			"line": 15,
			"name": "vibe.core._eventedobject"
		},
		{
			"kind": "function",
			"line": 26,
			"deco": "FZC4vibe4core6driver11EventDriver",
			"name": "getEventDriver",
			"comment": "\n\tReturns the active event driver\n",
			"endline": 29
		},
		{
			"kind": "interface",
			"line": 52,
			"members": [
				{
					"kind": "function",
					"line": 58,
					"storageClass": [
						"abstract"
					],
					"deco": "FZi",
					"name": "runEventLoop",
					"comment": " Starts the event loop.\n\n\t\tThe loop will continue to run until either no more event listeners are active or until\n\t\texitEventLoop() is called.\n\t\n"
				},
				{
					"kind": "function",
					"line": 62,
					"storageClass": [
						"abstract"
					],
					"deco": "FZi",
					"name": "runEventLoopOnce"
				},
				{
					"kind": "function",
					"line": 66,
					"storageClass": [
						"abstract"
					],
					"deco": "FZb",
					"name": "processEvents",
					"comment": " Processes all outstanding events if any, does not block.\n\t\n"
				},
				{
					"kind": "function",
					"line": 70,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "exitEventLoop",
					"comment": " Exits any running event loop.\n\t\n"
				},
				{
					"kind": "function",
					"line": 74,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4vibe4inet4path4PathE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
					"parameters": [
						{
							"deco": "S4vibe4inet4path4Path",
							"name": "path"
						},
						{
							"deco": "E4vibe4core4file8FileMode",
							"name": "mode"
						}
					],
					"name": "openFile",
					"comment": " Opens a file on disk with the speficied file mode.\n\t\n"
				},
				{
					"kind": "function",
					"line": 78,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4vibe4inet4path4PathbZC4vibe4core4file16DirectoryWatcher",
					"parameters": [
						{
							"deco": "S4vibe4inet4path4Path",
							"name": "path"
						},
						{
							"deco": "b",
							"name": "recursive"
						}
					],
					"name": "watchDirectory",
					"comment": " Starts watching a directory for changes.\n\t\n"
				},
				{
					"kind": "function",
					"line": 82,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyatbZS4vibe4core3net14NetworkAddress",
					"parameters": [
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "family"
						},
						{
							"deco": "b",
							"name": "no_dns"
						}
					],
					"name": "resolveHost",
					"comment": " Resolves the given host name or IP address string.\n\t\n"
				},
				{
					"kind": "function",
					"line": 88,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyatZC4vibe4core3net13TCPConnection",
					"parameters": [
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "port"
						}
					],
					"name": "connectTCP",
					"comment": " Establiches a tcp connection on the specified host/port.\n\n\t\t'host' can be a DNS name or an IPv4 or IPv6 address string.\n\t\n"
				},
				{
					"kind": "alias",
					"line": 91,
					"storageClass": [
						"deprecated"
					],
					"name": "connectTcp",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 99,
					"storageClass": [
						"abstract"
					],
					"deco": "FtDFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
					"parameters": [
						{
							"deco": "t",
							"name": "port"
						},
						{
							"deco": "DFC4vibe4core3net13TCPConnectionZv",
							"name": "conn_callback"
						},
						{
							"deco": "Aya",
							"name": "bind_address"
						},
						{
							"deco": "E4vibe4core3net16TCPListenOptions",
							"name": "options"
						}
					],
					"name": "listenTCP",
					"comment": " Listens on the specified port and interface for TCP connections.\n\n\t\t'bind_address' must be an IPv4 or IPv6 address string corresponding to a local network\n\t\tinterface. conn_callback is called for every incoming connection, each time from a\n\t\tnew task.\n\t\n",
					"originalType": "TCPListener(ushort port, void delegate(TCPConnection conn) conn_callback, string bind_address, TCPListenOptions options)"
				},
				{
					"kind": "alias",
					"line": 102,
					"storageClass": [
						"deprecated"
					],
					"name": "listenTcp",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 109,
					"storageClass": [
						"abstract"
					],
					"deco": "FtAyaZC4vibe4core3net13UDPConnection",
					"parameters": [
						{
							"deco": "t",
							"name": "port"
						},
						{
							"deco": "Aya",
							"default": "\"0.0.0.0\"",
							"name": "bind_address"
						}
					],
					"name": "listenUDP",
					"comment": " Creates a new UDP socket and sets the specified address/port as the destination for packets.\n\n\t\tIf a bind port is specified, the socket will be able to receive UDP packets on that port.\n\t\tOtherwise, a random bind port is chosen.\n\t\n"
				},
				{
					"kind": "alias",
					"line": 112,
					"storageClass": [
						"deprecated"
					],
					"name": "listenUdp",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 116,
					"storageClass": [
						"abstract"
					],
					"deco": "FZC4vibe4core4sync11ManualEvent",
					"name": "createManualEvent",
					"comment": " Creates a new manually triggered event.\n\t\n"
				},
				{
					"kind": "alias",
					"line": 119,
					"storageClass": [
						"deprecated"
					],
					"name": "createSignal",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 125,
					"storageClass": [
						"abstract"
					],
					"deco": "FDFZvZC4vibe4core6driver5Timer",
					"parameters": [
						{
							"deco": "DFZv",
							"name": "callback"
						}
					],
					"name": "createTimer",
					"comment": " Creates a new timer.\n\n\t\tThe timer can be started by calling rearm() with a timeout.\n\t\n"
				}
			],
			"name": "EventDriver",
			"comment": "\n\tInterface for all evented I/O implementations\n"
		},
		{
			"kind": "interface",
			"line": 132,
			"members": [
				{
					"kind": "function",
					"line": 133,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "yieldForEvent"
				},
				{
					"kind": "function",
					"line": 134,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4vibe4core4task4TaskC9ExceptionZv",
					"parameters": [
						{
							"deco": "S4vibe4core4task4Task",
							"name": "f"
						},
						{
							"deco": "C9Exception",
							"default": "null",
							"name": "event_exception"
						}
					],
					"name": "resumeTask"
				},
				{
					"kind": "function",
					"line": 135,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "notifyIdle"
				}
			],
			"name": "DriverCore",
			"comment": "\n\tProvides an event driver with core functions for task/fiber control.\n"
		},
		{
			"kind": "interface",
			"line": 142,
			"members": [
				{
					"kind": "function",
					"line": 144,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdZb",
					"name": "pending",
					"comment": " True if the timer is yet to fire.\n",
					"originalType": "bool()"
				},
				{
					"kind": "function",
					"line": 148,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4core4time8DurationbZv",
					"parameters": [
						{
							"deco": "S4core4time8Duration",
							"name": "dur"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "periodic"
						}
					],
					"name": "rearm",
					"comment": " Resets the timer to the specified timeout\n\t\n"
				},
				{
					"kind": "function",
					"line": 152,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "stop",
					"comment": " Resets the timer and avoids any firing.\n\t\n"
				},
				{
					"kind": "function",
					"line": 156,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "wait",
					"comment": " Waits until the timer fires.\n\t\n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "Timer",
			"comment": "\n\tRepresents a timer.\n"
		},
		{
			"kind": "template",
			"line": 160,
			"members": [
				{
					"kind": "variable",
					"line": 162,
					"type": "Task",
					"name": "m_owner"
				},
				{
					"kind": "function",
					"line": 165,
					"type": "void()",
					"name": "release",
					"endline": 169
				},
				{
					"kind": "function",
					"line": 171,
					"type": "void()",
					"name": "acquire",
					"endline": 175
				},
				{
					"kind": "function",
					"line": 177,
					"type": "bool()",
					"name": "amOwner",
					"endline": 180
				}
			],
			"parameters": [],
			"name": "SingleOwnerEventedObject"
		},
		{
			"kind": "template",
			"line": 183,
			"members": [
				{
					"kind": "variable",
					"line": 185,
					"type": "Task[]",
					"name": "m_owners"
				},
				{
					"kind": "function",
					"line": 188,
					"type": "void()",
					"name": "release",
					"endline": 194
				},
				{
					"kind": "function",
					"line": 196,
					"type": "void()",
					"name": "acquire",
					"endline": 201
				},
				{
					"kind": "function",
					"line": 203,
					"type": "bool()",
					"name": "amOwner",
					"endline": 206
				}
			],
			"parameters": [],
			"name": "MultiOwnerEventedObject"
		}
	],
	"name": "vibe.core.driver",
	"comment": "\n\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/file.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core._eventedobject"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.core.stream"
		},
		{
			"kind": "import",
			"line": 12,
			"name": "vibe.inet.url"
		},
		{
			"kind": "function",
			"line": 34,
			"deco": "FS4vibe4inet4path4PathE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				},
				{
					"deco": "E4vibe4core4file8FileMode",
					"default": "cast(FileMode)0",
					"name": "mode"
				}
			],
			"name": "openFile",
			"comment": "\n\tOpens a file stream with the specified mode.\n",
			"originalType": "FileStream(Path path, FileMode mode = FileMode.read)",
			"endline": 37
		},
		{
			"kind": "function",
			"line": 39,
			"deco": "FAyaE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				},
				{
					"deco": "E4vibe4core4file8FileMode",
					"default": "cast(FileMode)0",
					"name": "mode"
				}
			],
			"name": "openFile",
			"comment": " ditto\n",
			"originalType": "FileStream(string path, FileMode mode = FileMode.read)",
			"endline": 42
		},
		{
			"kind": "function",
			"line": 47,
			"deco": "FAyaZC4vibe4core4file10FileStream",
			"parameters": [
				{
					"deco": "Aya",
					"default": "null",
					"name": "suffix"
				}
			],
			"name": "createTempFile",
			"comment": "\n\tCreates and opens a temporary file for writing.\n",
			"endline": 67
		},
		{
			"kind": "function",
			"line": 72,
			"deco": "FS4vibe4inet4path4PathS4vibe4inet4path4PathZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "from"
				},
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "to"
				}
			],
			"name": "moveFile",
			"comment": "\n\tMoves or renames a file.\n",
			"endline": 75
		},
		{
			"kind": "function",
			"line": 77,
			"deco": "FAyaAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "from"
				},
				{
					"deco": "Aya",
					"name": "to"
				}
			],
			"name": "moveFile",
			"comment": " ditto\n",
			"endline": 80
		},
		{
			"kind": "function",
			"line": 97,
			"deco": "FS4vibe4inet4path4PathS4vibe4inet4path4PathbZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "from"
				},
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "to"
				},
				{
					"deco": "b",
					"default": "false",
					"name": "overwrite"
				}
			],
			"name": "copyFile",
			"comment": "\n\tCopies a file.\n\n\tNote that attributes and time stamps are currently not retained.\n\n\tParams:\n\t\tfrom = Path of the source file\n\t\tto = Path for the destination file\n\t\toverwrite = If true, any file existing at the destination path will be\n\t\t\toverwritten. If this is false, an excpetion will be thrown should\n\t\t\ta file already exist at the destination path.\n\n\tThrows:\n\t\tAn Exception if the copy operation fails for some reason.\n",
			"endline": 109
		},
		{
			"kind": "function",
			"line": 111,
			"deco": "FAyaAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "from"
				},
				{
					"deco": "Aya",
					"name": "to"
				}
			],
			"name": "copyFile",
			"comment": " ditto\n",
			"endline": 114
		},
		{
			"kind": "function",
			"line": 119,
			"deco": "FS4vibe4inet4path4PathZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				}
			],
			"name": "removeFile",
			"comment": "\n\tRemoves a file\n",
			"endline": 122
		},
		{
			"kind": "function",
			"line": 124,
			"deco": "FAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "removeFile",
			"comment": " ditto\n",
			"endline": 126
		},
		{
			"kind": "function",
			"line": 131,
			"deco": "FS4vibe4inet4path4PathZb",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				}
			],
			"name": "existsFile",
			"comment": "\n\tChecks if a file exists\n",
			"endline": 133
		},
		{
			"kind": "function",
			"line": 135,
			"deco": "FAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "existsFile",
			"comment": " ditto\n",
			"endline": 138
		},
		{
			"kind": "function",
			"line": 144,
			"deco": "FS4vibe4inet4path4PathZS4vibe4core4file8FileInfo",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				}
			],
			"name": "getFileInfo",
			"comment": " Stores information about the specified file/directory into 'info'\n\n\tReturns false if the file does not exist.\n",
			"endline": 150
		},
		{
			"kind": "function",
			"line": 152,
			"deco": "FAyaZS4vibe4core4file8FileInfo",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "getFileInfo",
			"comment": " ditto\n",
			"endline": 155
		},
		{
			"kind": "function",
			"line": 160,
			"deco": "FS4vibe4inet4path4PathZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				}
			],
			"name": "createDirectory",
			"comment": "\n\tCreates a new directory.\n",
			"endline": 163
		},
		{
			"kind": "function",
			"line": 165,
			"deco": "FAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "createDirectory",
			"comment": " ditto\n",
			"endline": 168
		},
		{
			"kind": "function",
			"line": 173,
			"deco": "FS4vibe4inet4path4PathMDFS4vibe4core4file8FileInfoZbZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				},
				{
					"deco": "DFS4vibe4core4file8FileInfoZb",
					"storageClass": [
						"scope"
					],
					"name": "del"
				}
			],
			"name": "listDirectory",
			"comment": "\n\tEnumerates all files in the specified directory.\n",
			"endline": 178
		},
		{
			"kind": "function",
			"line": 180,
			"deco": "FAyaMDFS4vibe4core4file8FileInfoZbZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				},
				{
					"deco": "DFS4vibe4core4file8FileInfoZb",
					"storageClass": [
						"scope"
					],
					"name": "del"
				}
			],
			"name": "listDirectory",
			"comment": " ditto\n",
			"endline": 183
		},
		{
			"kind": "function",
			"line": 185,
			"deco": "FS4vibe4inet4path4PathZDFMDFKS4vibe4core4file8FileInfoZiZi",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				}
			],
			"name": "iterateDirectory",
			"comment": " ditto\n",
			"endline": 196
		},
		{
			"kind": "function",
			"line": 198,
			"deco": "FAyaZDFMDFKS4vibe4core4file8FileInfoZiZi",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "iterateDirectory",
			"comment": " ditto\n",
			"endline": 201
		},
		{
			"kind": "function",
			"line": 206,
			"deco": "FS4vibe4inet4path4PathbZC4vibe4core4file16DirectoryWatcher",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "path"
				},
				{
					"deco": "b",
					"default": "true",
					"name": "recursive"
				}
			],
			"name": "watchDirectory",
			"comment": "\n\tStarts watching a directory for changes.\n",
			"endline": 209
		},
		{
			"kind": "function",
			"line": 211,
			"deco": "FAyabZC4vibe4core4file16DirectoryWatcher",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				},
				{
					"deco": "b",
					"default": "true",
					"name": "recursive"
				}
			],
			"name": "watchDirectory",
			"endline": 214
		},
		{
			"kind": "function",
			"line": 219,
			"deco": "FZS4vibe4inet4path4Path",
			"name": "getWorkingDirectory",
			"comment": "\n\tReturns the current working directory.\n",
			"endline": 222
		},
		{
			"kind": "struct",
			"line": 227,
			"members": [
				{
					"kind": "variable",
					"line": 229,
					"deco": "Aya",
					"name": "name",
					"comment": " Name of the file (not including the path)\n",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 232,
					"deco": "m",
					"name": "size",
					"comment": " Size of the file (zero for directories)\n",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 235,
					"deco": "S3std8datetime7SysTime",
					"name": "timeModified",
					"comment": " Time of the last modification\n",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 238,
					"deco": "S3std8datetime7SysTime",
					"name": "timeCreated",
					"comment": " Time of creation (not available on all operating systems/file systems)\n",
					"offset": 28
				},
				{
					"kind": "variable",
					"line": 241,
					"deco": "b",
					"name": "isSymlink",
					"comment": " True if this is a symlink to an actual file\n",
					"offset": 40
				},
				{
					"kind": "variable",
					"line": 244,
					"deco": "b",
					"name": "isDirectory",
					"comment": " True if this is a directory or a symlink pointing to a directory\n",
					"offset": 41
				},
				{
					"kind": "function",
					"line": 227,
					"deco": "FNcS4vibe4core4file8FileInfoZS4vibe4core4file8FileInfo",
					"parameters": [
						{
							"deco": "S4vibe4core4file8FileInfo",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "FileInfo",
			"comment": " Contains general information about a file.\n"
		},
		{
			"kind": "enum",
			"line": 250,
			"members": [
				{
					"kind": "enum member",
					"line": 252,
					"name": "read",
					"comment": " The file is opened read-only.\n"
				},
				{
					"kind": "enum member",
					"line": 254,
					"name": "readWrite",
					"comment": " The file is opened for read-write random access.\n"
				},
				{
					"kind": "enum member",
					"line": 256,
					"name": "createTrunc",
					"comment": " The file is truncated if it exists and created otherwise and the opened for read-write access.\n"
				},
				{
					"kind": "enum member",
					"line": 258,
					"name": "append",
					"comment": " The file is opened for appending data to it and created if it does not exist.\n"
				}
			],
			"baseDeco": "i",
			"name": "FileMode",
			"comment": "\n\tSpecifies how a file is manipulated on disk.\n"
		},
		{
			"kind": "interface",
			"line": 264,
			"members": [
				{
					"kind": "function",
					"line": 266,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNbNdZS4vibe4inet4path4Path",
					"name": "path",
					"comment": " The path of the file.\n",
					"originalType": "const nothrow Path()"
				},
				{
					"kind": "function",
					"line": 269,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "close",
					"comment": " Closes the file handle.\n"
				}
			],
			"interfaces": [
				"RandomAccessStream",
				"EventedObject"
			],
			"name": "FileStream",
			"comment": "\n\tAccesses the contents of a file as a stream.\n"
		},
		{
			"kind": "interface",
			"line": 279,
			"members": [
				{
					"kind": "function",
					"line": 281,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZS4vibe4inet4path4Path",
					"name": "path",
					"comment": " The path of the watched directory\n",
					"originalType": "const Path()"
				},
				{
					"kind": "function",
					"line": 284,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZb",
					"name": "recursive",
					"comment": " Indicates if the directory is watched recursively\n",
					"originalType": "const bool()"
				},
				{
					"kind": "function",
					"line": 299,
					"storageClass": [
						"abstract"
					],
					"deco": "FKAS4vibe4core4file15DirectoryChangeS4core4time8DurationZb",
					"parameters": [
						{
							"deco": "AS4vibe4core4file15DirectoryChange",
							"storageClass": [
								"ref"
							],
							"name": "dst"
						},
						{
							"deco": "S4core4time8Duration",
							"default": "dur(-1L)",
							"name": "timeout"
						}
					],
					"name": "readChanges",
					"comment": " Fills the destination array with all changes that occured since the last call.\n\n\t\tThe function will blok until either directory changes have occured or until the\n\t\ttiout has elapsed. Specifying a negative duration will cause the function to\n\t\twait without a timeout.\n\n\t\tParams:\n\t\t\tdst = The destination array to which the changes will be appended\n\t\t\ttimeout = Optional timeout for the read operation\n\n\t\tReturns:\n\t\t\tIf the call completed successfully, true is returned.\n\t\n",
					"originalType": "bool(ref DirectoryChange[] dst, Duration timeout = dur!(\"seconds\")(-1))"
				}
			],
			"name": "DirectoryWatcher",
			"comment": "\n\tInterface for directory watcher implementations.\n\n\tDirectory watchers monitor the contents of a directory (wither recursively or non-recursively)\n\tfor changes, such as file additions, deletions or modifications.\n"
		},
		{
			"kind": "enum",
			"line": 305,
			"members": [
				{
					"kind": "enum member",
					"line": 307,
					"name": "added",
					"comment": " A file or directory was added\n"
				},
				{
					"kind": "enum member",
					"line": 309,
					"name": "removed",
					"comment": " A file or directory was deleted\n"
				},
				{
					"kind": "enum member",
					"line": 311,
					"name": "modified",
					"comment": " A file or directory was modified\n"
				}
			],
			"baseDeco": "i",
			"name": "DirectoryChangeType",
			"comment": " Specifies the kind of change in a watched directory.\n"
		},
		{
			"kind": "struct",
			"line": 317,
			"members": [
				{
					"kind": "variable",
					"line": 319,
					"deco": "E4vibe4core4file19DirectoryChangeType",
					"name": "type",
					"comment": " The type of change\n",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 322,
					"deco": "S4vibe4inet4path4Path",
					"name": "path",
					"comment": " Path of the file/directory that was changed\n",
					"offset": 4
				}
			],
			"name": "DirectoryChange",
			"comment": " Describes a single change in a watched directory.\n"
		}
	],
	"name": "vibe.core.file",
	"comment": "\n\tFile handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/concurrency.d",
	"members": [
		{
			"kind": "template",
			"line": 92,
			"members": [
				{
					"kind": "function",
					"line": 92,
					"type": "pure nothrow ScopedLock!(T)(shared(T) object)",
					"parameters": [
						{
							"type": "shared(T)",
							"name": "object"
						}
					],
					"name": "lock",
					"comment": "\n\tLocks the given shared object and returns a ScopedLock for accessing any unshared members.\n\n\tUsing this function will ensure that there are no data races. For this reason, the class\n\ttype T is required to contain no unshared or unisolated aliasing.\n\n\tExamples:\n\n\t---\n\timport vibe.core.concurrency;\n\n\tclass Item {\n\t\tprivate double m_value;\n\n\t\tthis(double value) { m_value = value; }\n\n\t\t@property double value() const { return m_value; }\n\t}\n\n\tclass Manager {\n\t\tprivate {\n\t\t\tstring m_name;\n\t\t\tIsolated!(Item) m_ownedItem;\n\t\t\tIsolated!(shared(Item)[]) m_items;\n\t\t}\n\n\t\tthis(string name)\n\t\t{\n\t\t\tm_name = name;\n\t\t\tauto itm = makeIsolated!Item(3.5);\n\t\t\tm_ownedItem = itm;\n\t\t}\n\n\t\tvoid addItem(shared(Item) item) { m_items ~= item; }\n\n\t\tdouble getTotalValue()\n\t\tconst {\n\t\t\tdouble sum = 0;\n\n\t\t\t// lock() is required to access shared objects\n\t\t\tforeach( itm; m_items ) sum += itm.lock().value;\n\n\t\t\t// owned objects can be accessed without locking\n\t\t\tsum += m_ownedItem.value;\n\n\t\t\treturn sum;\n\t\t}\n\t}\n\n\tvoid main()\n\t{\n\t\timport std.stdio;\n\n\t\tauto man = new shared(Manager)(\"My manager\");\n\t\t{\n\t\t\tauto l = man.lock();\n\t\t\tl.addItem(new shared(Item)(1.5));\n\t\t\tl.addItem(new shared(Item)(0.5));\n\t\t}\n\n\t\twritefln(\"Total value: %s\", man.lock().getTotalValue());\n\t}\n\t---\n\n\tSee_Also: core.concurrency.isWeaklyIsolated\n",
					"endline": 95
				}
			],
			"parameters": [
				{
					"kind": "type",
					"deco": "C6Object",
					"name": "T"
				}
			],
			"comment": "\n\tLocks the given shared object and returns a ScopedLock for accessing any unshared members.\n\n\tUsing this function will ensure that there are no data races. For this reason, the class\n\ttype T is required to contain no unshared or unisolated aliasing.\n\n\tExamples:\n\n\t---\n\timport vibe.core.concurrency;\n\n\tclass Item {\n\t\tprivate double m_value;\n\n\t\tthis(double value) { m_value = value; }\n\n\t\t@property double value() const { return m_value; }\n\t}\n\n\tclass Manager {\n\t\tprivate {\n\t\t\tstring m_name;\n\t\t\tIsolated!(Item) m_ownedItem;\n\t\t\tIsolated!(shared(Item)[]) m_items;\n\t\t}\n\n\t\tthis(string name)\n\t\t{\n\t\t\tm_name = name;\n\t\t\tauto itm = makeIsolated!Item(3.5);\n\t\t\tm_ownedItem = itm;\n\t\t}\n\n\t\tvoid addItem(shared(Item) item) { m_items ~= item; }\n\n\t\tdouble getTotalValue()\n\t\tconst {\n\t\t\tdouble sum = 0;\n\n\t\t\t// lock() is required to access shared objects\n\t\t\tforeach( itm; m_items ) sum += itm.lock().value;\n\n\t\t\t// owned objects can be accessed without locking\n\t\t\tsum += m_ownedItem.value;\n\n\t\t\treturn sum;\n\t\t}\n\t}\n\n\tvoid main()\n\t{\n\t\timport std.stdio;\n\n\t\tauto man = new shared(Manager)(\"My manager\");\n\t\t{\n\t\t\tauto l = man.lock();\n\t\t\tl.addItem(new shared(Item)(1.5));\n\t\t\tl.addItem(new shared(Item)(0.5));\n\t\t}\n\n\t\twritefln(\"Total value: %s\", man.lock().getTotalValue());\n\t}\n\t---\n\n\tSee_Also: core.concurrency.isWeaklyIsolated\n",
			"name": "lock"
		},
		{
			"kind": "template",
			"line": 97,
			"members": [
				{
					"kind": "function",
					"line": 97,
					"type": "nothrow void(shared(T) object, scope void delegate(scope T) accessor)",
					"parameters": [
						{
							"type": "shared(T)",
							"name": "object"
						},
						{
							"storageClass": [
								"scope"
							],
							"type": "void delegate(scope T)",
							"name": "accessor"
						}
					],
					"name": "lock",
					"comment": " ditto\n",
					"endline": 101
				}
			],
			"parameters": [
				{
					"kind": "type",
					"deco": "C6Object",
					"name": "T"
				}
			],
			"comment": " ditto\n",
			"name": "lock"
		},
		{
			"kind": "template",
			"line": 114,
			"members": [
				{
					"kind": "struct",
					"line": 114,
					"members": [
						{
							"kind": "variable",
							"line": 118,
							"type": "Rebindable!(T)",
							"name": "m_ref"
						},
						{
							"kind": "constructor",
							"line": 122,
							"type": "pure nothrow (shared(T) obj)",
							"parameters": [
								{
									"type": "shared(T)",
									"name": "obj"
								}
							],
							"name": "this",
							"endline": 128
						},
						{
							"kind": "destructor",
							"line": 130,
							"name": "~this",
							"endline": 135
						},
						{
							"kind": "function",
							"line": 143,
							"type": "inout nothrow inout(T)()",
							"name": "unsafeGet",
							"comment": "\n\t\tReturns an unshared reference to the locked object.\n\n\t\tNote that using this function breaks type safety. Be sure to not escape the reference beyond\n\t\tthe life time of the lock.\n\t\n",
							"endline": 143
						},
						{
							"kind": "function",
							"line": 145,
							"type": "inout nothrow inout(T)()",
							"name": "opDot",
							"endline": 145
						},
						{
							"kind": "function",
							"line": 152,
							"type": "pure nothrow Object()",
							"name": "getObject",
							"endline": 156
						}
					],
					"name": "ScopedLock"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tProxy structure that keeps the monitor of the given object locked until it\n\tgoes out of scope.\n\n\tAny unshared members of the object are safely accessible during this time. The usual\n\tway to use it is by calling lock.\n\n\tSee_Also: lock\n",
			"name": "ScopedLock"
		},
		{
			"kind": "template",
			"line": 203,
			"members": [
				{
					"kind": "function",
					"line": 203,
					"type": "Isolated!(T)(ARGS args)",
					"parameters": [
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "makeIsolated",
					"endline": 206
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": "\n\tCreates a new isolated object.\n\n\tIsolated objects contain no mutable aliasing outside of their own reference tree. They can thus\n\tbe safely converted to immutable and they can be safely passed between threads.\n\n\tThe function returns an instance of Isolated that will allow proxied access to the members of\n\tthe object, as well as providing means to convert the object to immutable or to an ordinary\n\tmutable object.\n\n\tExamples:\n\n\t---\n\timport vibe.core.concurrency;\n\n\tclass Item {\n\t\tdouble value;\n\t\tstring name;\n\t}\n\n\tvoid modifyItem(Isolated!Item itm)\n\t{\n\t\titm.value = 1.3;\n\t\t// TODO: send back to initiating thread\n\t}\n\n\tvoid main()\n\t{\n\t\timmutable(Item)[] items;\n\n\t\t// create immutable item procedurally\n\t\tauto itm = makeIsolated!Item();\n\t\titm.value = 2.4;\n\t\titm.name = \"Test\";\n\t\titems ~= itm.freeze();\n\n\t\t// send isolated item to other thread\n\t\tauto itm2 = makeIsolated!Item();\n\t\tspawn(&modifyItem, itm2.move());\n\t\t// ...\n\t}\n\t---\n",
			"name": "makeIsolated"
		},
		{
			"kind": "template",
			"line": 260,
			"members": [
				{
					"kind": "function",
					"line": 260,
					"type": "Isolated!(T[])(size_t size)",
					"parameters": [
						{
							"type": "size_t",
							"name": "size"
						}
					],
					"name": "makeIsolatedArray",
					"endline": 265
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tCreates a new isolated array.\n\n\tExamples:\n\n\t---\n\timport vibe.core.concurrency;\n\n\tvoid compute(Tid tid, Isolated!(double[]) array, size_t start_index)\n\t{\n\t\tforeach( i; 0 .. array.length )\n\t\t\tarray[i] = (start_index + i) * 0.5;\n\n\t\tsend(tid, array.move());\n\t}\n\n\tvoid main()\n\t{\n\t\timport std.stdio;\n\n\t\t// compute contents of an array using multiple threads\n\t\tauto arr = makeIsolatedArray!double(256);\n\n\t\t// partition the array (no copying takes place)\n\t\tsize_t[] indices = [64, 128, 192, 256];\n\t\tIsolated!(double[])[] subarrays = arr.splice(indices);\n\n\t\t// start processing in threads\n\t\tTid[] tids;\n\t\tforeach( i, idx; indices )\n\t\t\ttids ~= spawn(&compute, thisTid, subarrays[i].move(), idx);\n\n\t\t// collect results\n\t\tauto resultarrays = new Isolated!(double[])[tids.length];\n\t\tforeach( i, tid; tids )\n\t\t\tresultarrays[i] = receiveOnly!(Isolated!(double[])).move();\n\n\t\t// BUG: the arrays must be sorted here, but since there is no way to tell\n\t\t// from where something was received, this is difficult here.\n\n\t\t// merge results (no copying takes place again)\n\t\tforeach( i; 1 .. resultarrays.length )\n\t\t\tresultarrays[0].merge(resultarrays[i]);\n\n\t\t// convert the final result to immutable\n\t\tauto result = resultarrays[0].freeze();\n\n\t\twritefln(\"Result: %s\", result);\n\t}\n\t---\n",
			"name": "makeIsolatedArray"
		},
		{
			"kind": "template",
			"line": 271,
			"members": [
				{
					"kind": "function",
					"line": 271,
					"type": "Isolated!(T)(T object)",
					"parameters": [
						{
							"type": "T",
							"name": "object"
						}
					],
					"name": "assumeIsolated",
					"comment": "\n\tUnsafe facility to assume that an existing reference is unique.\n",
					"endline": 274
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tUnsafe facility to assume that an existing reference is unique.\n",
			"name": "assumeIsolated"
		},
		{
			"kind": "template",
			"line": 281,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tEncapsulates the given type in a way that guarantees memory isolation.\n\n\tSee_Also: makeIsolated, makeIsolatedArray\n",
			"name": "Isolated"
		},
		{
			"kind": "template",
			"line": 559,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " Encapsulates a reference in a way that disallows escaping it or any contained references.\n",
			"name": "ScopedRef"
		},
		{
			"kind": "template",
			"line": 892,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "tuple",
					"name": "TYPES"
				}
			],
			"name": "haveTypeAlready"
		},
		{
			"kind": "template",
			"line": 899,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "value",
					"deco": "Aya",
					"name": "member"
				}
			],
			"name": "isMemberPublic"
		},
		{
			"kind": "template",
			"line": 925,
			"members": [],
			"parameters": [
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": "\n\n\n\tDetermines if the given list of types has any non-immutable aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable data, or references\n\tencapsulated in stdx.typecons.Isolated.\n",
			"name": "isStronglyIsolated"
		},
		{
			"kind": "template",
			"line": 969,
			"members": [],
			"parameters": [
				{
					"kind": "tuple",
					"name": "T"
				}
			],
			"comment": "\n\tDetermines if the given list of types has any non-immutable and unshared aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable or shared data, or references\n\tencapsulated in stdx.typecons.Isolated. Values that do not have unshared and unisolated aliasing are safe to be passed\n\tbetween threads.\n",
			"name": "isWeaklyIsolated"
		},
		{
			"kind": "template",
			"line": 1043,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"name": "isCopyable"
		},
		{
			"kind": "alias",
			"line": 1056,
			"deco": "S4vibe4core4task4Task",
			"name": "Tid",
			"comment": "\n\n\n\n"
		},
		{
			"kind": "template",
			"line": 1058,
			"members": [
				{
					"kind": "function",
					"line": 1058,
					"type": "void(Tid tid, ARGS args)",
					"parameters": [
						{
							"type": "Tid",
							"name": "tid"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "send",
					"endline": 1066
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"name": "send"
		},
		{
			"kind": "template",
			"line": 1068,
			"members": [
				{
					"kind": "function",
					"line": 1068,
					"type": "void(Tid tid, ARGS args)",
					"parameters": [
						{
							"type": "Tid",
							"name": "tid"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "prioritySend",
					"endline": 1076
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"name": "prioritySend"
		},
		{
			"kind": "template",
			"line": 1080,
			"members": [
				{
					"kind": "function",
					"line": 1080,
					"type": "void(OPS ops)",
					"parameters": [
						{
							"type": "OPS",
							"name": "ops"
						}
					],
					"name": "receive",
					"endline": 1084
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "OPS"
				}
			],
			"name": "receive"
		},
		{
			"kind": "template",
			"line": 1086,
			"members": [
				{
					"kind": "function",
					"line": 1086,
					"storageClass": [
						"auto"
					],
					"type": "()",
					"name": "receiveOnly",
					"endline": 1099
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"name": "receiveOnly"
		},
		{
			"kind": "template",
			"line": 1101,
			"members": [
				{
					"kind": "function",
					"line": 1101,
					"type": "bool(Duration timeout, OPS ops)",
					"parameters": [
						{
							"type": "Duration",
							"name": "timeout"
						},
						{
							"type": "OPS",
							"name": "ops"
						}
					],
					"name": "receiveTimeout",
					"endline": 1105
				}
			],
			"parameters": [
				{
					"kind": "tuple",
					"name": "OPS"
				}
			],
			"name": "receiveTimeout"
		},
		{
			"kind": "function",
			"line": 1107,
			"deco": "FS4vibe4core4task4TaskkE3std11concurrency10OnCrowdingZv",
			"parameters": [
				{
					"deco": "S4vibe4core4task4Task",
					"name": "tid"
				},
				{
					"deco": "k",
					"name": "messages"
				},
				{
					"deco": "E3std11concurrency10OnCrowding",
					"name": "on_crowding"
				}
			],
			"name": "setMaxMailboxSize",
			"originalType": "void(Tid tid, size_t messages, OnCrowding on_crowding)",
			"endline": 1114
		},
		{
			"kind": "function",
			"line": 1116,
			"deco": "FS4vibe4core4task4TaskkPFS4vibe4core4task4TaskZbZv",
			"parameters": [
				{
					"deco": "S4vibe4core4task4Task",
					"name": "tid"
				},
				{
					"deco": "k",
					"name": "messages"
				},
				{
					"deco": "PFS4vibe4core4task4TaskZb",
					"name": "on_crowding"
				}
			],
			"name": "setMaxMailboxSize",
			"originalType": "void(Tid tid, size_t messages, bool function(Tid) on_crowding)",
			"endline": 1119
		}
	],
	"name": "vibe.core.concurrency",
	"comment": "\n\tFunctions and structures for dealing with threads and concurrent access.\n\n\tThis module is modeled after std.concurrency, but provides a fiber-aware alternative\n\tto it. All blocking operations will yield the calling fiber instead of blocking it.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/task.d",
	"members": [
		{
			"kind": "struct",
			"line": 24,
			"members": [
				{
					"kind": "constructor",
					"line": 36,
					"deco": "FNcxS4vibe4core4task4TaskZS4vibe4core4task4Task",
					"parameters": [
						{
							"deco": "xS4vibe4core4task4Task",
							"name": "other"
						}
					],
					"name": "this",
					"originalType": "(in Task other)",
					"endline": 36
				},
				{
					"kind": "function",
					"line": 43,
					"storageClass": [
						"static"
					],
					"deco": "FZS4vibe4core4task4Task",
					"name": "getThis",
					"comment": " Returns the Task instance belonging to the calling task.\n\t\n",
					"endline": 50
				},
				{
					"kind": "function",
					"line": 53,
					"storageClass": [
						"nothrow",
						"@property"
					],
					"deco": "NgFNbNdZNgC4vibe4core4task9TaskFiber",
					"name": "fiber",
					"originalType": "inout inout(TaskFiber)()",
					"endline": 53
				},
				{
					"kind": "function",
					"line": 54,
					"storageClass": [
						"nothrow",
						"@property"
					],
					"deco": "NgFNbNdZNgC4core6thread6Thread",
					"name": "thread",
					"originalType": "inout inout(Thread)()",
					"endline": 54
				},
				{
					"kind": "function",
					"line": 58,
					"storageClass": [
						"nothrow",
						"@property"
					],
					"deco": "xFNbNdZb",
					"name": "running",
					"comment": " Determines if the task is still running.\n\t\n",
					"originalType": "const bool()",
					"endline": 63
				},
				{
					"kind": "function",
					"line": 65,
					"storageClass": [
						"nothrow"
					],
					"deco": "xFNbKxS4vibe4core4task4TaskZb",
					"parameters": [
						{
							"deco": "xS4vibe4core4task4Task",
							"storageClass": [
								"ref"
							],
							"name": "other"
						}
					],
					"name": "opEquals",
					"originalType": "const bool(ref Task other)",
					"endline": 65
				},
				{
					"kind": "function",
					"line": 66,
					"storageClass": [
						"nothrow"
					],
					"deco": "xFNbxS4vibe4core4task4TaskZb",
					"parameters": [
						{
							"deco": "xS4vibe4core4task4Task",
							"name": "other"
						}
					],
					"name": "opEquals",
					"originalType": "const bool(in Task other)",
					"endline": 66
				}
			],
			"name": "Task",
			"comment": " Represents a single task as started using vibe.core.runTask.\n\n\tAll methods of TaskFiber are also available as methods of Task.\n"
		},
		{
			"kind": "class",
			"line": 76,
			"base": "Fiber",
			"members": [
				{
					"kind": "function",
					"line": 97,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNbNdZNgC4core6thread6Thread",
					"name": "thread",
					"comment": " Returns the thread that owns this task.\n\t\n",
					"originalType": "inout nothrow inout(Thread)()",
					"endline": 97
				},
				{
					"kind": "function",
					"line": 101,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZS4vibe4core4task4Task",
					"name": "task",
					"comment": " Returns the handle of the current Task running on this fiber.\n\t\n",
					"originalType": "Task()",
					"endline": 101
				},
				{
					"kind": "function",
					"line": 103,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNdZNgC4vibe4core4task12MessageQueue",
					"name": "messageQueue",
					"originalType": "inout inout(MessageQueue)()",
					"endline": 103
				},
				{
					"kind": "function",
					"line": 107,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "join",
					"comment": " Blocks until the task has ended.\n\t\n"
				},
				{
					"kind": "function",
					"line": 111,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "interrupt",
					"comment": " Throws an InterruptExeption within the task as soon as it calls a blocking function.\n\t\n"
				},
				{
					"kind": "function",
					"line": 115,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "terminate",
					"comment": " Terminates the task without notice as soon as it calls a blocking function.\n\t\n"
				},
				{
					"kind": "template",
					"line": 119,
					"members": [
						{
							"kind": "function",
							"line": 119,
							"type": "void(string name, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "name"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "set",
							"comment": " Sets a task local variable.\n\t\n",
							"endline": 122
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " Sets a task local variable.\n\t\n",
					"name": "set"
				},
				{
					"kind": "template",
					"line": 126,
					"members": [
						{
							"kind": "function",
							"line": 126,
							"type": "T(string name)",
							"parameters": [
								{
									"type": "string",
									"name": "name"
								}
							],
							"name": "get",
							"comment": " Returns a task local variable.\n\t\n",
							"endline": 132
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " Returns a task local variable.\n\t\n",
					"name": "get"
				},
				{
					"kind": "function",
					"line": 136,
					"deco": "FAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "isSet",
					"comment": " Determines if a certain task local variable is set.\n\t\n",
					"endline": 139
				}
			],
			"name": "TaskFiber",
			"comment": " The base class for a task aka Fiber.\n\n\tThis class represents a single task that is executed concurrencly\n\twith other tasks. Each task is owned by a single thread.\n"
		},
		{
			"kind": "class",
			"line": 152,
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 153,
					"deco": "FZC4vibe4core4task18InterruptException",
					"name": "this",
					"originalType": "()",
					"endline": 156
				}
			],
			"name": "InterruptException",
			"comment": " Exception that is thrown by Task.interrupt.\n"
		},
		{
			"kind": "class",
			"line": 159,
			"members": [
				{
					"kind": "constructor",
					"line": 169,
					"deco": "FZC4vibe4core4task12MessageQueue",
					"name": "this",
					"originalType": "()",
					"endline": 175
				},
				{
					"kind": "function",
					"line": 177,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "full",
					"originalType": "const bool()",
					"endline": 177
				},
				{
					"kind": "function",
					"line": 179,
					"deco": "FZv",
					"name": "clear",
					"endline": 186
				},
				{
					"kind": "function",
					"line": 188,
					"deco": "FkPFS4vibe4core4task4TaskZbZv",
					"parameters": [
						{
							"deco": "k",
							"name": "count"
						},
						{
							"deco": "PFS4vibe4core4task4TaskZb",
							"name": "action"
						}
					],
					"name": "setMaxSize",
					"originalType": "void(size_t count, bool function(Task tid) action)",
					"endline": 192
				},
				{
					"kind": "function",
					"line": 194,
					"deco": "FS3std7variant17__T8VariantNVk24Z8VariantNZv",
					"parameters": [
						{
							"deco": "S3std7variant17__T8VariantNVk24Z8VariantN",
							"name": "msg"
						}
					],
					"name": "send",
					"originalType": "void(Variant msg)",
					"endline": 214
				},
				{
					"kind": "function",
					"line": 216,
					"deco": "FS3std7variant17__T8VariantNVk24Z8VariantNZv",
					"parameters": [
						{
							"deco": "S3std7variant17__T8VariantNVk24Z8VariantN",
							"name": "msg"
						}
					],
					"name": "prioritySend",
					"originalType": "void(Variant msg)",
					"endline": 224
				},
				{
					"kind": "function",
					"line": 226,
					"deco": "FMDFS3std7variant17__T8VariantNVk24Z8VariantNZbMDFS3std7variant17__T8VariantNVk24Z8VariantNZvZv",
					"parameters": [
						{
							"deco": "DFS3std7variant17__T8VariantNVk24Z8VariantNZb",
							"storageClass": [
								"scope"
							],
							"name": "filter"
						},
						{
							"deco": "DFS3std7variant17__T8VariantNVk24Z8VariantNZv",
							"storageClass": [
								"scope"
							],
							"name": "handler"
						}
					],
					"name": "receive",
					"originalType": "void(scope bool delegate(Variant) filter, scope void delegate(Variant) handler)",
					"endline": 245
				},
				{
					"kind": "template",
					"line": 247,
					"members": [
						{
							"kind": "function",
							"line": 247,
							"type": "bool(Duration timeout, scope bool delegate(Variant) filter, scope void delegate(Variant) handler)",
							"parameters": [
								{
									"type": "Duration",
									"name": "timeout"
								},
								{
									"storageClass": [
										"scope"
									],
									"type": "bool delegate(Variant)",
									"name": "filter"
								},
								{
									"storageClass": [
										"scope"
									],
									"type": "void delegate(Variant)",
									"name": "handler"
								}
							],
							"name": "receiveTimeout",
							"endline": 268
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "OPS"
						}
					],
					"name": "receiveTimeout"
				}
			],
			"name": "MessageQueue"
		}
	],
	"name": "vibe.core.task",
	"comment": "\n\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/net.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core._eventedobject"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.core.stream"
		},
		{
			"kind": "function",
			"line": 30,
			"deco": "FAyatbZS4vibe4core3net14NetworkAddress",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host"
				},
				{
					"deco": "t",
					"default": "cast(ushort)0u",
					"name": "address_family"
				},
				{
					"deco": "b",
					"default": "true",
					"name": "use_dns"
				}
			],
			"name": "resolveHost",
			"comment": "\n\tResolves the given host name/IP address string.\n\n\tSetting use_dns to false will only allow IP address strings but also guarantees\n\tthat the call will not block.\n",
			"originalType": "NetworkAddress(string host, ushort address_family = AF_UNSPEC, bool use_dns = true)",
			"endline": 33
		},
		{
			"kind": "function",
			"line": 47,
			"deco": "FtDFC4vibe4core3net13TCPConnectionZvE4vibe4core3net16TCPListenOptionsZAC4vibe4core3net11TCPListener",
			"parameters": [
				{
					"deco": "t",
					"name": "port"
				},
				{
					"deco": "DFC4vibe4core3net13TCPConnectionZv",
					"name": "connection_callback"
				},
				{
					"deco": "E4vibe4core3net16TCPListenOptions",
					"default": "cast(TCPListenOptions)0",
					"name": "options"
				}
			],
			"name": "listenTCP",
			"comment": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. Each new connection gets its own fiber. The stream parameter\n\tthen allows to perform blocking I/O on the client socket.\n\n\tThe address parameter can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
			"originalType": "TCPListener[](ushort port, void delegate(TCPConnection stream) connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
			"endline": 56
		},
		{
			"kind": "function",
			"line": 58,
			"deco": "FtDFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
			"parameters": [
				{
					"deco": "t",
					"name": "port"
				},
				{
					"deco": "DFC4vibe4core3net13TCPConnectionZv",
					"name": "connection_callback"
				},
				{
					"deco": "Aya",
					"name": "address"
				},
				{
					"deco": "E4vibe4core3net16TCPListenOptions",
					"default": "cast(TCPListenOptions)0",
					"name": "options"
				}
			],
			"name": "listenTCP",
			"comment": " ditto\n",
			"originalType": "TCPListener(ushort port, void delegate(TCPConnection stream) connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
			"endline": 61
		},
		{
			"kind": "alias",
			"line": 64,
			"storageClass": [
				"deprecated"
			],
			"name": "listenTcp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 71,
			"deco": "FtPFC4vibe4core3net13TCPConnectionZvE4vibe4core3net16TCPListenOptionsZAC4vibe4core3net11TCPListener",
			"parameters": [
				{
					"deco": "t",
					"name": "port"
				},
				{
					"deco": "PFC4vibe4core3net13TCPConnectionZv",
					"name": "connection_callback"
				},
				{
					"deco": "E4vibe4core3net16TCPListenOptions",
					"default": "cast(TCPListenOptions)0",
					"name": "options"
				}
			],
			"name": "listenTCP_s",
			"comment": "\n\tStarts listening on the specified port.\n\n\tThis function is the same as listenTCP but takes a function callback instead of a delegate.\n",
			"originalType": "TCPListener[](ushort port, void function(TCPConnection stream) connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
			"endline": 74
		},
		{
			"kind": "function",
			"line": 76,
			"deco": "FtPFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
			"parameters": [
				{
					"deco": "t",
					"name": "port"
				},
				{
					"deco": "PFC4vibe4core3net13TCPConnectionZv",
					"name": "connection_callback"
				},
				{
					"deco": "Aya",
					"name": "address"
				},
				{
					"deco": "E4vibe4core3net16TCPListenOptions",
					"default": "cast(TCPListenOptions)0",
					"name": "options"
				}
			],
			"name": "listenTCP_s",
			"comment": " ditto\n",
			"originalType": "TCPListener(ushort port, void function(TCPConnection stream) connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
			"endline": 79
		},
		{
			"kind": "alias",
			"line": 82,
			"storageClass": [
				"deprecated"
			],
			"name": "listenTcpS",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 87,
			"deco": "FAyatZC4vibe4core3net13TCPConnection",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host"
				},
				{
					"deco": "t",
					"name": "port"
				}
			],
			"name": "connectTCP",
			"comment": "\n\tEstablishes a connection to the given host/port.\n",
			"endline": 90
		},
		{
			"kind": "alias",
			"line": 93,
			"storageClass": [
				"deprecated"
			],
			"name": "connectTcp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 99,
			"deco": "FtAyaZC4vibe4core3net13UDPConnection",
			"parameters": [
				{
					"deco": "t",
					"name": "port"
				},
				{
					"deco": "Aya",
					"default": "\"0.0.0.0\"",
					"name": "bind_address"
				}
			],
			"name": "listenUDP",
			"comment": "\n\tCreates a bound UDP socket suitable for sending and receiving packets.\n",
			"endline": 102
		},
		{
			"kind": "alias",
			"line": 105,
			"storageClass": [
				"deprecated"
			],
			"name": "listenUdp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "struct",
			"line": 111,
			"members": [
				{
					"kind": "function",
					"line": 120,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZt",
					"name": "family",
					"comment": " Family (AF_) of the socket address.\n\t\n",
					"originalType": "const nothrow ushort()",
					"endline": 120
				},
				{
					"kind": "function",
					"line": 122,
					"storageClass": [
						"@property"
					],
					"deco": "FNbNdtZv",
					"parameters": [
						{
							"deco": "t",
							"name": "val"
						}
					],
					"name": "family",
					"comment": " ditto\n",
					"originalType": "nothrow void(ushort val)",
					"endline": 122
				},
				{
					"kind": "function",
					"line": 126,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZt",
					"name": "port",
					"comment": " The port in host byte order.\n\t\n",
					"originalType": "const ushort()",
					"endline": 133
				},
				{
					"kind": "function",
					"line": 135,
					"storageClass": [
						"@property"
					],
					"deco": "FNdtZv",
					"parameters": [
						{
							"deco": "t",
							"name": "val"
						}
					],
					"name": "port",
					"comment": " ditto\n",
					"originalType": "void(ushort val)",
					"endline": 142
				},
				{
					"kind": "function",
					"line": 146,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNbNdZPNgS4core3sys5posix3sys6socket8sockaddr",
					"name": "sockAddr",
					"comment": " A pointer to a sockaddr struct suitable for passing to socket functions.\n\t\n",
					"originalType": "inout nothrow inout(sockaddr)*()",
					"endline": 146
				},
				{
					"kind": "function",
					"line": 150,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZi",
					"name": "sockAddrLen",
					"comment": " Size of the sockaddr struct that is returned by sockAddr().\n\t\n",
					"originalType": "const nothrow int()",
					"endline": 156
				},
				{
					"kind": "function",
					"line": 158,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNdZPNgS4core3sys5posix7netinet3in_11sockaddr_in",
					"name": "sockAddrInet4",
					"originalType": "inout inout(sockaddr_in)*()",
					"endline": 158
				},
				{
					"kind": "function",
					"line": 159,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNdZPNgS4core3sys5posix7netinet3in_12sockaddr_in6",
					"name": "sockAddrInet6",
					"originalType": "inout inout(sockaddr_in6)*()",
					"endline": 159
				}
			],
			"name": "NetworkAddress",
			"comment": "\n\tRepresents a network/socket address.\n"
		},
		{
			"kind": "interface",
			"line": 166,
			"members": [
				{
					"kind": "function",
					"line": 168,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "enabled"
						}
					],
					"name": "tcpNoDelay",
					"comment": " Used to disable Nagle's algorithm.\n",
					"originalType": "void(bool enabled)"
				},
				{
					"kind": "function",
					"line": 170,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZb",
					"name": "tcpNoDelay",
					"comment": " ditto\n",
					"originalType": "const bool()"
				},
				{
					"kind": "function",
					"line": 173,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdS4core4time8DurationZv",
					"parameters": [
						{
							"deco": "S4core4time8Duration",
							"name": "duration"
						}
					],
					"name": "readTimeout",
					"comment": " Controls the read time out after which the connection is closed automatically.\n",
					"originalType": "void(Duration duration)"
				},
				{
					"kind": "function",
					"line": 175,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZS4core4time8Duration",
					"name": "readTimeout",
					"comment": " ditto\n",
					"originalType": "const Duration()"
				},
				{
					"kind": "function",
					"line": 178,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZb",
					"name": "connected",
					"comment": " Determines The current connection status.\n",
					"originalType": "const bool()"
				},
				{
					"kind": "function",
					"line": 181,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "peerAddress",
					"comment": " Returns the IP address of the connected peer.\n",
					"originalType": "const string()"
				},
				{
					"kind": "function",
					"line": 184,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZS4vibe4core3net14NetworkAddress",
					"name": "localAddress",
					"comment": " The local/bind address of the underlying socket.\n",
					"originalType": "const NetworkAddress()"
				},
				{
					"kind": "function",
					"line": 187,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZS4vibe4core3net14NetworkAddress",
					"name": "remoteAddress",
					"comment": " The address of the connected peer.\n",
					"originalType": "const NetworkAddress()"
				},
				{
					"kind": "function",
					"line": 190,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "close",
					"comment": " Actively closes the connection.\n"
				},
				{
					"kind": "function",
					"line": 193,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4core4time8DurationZb",
					"parameters": [
						{
							"deco": "S4core4time8Duration",
							"name": "timeout"
						}
					],
					"name": "waitForData",
					"comment": " Sets a timeout until data has to be availabe for read. Returns false on timeout.\n"
				}
			],
			"interfaces": [
				"Stream",
				"EventedObject"
			],
			"name": "TCPConnection",
			"comment": "\n\tRepresents a single TCP connection.\n"
		},
		{
			"kind": "alias",
			"line": 197,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4core3net13TCPConnection",
			"name": "TcpConnection",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "interface",
			"line": 203,
			"members": [
				{
					"kind": "function",
					"line": 205,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "stopListening",
					"comment": " Stops listening and closes the socket.\n"
				}
			],
			"name": "TCPListener",
			"comment": "\n\tRepresents a listening TCP socket.\n"
		},
		{
			"kind": "alias",
			"line": 209,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4core3net11TCPListener",
			"name": "TcpListener",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "interface",
			"line": 215,
			"members": [
				{
					"kind": "function",
					"line": 218,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "bindAddress",
					"comment": " Returns the address to which the UDP socket is bound.\n\t\n",
					"originalType": "const string()"
				},
				{
					"kind": "function",
					"line": 222,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZb",
					"name": "canBroadcast",
					"comment": " Determines if the socket is allowed to send to broadcast addresses.\n\t\n",
					"originalType": "const bool()"
				},
				{
					"kind": "function",
					"line": 224,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "val"
						}
					],
					"name": "canBroadcast",
					"comment": " ditto\n",
					"originalType": "void(bool val)"
				},
				{
					"kind": "function",
					"line": 227,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZS4vibe4core3net14NetworkAddress",
					"name": "localAddress",
					"comment": " The local/bind address of the underlying socket.\n",
					"originalType": "const NetworkAddress()"
				},
				{
					"kind": "function",
					"line": 234,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyatZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "port"
						}
					],
					"name": "connect",
					"comment": " Locks the UDP connection to a certain peer.\n\n\t\tOnce connected, the UDPConnection can only communicate with the specified peer.\n\t\tOtherwise communication with any reachable peer is possible.\n\t\n"
				},
				{
					"kind": "function",
					"line": 236,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4vibe4core3net14NetworkAddressZv",
					"parameters": [
						{
							"deco": "S4vibe4core3net14NetworkAddress",
							"name": "address"
						}
					],
					"name": "connect",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 243,
					"storageClass": [
						"abstract"
					],
					"deco": "FxAhxPS4vibe4core3net14NetworkAddressZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "data"
						},
						{
							"deco": "xPS4vibe4core3net14NetworkAddress",
							"default": "null",
							"name": "peer_address"
						}
					],
					"name": "send",
					"comment": " Sends a single packet.\n\n\t\tIf peer_address is given, the packet is send to that address. Otherwise the packet\n\t\twill be sent to the address specified by a call to connect().\n\t\n",
					"originalType": "void(in ubyte[] data, in NetworkAddress* peer_address = null)"
				},
				{
					"kind": "function",
					"line": 249,
					"storageClass": [
						"abstract"
					],
					"deco": "FAhPS4vibe4core3net14NetworkAddressZAh",
					"parameters": [
						{
							"deco": "Ah",
							"default": "null",
							"name": "buf"
						},
						{
							"deco": "PS4vibe4core3net14NetworkAddress",
							"default": "null",
							"name": "peer_address"
						}
					],
					"name": "recv",
					"comment": " Receives a single packet.\n\n\t\tIf a buffer is given, it must be large enough to hold the full packet.\n\t\n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "UDPConnection",
			"comment": "\n\tRepresents a bound and possibly 'connected' UDP socket.\n"
		},
		{
			"kind": "alias",
			"line": 253,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4core3net13UDPConnection",
			"name": "UdpConnection",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 256,
			"members": [
				{
					"kind": "enum member",
					"line": 257,
					"name": "defaults"
				},
				{
					"kind": "enum member",
					"line": 258,
					"name": "distribute"
				}
			],
			"baseDeco": "i",
			"name": "TCPListenOptions"
		},
		{
			"kind": "alias",
			"line": 262,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4core3net16TCPListenOptions",
			"name": "TcpListenOptions",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.core.net",
	"comment": "\n\tTCP/UDP connection and server handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/core.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.driver"
		},
		{
			"kind": "function",
			"line": 74,
			"deco": "FZi",
			"name": "runEventLoop",
			"comment": "\n\n\n\tStarts the vibe event loop.\n\n\tNote that this function is usually called automatically by the vibe framework. However, if\n\tyou provide your own main() function, you need to call it manually.\n\n\tThe event loop will continue running during the whole life time of the application.\n\tTasks will be started and handled from within the event loop.\n",
			"endline": 93
		},
		{
			"kind": "function",
			"line": 101,
			"deco": "FbZv",
			"parameters": [
				{
					"deco": "b",
					"default": "true",
					"name": "shutdown_workers"
				}
			],
			"name": "exitEventLoop",
			"comment": "\n\tStops the currently running event loop.\n\n\tCalling this function will cause the event loop to stop event processing and\n\tthe corresponding call to runEventLoop() will return to its caller.\n",
			"endline": 117
		},
		{
			"kind": "function",
			"line": 126,
			"deco": "FZb",
			"name": "processEvents",
			"comment": "\n\tProcess all pending events without blocking.\n\n\tChecks if events are ready to trigger immediately, and run their callbacks if so.\n\n\tReturns: Returns false iff exitEventLoop was called in the process.\n",
			"endline": 129
		},
		{
			"kind": "function",
			"line": 139,
			"deco": "FDFZvZv",
			"parameters": [
				{
					"deco": "DFZv",
					"name": "del"
				}
			],
			"name": "setIdleHandler",
			"comment": "\n\tSets a callback that is called whenever no events are left in the event queue.\n\n\tThe callback delegate is called whenever all events in the event queue have been\n\tprocessed. Returning true from the callback will cause another idle event to\n\tbe triggered immediately after processing any events that have arrived in the\n\tmeantime. Returning fals will instead wait until another event has arrived first.\n",
			"endline": 142
		},
		{
			"kind": "function",
			"line": 144,
			"deco": "FDFZbZv",
			"parameters": [
				{
					"deco": "DFZb",
					"name": "del"
				}
			],
			"name": "setIdleHandler",
			"comment": " ditto\n",
			"endline": 147
		},
		{
			"kind": "function",
			"line": 156,
			"deco": "FDFZvZS4vibe4core4task4Task",
			"parameters": [
				{
					"deco": "DFZv",
					"name": "task"
				}
			],
			"name": "runTask",
			"comment": "\n\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n",
			"endline": 183
		},
		{
			"kind": "template",
			"line": 191,
			"members": [
				{
					"kind": "function",
					"line": 191,
					"type": "void(R function(ARGS) func, ARGS args)",
					"parameters": [
						{
							"type": "R function(ARGS)",
							"name": "func"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "runWorkerTask",
					"comment": "\n\tRuns a new asynchronous task in a worker thread.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\n",
					"endline": 195
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": "\n\tRuns a new asynchronous task in a worker thread.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\n",
			"name": "runWorkerTask"
		},
		{
			"kind": "template",
			"line": 197,
			"members": [
				{
					"kind": "function",
					"line": 197,
					"type": "void(shared(T) object, ARGS args)",
					"parameters": [
						{
							"type": "shared(T)",
							"name": "object"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "runWorkerTask",
					"comment": " ditto\n",
					"endline": 201
				}
			],
			"parameters": [
				{
					"kind": "alias",
					"name": "method"
				},
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": " ditto\n",
			"name": "runWorkerTask"
		},
		{
			"kind": "template",
			"line": 222,
			"members": [
				{
					"kind": "function",
					"line": 222,
					"type": "void(R function(ARGS) func, ARGS args)",
					"parameters": [
						{
							"type": "R function(ARGS)",
							"name": "func"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "runWorkerTaskDist",
					"comment": "\n\tRuns a new asynchronous task in all worker threads concurrently.\n\n\tThis function is mainly useful for long-living tasks that distribute their\n\twork across all CPU cores. Only function pointers with weakly isolated\n\targuments are allowed to be able to guarantee thread-safety.\n",
					"endline": 226
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": "\n\tRuns a new asynchronous task in all worker threads concurrently.\n\n\tThis function is mainly useful for long-living tasks that distribute their\n\twork across all CPU cores. Only function pointers with weakly isolated\n\targuments are allowed to be able to guarantee thread-safety.\n",
			"name": "runWorkerTaskDist"
		},
		{
			"kind": "template",
			"line": 228,
			"members": [
				{
					"kind": "function",
					"line": 228,
					"type": "void(shared(T) object, ARGS args)",
					"parameters": [
						{
							"type": "shared(T)",
							"name": "object"
						},
						{
							"type": "ARGS",
							"name": "args"
						}
					],
					"name": "runWorkerTaskDist",
					"comment": " ditto\n",
					"endline": 232
				}
			],
			"parameters": [
				{
					"kind": "alias",
					"name": "method"
				},
				{
					"kind": "type",
					"name": "T"
				},
				{
					"kind": "tuple",
					"name": "ARGS"
				}
			],
			"comment": " ditto\n",
			"name": "runWorkerTaskDist"
		},
		{
			"kind": "function",
			"line": 255,
			"deco": "FZv",
			"name": "yield",
			"comment": "\n\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n",
			"endline": 259
		},
		{
			"kind": "function",
			"line": 267,
			"deco": "FZv",
			"name": "rawYield",
			"comment": "\n\tYields execution of this task until an event wakes it up again.\n\n\tBeware that the task will starve if no event wakes it up.\n",
			"endline": 270
		},
		{
			"kind": "function",
			"line": 275,
			"deco": "FS4core4time8DurationZv",
			"parameters": [
				{
					"deco": "S4core4time8Duration",
					"name": "timeout"
				}
			],
			"name": "sleep",
			"comment": "\n\tSuspends the execution of the calling task for the specified amount of time.\n",
			"endline": 280
		},
		{
			"kind": "function",
			"line": 294,
			"deco": "FS4core4time8DurationDFZvbZC4vibe4core6driver5Timer",
			"parameters": [
				{
					"deco": "S4core4time8Duration",
					"name": "timeout"
				},
				{
					"deco": "DFZv",
					"name": "callback"
				},
				{
					"deco": "b",
					"default": "false",
					"name": "periodic"
				}
			],
			"name": "setTimer",
			"comment": "\n\tReturns a new armed timer.\n\n\tParams:\n\t\ttimeout = Determines the minimum amount of time that elapses before the timer fires.\n\t\tcallback = This delegate will be called when the timer fires\n\t\tperiodic = Speficies if the timer fires repeatedly or only once\n\n\tReturns:\n\t\tReturns a Timer object that can be used to identify and modify the timer.\n",
			"endline": 299
		},
		{
			"kind": "function",
			"line": 304,
			"deco": "FDFZvZC4vibe4core6driver5Timer",
			"parameters": [
				{
					"deco": "DFZv",
					"name": "callback"
				}
			],
			"name": "createTimer",
			"comment": "\n\tCreates a new timer without arming it.\n",
			"endline": 307
		},
		{
			"kind": "template",
			"line": 316,
			"members": [
				{
					"kind": "function",
					"line": 316,
					"type": "void(string name, T value)",
					"parameters": [
						{
							"type": "string",
							"name": "name"
						},
						{
							"type": "T",
							"name": "value"
						}
					],
					"name": "setTaskLocal",
					"comment": "\n\tSets a variable specific to the calling task/fiber.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n",
					"endline": 321
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tSets a variable specific to the calling task/fiber.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n",
			"name": "setTaskLocal"
		},
		{
			"kind": "template",
			"line": 330,
			"members": [
				{
					"kind": "function",
					"line": 330,
					"type": "T(string name)",
					"parameters": [
						{
							"type": "string",
							"name": "name"
						}
					],
					"name": "getTaskLocal",
					"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n",
					"endline": 337
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n",
			"name": "getTaskLocal"
		},
		{
			"kind": "function",
			"line": 346,
			"deco": "FAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "name"
				}
			],
			"name": "isTaskLocalSet",
			"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n",
			"endline": 351
		},
		{
			"kind": "function",
			"line": 362,
			"deco": "FkZv",
			"parameters": [
				{
					"deco": "k",
					"name": "sz"
				}
			],
			"name": "setTaskStackSize",
			"comment": "\n\tSets the stack size for tasks.\n\n\tThe default stack size is set to 16 KiB, which is sufficient for most tasks. Tuning this value\n\tcan be used to reduce memory usage for great numbers of concurrent tasks or to allow applications\n\twith heavy stack use.\n\n\tNote that this function must be called before any task is started to have an effect.\n",
			"originalType": "void(size_t sz)",
			"endline": 365
		},
		{
			"kind": "function",
			"line": 375,
			"deco": "FZv",
			"name": "enableWorkerThreads",
			"comment": "\n\tEnables multithreaded worker task processing.\n\n\tThis function will start up a number of worker threads that will process tasks started using\n\trunWorkerTask(). runTask() will still execute tasks on the calling thread.\n\n\tNote that this functionality is experimental right now and is not recommended for general use.\n",
			"endline": 393
		},
		{
			"kind": "function",
			"line": 403,
			"deco": "FZv",
			"name": "lowerPrivileges",
			"comment": "\n\tSets the effective user and group ID to the ones configured for privilege lowering.\n\n\tThis function is useful for services run as root to give up on the privileges that\n\tthey only need for initialization (such as listening on ports <= 1024 or opening\n\tsystem log files).\n",
			"endline": 421
		},
		{
			"kind": "function",
			"line": 430,
			"deco": "FPFE4vibe4core4core9TaskEventC4core6thread5FiberZvZv",
			"parameters": [
				{
					"deco": "PFE4vibe4core4core9TaskEventC4core6thread5FiberZv",
					"name": "func"
				}
			],
			"name": "setTaskEventCallback",
			"comment": "\n\tSets a callback that is invoked whenever a task changes its status.\n\n\tThis function is useful mostly for implementing debuggers that\n\tanalyze the life time of tasks, including task switches.\n",
			"endline": 433
		},
		{
			"kind": "variable",
			"line": 439,
			"init": "\"0.7.17\"",
			"storageClass": [
				"enum"
			],
			"deco": "Aya",
			"name": "VibeVersionString",
			"comment": "\n\tA version string representing the current vibe version\n"
		},
		{
			"kind": "template",
			"line": 479,
			"members": [
				{
					"kind": "struct",
					"line": 479,
					"members": [
						{
							"kind": "variable",
							"line": 481,
							"init": "size_t.max",
							"type": "size_t",
							"name": "m_offset"
						},
						{
							"kind": "variable",
							"line": 482,
							"type": "size_t",
							"name": "m_id"
						},
						{
							"kind": "variable",
							"line": 483,
							"type": "T",
							"name": "m_initValue"
						},
						{
							"kind": "constructor",
							"line": 486,
							"type": "(T init_val)",
							"parameters": [
								{
									"type": "T",
									"name": "init_val"
								}
							],
							"name": "this",
							"endline": 486
						},
						{
							"kind": "function",
							"line": 490,
							"type": "void(bool value)",
							"parameters": [
								{
									"deco": "b",
									"name": "value"
								}
							],
							"name": "opAssign",
							"endline": 490
						},
						{
							"kind": "function",
							"line": 492,
							"type": "T()",
							"name": "storage",
							"endline": 517
						}
					],
					"name": "TaskLocal"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tImplements a task local storage variable.\n\n\tTask local variables, similar to thread local variables, exist separately\n\tin each task. Consequently, they do not need any form of synchronization\n\twhen accessing them.\n\n\tNote, however, that each TaskLocal variable will increase the memory footprint\n\tof any task that uses task local storage. There is also an overhead to access\n\tTaskLocal variables, higher than for thread local variables, but generelly\n\tstill O(n).\n\n\tNotice:\n\t\tFiberLocal instances MUST be declared as static/global thread-local\n\t\tvariables. Defining them as a temporary/stack variable will cause\n\t\tcrashes or data corruption!\n\n\tExamples:\n\t\t---\n\t\tTaskLocal!string s_myString = \"world\";\n\n\t\tvoid taskFunc()\n\t\t{\n\t\t\tassert(s_myString == \"world\");\n\t\t\ts_myString = \"hello\";\n\t\t\tassert(s_myString == \"hello\");\n\t\t}\n\n\t\tshared static this()\n\t\t{\n\t\t\t// both tasks will get independent storage for s_myString\n\t\t\trunTask(&taskFunc);\n\t\t\trunTask(&taskFunc);\n\t\t}\n\t\t---\n",
			"name": "TaskLocal"
		},
		{
			"kind": "enum",
			"line": 526,
			"members": [
				{
					"kind": "enum member",
					"line": 527,
					"name": "preStart",
					"comment": " Just about to invoke the fiber which starts execution\n"
				},
				{
					"kind": "enum member",
					"line": 528,
					"name": "postStart",
					"comment": " After the fiber has returned for the first time (by yield or exit)\n"
				},
				{
					"kind": "enum member",
					"line": 529,
					"name": "start",
					"comment": " Just about to start execution\n"
				},
				{
					"kind": "enum member",
					"line": 530,
					"name": "yield",
					"comment": " Temporarily paused\n"
				},
				{
					"kind": "enum member",
					"line": 531,
					"name": "resume",
					"comment": " Resumed from a prior yield\n"
				},
				{
					"kind": "enum member",
					"line": 532,
					"name": "end",
					"comment": " Ended normally\n"
				},
				{
					"kind": "enum member",
					"line": 533,
					"name": "fail",
					"comment": " Ended with an exception\n"
				}
			],
			"baseDeco": "i",
			"name": "TaskEvent",
			"comment": "\n\tHigh level state change events for a Task\n"
		}
	],
	"name": "vibe.core.core",
	"comment": "\n\tThis module contains the core functionality of the vibe framework.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/_eventedobject.d",
	"members": [
		{
			"kind": "interface",
			"line": 14,
			"members": [],
			"name": "EventedObject",
			"comment": "\n\tDEPRECATED; Base interface for all evented objects.\n\n\tEvented objects are owned by the fiber/task that created them and may only be used inside this\n\tspecific fiber. By using release(), a fiber can drop the ownership of an object so that\n\tanother fiber can gain ownership using acquire(). This way it becomes possible to share\n\tconnections and files across fibers.\n"
		}
	],
	"name": "vibe.core._eventedobject",
	"comment": "\n\tINTERNAL\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/stream.d",
	"members": [
		{
			"kind": "interface",
			"line": 23,
			"members": [
				{
					"kind": "function",
					"line": 26,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"comment": " Returns true iff the end of the stream has been reached\n\t\n",
					"originalType": "bool()"
				},
				{
					"kind": "function",
					"line": 32,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"comment": "\tReturns the maximum number of bytes that are known to remain in this stream until the\n\t\tend is reached. After leastSize() bytes have been read, the stream will either have\n\t\treached EOS and empty() returns true, or leastSize() returns again a number > 0.\n\t\n",
					"originalType": "ulong()"
				},
				{
					"kind": "function",
					"line": 36,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"comment": " Queries if there is data available for immediate, non-blocking read.\n\t\n",
					"originalType": "bool()"
				},
				{
					"kind": "function",
					"line": 44,
					"storageClass": [
						"abstract"
					],
					"deco": "FZAxh",
					"name": "peek",
					"comment": " Returns a temporary reference to the data that is currently buffered, typically has the size\n\t\tleastSize() or 0 if dataAvailableForRead() returns false.\n\n\t\tNote that any method invocation on the same stream invalidates the contents of the returned\n\t\tbuffer.\n\t\n"
				},
				{
					"kind": "function",
					"line": 50,
					"storageClass": [
						"abstract"
					],
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"comment": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n\t\n"
				}
			],
			"name": "InputStream",
			"comment": "\n\n\nInterface for all classes implementing readable streams.\n"
		},
		{
			"kind": "interface",
			"line": 56,
			"members": [
				{
					"kind": "function",
					"line": 59,
					"storageClass": [
						"abstract"
					],
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"comment": " Writes an array of bytes to the stream.\n\t\n",
					"originalType": "void(in ubyte[] bytes)"
				},
				{
					"kind": "function",
					"line": 63,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "flush",
					"comment": " Flushes the stream and makes sure that all data is being written to the output device.\n\t\n"
				},
				{
					"kind": "function",
					"line": 70,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "finalize",
					"comment": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n\t\n"
				},
				{
					"kind": "function",
					"line": 74,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FxAaZv",
					"parameters": [
						{
							"deco": "xAa",
							"name": "bytes"
						}
					],
					"name": "write",
					"comment": " Writes an array of chars to the stream.\n\t\n",
					"originalType": "void(in char[] bytes)",
					"endline": 77
				},
				{
					"kind": "function",
					"line": 85,
					"storageClass": [
						"abstract"
					],
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"comment": " Pipes an InputStream directly into this OutputStream.\n\n\t\tThe number of bytes written is either the whole input stream when nbytes == 0, or exactly\n\t\tnbytes for nbytes > 0. If the input stream contains less than nbytes of data, an exception\n\t\tis thrown.\n\t\n",
					"originalType": "void(InputStream stream, ulong nbytes = 0)"
				},
				{
					"kind": "function",
					"line": 94,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FhZv",
					"parameters": [
						{
							"deco": "h",
							"name": "elem"
						}
					],
					"name": "put",
					"comment": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n",
					"endline": 94
				},
				{
					"kind": "function",
					"line": 96,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "elems"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"originalType": "void(in ubyte[] elems)",
					"endline": 96
				},
				{
					"kind": "function",
					"line": 98,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FaZv",
					"parameters": [
						{
							"deco": "a",
							"name": "elem"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"endline": 98
				},
				{
					"kind": "function",
					"line": 100,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FxAaZv",
					"parameters": [
						{
							"deco": "xAa",
							"name": "elems"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"originalType": "void(in char[] elems)",
					"endline": 100
				},
				{
					"kind": "function",
					"line": 102,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FwZv",
					"parameters": [
						{
							"deco": "w",
							"name": "elem"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"endline": 102
				},
				{
					"kind": "function",
					"line": 104,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FxAwZv",
					"parameters": [
						{
							"deco": "xAw",
							"name": "elems"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"originalType": "void(in dchar[] elems)",
					"endline": 104
				}
			],
			"name": "OutputStream",
			"comment": "\n\tInterface for all classes implementing writeable streams.\n"
		},
		{
			"kind": "interface",
			"line": 137,
			"members": [],
			"interfaces": [
				"InputStream",
				"OutputStream"
			],
			"name": "Stream",
			"comment": "\n\tInterface for all classes implementing readable and writable streams.\n"
		},
		{
			"kind": "interface",
			"line": 144,
			"members": [
				{
					"kind": "function",
					"line": 146,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNbNdZm",
					"name": "size",
					"comment": " Returns the total size of the file.\n",
					"originalType": "const nothrow ulong()"
				},
				{
					"kind": "function",
					"line": 149,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNbNdZb",
					"name": "readable",
					"comment": " Determines if this stream is readable.\n",
					"originalType": "const nothrow bool()"
				},
				{
					"kind": "function",
					"line": 152,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNbNdZb",
					"name": "writable",
					"comment": " Determines if this stream is writable.\n",
					"originalType": "const nothrow bool()"
				},
				{
					"kind": "function",
					"line": 155,
					"storageClass": [
						"abstract"
					],
					"deco": "FmZv",
					"parameters": [
						{
							"deco": "m",
							"name": "offset"
						}
					],
					"name": "seek",
					"comment": " Seeks to a specific position in the file if supported by the stream.\n"
				},
				{
					"kind": "function",
					"line": 158,
					"storageClass": [
						"abstract"
					],
					"deco": "FNbZm",
					"name": "tell",
					"comment": " Returns the current offset of the file pointer\n"
				}
			],
			"interfaces": [
				"Stream"
			],
			"name": "RandomAccessStream",
			"comment": "\n\tInterface for all streams supporting random access.\n"
		},
		{
			"kind": "class",
			"line": 168,
			"members": [
				{
					"kind": "function",
					"line": 169,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 169,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 170,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 173,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 174,
					"deco": "FZv",
					"name": "flush",
					"endline": 174,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 175,
					"deco": "FZv",
					"name": "finalize",
					"endline": 175,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "NullOutputStream",
			"comment": "\n\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n"
		}
	],
	"name": "vibe.core.stream",
	"comment": "\n\tGeneric stream interface used by several stream-like classes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/sync.d",
	"members": [
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.core._eventedobject"
		},
		{
			"kind": "enum",
			"line": 19,
			"members": [
				{
					"kind": "enum member",
					"line": 20,
					"name": "lock"
				},
				{
					"kind": "enum member",
					"line": 21,
					"name": "tryLock"
				},
				{
					"kind": "enum member",
					"line": 22,
					"name": "defer"
				}
			],
			"baseDeco": "i",
			"name": "LockMode"
		},
		{
			"kind": "struct",
			"line": 28,
			"members": [
				{
					"kind": "constructor",
					"line": 37,
					"deco": "FNcC4core4sync5mutex5MutexE4vibe4core4sync8LockModeZS4vibe4core4sync15ScopedMutexLock",
					"parameters": [
						{
							"deco": "C4core4sync5mutex5Mutex",
							"name": "mutex"
						},
						{
							"deco": "E4vibe4core4sync8LockMode",
							"default": "cast(LockMode)0",
							"name": "mode"
						}
					],
					"name": "this",
					"originalType": "(core.sync.mutex.Mutex mutex, LockMode mode = LockMode.lock)",
					"endline": 54
				},
				{
					"kind": "destructor",
					"line": 56,
					"deco": "FZv",
					"name": "~this",
					"endline": 60
				},
				{
					"kind": "function",
					"line": 62,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "locked",
					"originalType": "const bool()",
					"endline": 62
				},
				{
					"kind": "function",
					"line": 64,
					"deco": "FZb",
					"name": "tryLock",
					"endline": 68
				},
				{
					"kind": "function",
					"line": 70,
					"deco": "FZv",
					"name": "lock",
					"endline": 75
				},
				{
					"kind": "function",
					"line": 77,
					"deco": "FZv",
					"name": "unlock",
					"endline": 82
				},
				{
					"kind": "function",
					"line": 28,
					"deco": "FNcS4vibe4core4sync15ScopedMutexLockZS4vibe4core4sync15ScopedMutexLock",
					"parameters": [
						{
							"deco": "S4vibe4core4sync15ScopedMutexLock",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "ScopedMutexLock",
			"comment": " RAII lock for the Mutex class.\n"
		},
		{
			"kind": "class",
			"line": 92,
			"base": "Mutex",
			"members": [
				{
					"kind": "constructor",
					"line": 101,
					"deco": "FZC4vibe4core4sync9TaskMutex",
					"name": "this",
					"originalType": "()",
					"endline": 104
				},
				{
					"kind": "function",
					"line": 106,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZb",
					"name": "tryLock",
					"originalType": "bool()",
					"endline": 114,
					"overrides": [
						"core.sync.mutex.Mutex.tryLock"
					]
				},
				{
					"kind": "function",
					"line": 116,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZv",
					"name": "lock",
					"originalType": "void()",
					"endline": 125,
					"overrides": [
						"core.sync.mutex.Mutex.lock"
					]
				},
				{
					"kind": "function",
					"line": 127,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZv",
					"name": "unlock",
					"originalType": "void()",
					"endline": 138,
					"overrides": [
						"core.sync.mutex.Mutex.unlock"
					]
				}
			],
			"name": "TaskMutex",
			"comment": " Mutex implementation for fibers.\n\n\tNote:\n\t\tThis mutex is currently suitable only for synchronizing different\n\t\tfibers. If you need inter-thread synchronization, go for\n\t\tcore.sync.mutex instead.\n"
		},
		{
			"kind": "class",
			"line": 165,
			"base": "Condition",
			"members": [
				{
					"kind": "constructor",
					"line": 171,
					"deco": "FC4core4sync5mutex5MutexZC4vibe4core4sync13TaskCondition",
					"parameters": [
						{
							"deco": "C4core4sync5mutex5Mutex",
							"name": "mutex"
						}
					],
					"name": "this",
					"originalType": "(Mutex mutex)",
					"endline": 176
				},
				{
					"kind": "function",
					"line": 178,
					"storageClass": [
						"override",
						"@property",
						"@trusted"
					],
					"deco": "FNdNeZC4core4sync5mutex5Mutex",
					"name": "mutex",
					"originalType": "Mutex()",
					"endline": 178,
					"overrides": [
						"core.sync.condition.Condition.mutex"
					]
				},
				{
					"kind": "function",
					"line": 180,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZv",
					"name": "wait",
					"originalType": "void()",
					"endline": 192,
					"overrides": [
						"core.sync.condition.Condition.wait"
					]
				},
				{
					"kind": "function",
					"line": 194,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeS4core4time8DurationZb",
					"parameters": [
						{
							"deco": "S4core4time8Duration",
							"name": "timeout"
						}
					],
					"name": "wait",
					"originalType": "bool(Duration timeout)",
					"endline": 210,
					"overrides": [
						"core.sync.condition.Condition.wait"
					]
				},
				{
					"kind": "function",
					"line": 212,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZv",
					"name": "notify",
					"originalType": "void()",
					"endline": 215,
					"overrides": [
						"core.sync.condition.Condition.notify"
					]
				},
				{
					"kind": "function",
					"line": 217,
					"storageClass": [
						"override",
						"@trusted"
					],
					"deco": "FNeZv",
					"name": "notifyAll",
					"originalType": "void()",
					"endline": 220,
					"overrides": [
						"core.sync.condition.Condition.notifyAll"
					]
				}
			],
			"name": "TaskCondition"
		},
		{
			"kind": "function",
			"line": 225,
			"deco": "FZC4vibe4core4sync11ManualEvent",
			"name": "createManualEvent",
			"comment": " Creates a new signal that can be shared between fibers.\n",
			"endline": 228
		},
		{
			"kind": "interface",
			"line": 234,
			"members": [
				{
					"kind": "function",
					"line": 236,
					"storageClass": [
						"abstract",
						"@property"
					],
					"deco": "xFNdZi",
					"name": "emitCount",
					"comment": " A counter that is increased with every emit() call\n",
					"originalType": "const int()"
				},
				{
					"kind": "function",
					"line": 239,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "emit",
					"comment": " Emits the signal, waking up all owners of the signal.\n"
				},
				{
					"kind": "function",
					"line": 242,
					"storageClass": [
						"abstract"
					],
					"deco": "FZv",
					"name": "wait",
					"comment": " Acquires ownership and waits until the signal is emitted.\n"
				},
				{
					"kind": "function",
					"line": 245,
					"storageClass": [
						"abstract"
					],
					"deco": "FiZi",
					"parameters": [
						{
							"deco": "i",
							"name": "reference_emit_count"
						}
					],
					"name": "wait",
					"comment": " Acquires ownership and waits until the signal is emitted if no emit has happened since the given reference emit count.\n"
				},
				{
					"kind": "function",
					"line": 248,
					"storageClass": [
						"abstract"
					],
					"deco": "FS4core4time8DurationiZi",
					"parameters": [
						{
							"deco": "S4core4time8Duration",
							"name": "timeout"
						},
						{
							"deco": "i",
							"name": "reference_emit_count"
						}
					],
					"name": "wait",
					"comment": " \n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "ManualEvent",
			"comment": " A manually triggered cross-task event.\n\n\tNote: the ownership can be shared between multiple fibers and threads.\n"
		},
		{
			"kind": "alias",
			"line": 252,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4core4sync11ManualEvent",
			"name": "Signal",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "alias",
			"line": 254,
			"storageClass": [
				"deprecated"
			],
			"name": "createSignal",
			"comment": " ditto\n"
		}
	],
	"name": "vibe.core.sync",
	"comment": "\n\tTask synchronization facilities\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Leonid Kramer\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "source/vibe/core/connectionpool.d",
	"members": [
		{
			"kind": "template",
			"line": 25,
			"members": [
				{
					"kind": "class",
					"line": 25,
					"members": [
						{
							"kind": "variable",
							"line": 27,
							"type": "Connection delegate()",
							"name": "m_connectionFactory"
						},
						{
							"kind": "variable",
							"line": 28,
							"type": "Connection[]",
							"name": "m_connections"
						},
						{
							"kind": "variable",
							"line": 29,
							"type": "int[const(Connection)]",
							"name": "m_lockCount"
						},
						{
							"kind": "constructor",
							"line": 32,
							"type": "(Connection delegate() connection_factory)",
							"parameters": [
								{
									"type": "Connection delegate()",
									"name": "connection_factory"
								}
							],
							"name": "this",
							"endline": 35
						},
						{
							"kind": "function",
							"line": 37,
							"type": "LockedConnection!(Connection)()",
							"name": "lockConnection",
							"endline": 64
						}
					],
					"name": "ConnectionPool"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Connection"
				}
			],
			"comment": "\n\tGeneric connection pool class.\n\n\tThe connection pool is creating connections using the supplied factory function as needed\n\twhenever lockConnection() is called. Connections are associated to the calling fiber, as long\n\tas any copy of the returned LockedConnection object still exists. Connections that are not\n\tassociated\n",
			"name": "ConnectionPool"
		},
		{
			"kind": "template",
			"line": 67,
			"members": [
				{
					"kind": "struct",
					"line": 67,
					"members": [
						{
							"kind": "variable",
							"line": 69,
							"type": "ConnectionPool!(Connection)",
							"name": "m_pool"
						},
						{
							"kind": "variable",
							"line": 70,
							"type": "Task",
							"name": "m_task"
						},
						{
							"kind": "variable",
							"line": 71,
							"type": "Connection",
							"name": "m_conn"
						},
						{
							"kind": "constructor",
							"line": 74,
							"type": "(ConnectionPool!(Connection) pool, Connection conn)",
							"parameters": [
								{
									"type": "ConnectionPool!(Connection)",
									"name": "pool"
								},
								{
									"type": "Connection",
									"name": "conn"
								}
							],
							"name": "this",
							"endline": 80
						},
						{
							"kind": "destructor",
							"line": 92,
							"name": "~this",
							"endline": 106
						}
					],
					"name": "LockedConnection"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "Connection"
				}
			],
			"name": "LockedConnection"
		}
	],
	"name": "vibe.core.connectionpool",
	"comment": "\n\tGeneric connection pool for reusing persistent connections across fibers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/redis/redis.d",
	"members": [
		{
			"kind": "import",
			"line": 3,
			"name": "vibe.core.net"
		},
		{
			"kind": "class",
			"line": 14,
			"members": [
				{
					"kind": "constructor",
					"line": 25,
					"deco": "FC4vibe4core3net13TCPConnectionZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "C4vibe4core3net13TCPConnection",
							"name": "conn"
						}
					],
					"name": "this",
					"originalType": "(TCPConnection conn)",
					"endline": 56
				},
				{
					"kind": "function",
					"line": 68,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "hasNext",
					"originalType": "bool()",
					"endline": 71
				},
				{
					"kind": "template",
					"line": 73,
					"members": [
						{
							"kind": "function",
							"line": 73,
							"type": "T()",
							"name": "next",
							"endline": 87
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "next"
				},
				{
					"kind": "destructor",
					"line": 14,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"name": "RedisReply"
		},
		{
			"kind": "class",
			"line": 90,
			"members": [
				{
					"kind": "constructor",
					"line": 97,
					"deco": "FZC4vibe2db5redis5redis15RedisConnection",
					"name": "this",
					"originalType": "()",
					"endline": 97
				},
				{
					"kind": "function",
					"line": 99,
					"deco": "FAyatZv",
					"parameters": [
						{
							"deco": "Aya",
							"default": "\"127.0.0.1\"",
							"name": "host"
						},
						{
							"deco": "t",
							"default": "cast(ushort)6379u",
							"name": "port"
						}
					],
					"name": "connect",
					"originalType": "void(string host = \"127.0.0.1\", ushort port = 6379)",
					"endline": 102
				},
				{
					"kind": "function",
					"line": 104,
					"deco": "FAyaxAAhXC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "command"
						},
						{
							"deco": "xAAh",
							"name": "args"
						}
					],
					"name": "request",
					"originalType": "RedisReply(string command, in ubyte[][] args...)",
					"endline": 118
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "RedisConnection"
		},
		{
			"kind": "class",
			"line": 122,
			"members": [
				{
					"kind": "constructor",
					"line": 126,
					"deco": "FAyatZC4vibe2db5redis5redis11RedisClient",
					"parameters": [
						{
							"deco": "Aya",
							"default": "\"127.0.0.1\"",
							"name": "host"
						},
						{
							"deco": "t",
							"default": "cast(ushort)6379u",
							"name": "port"
						}
					],
					"name": "this",
					"originalType": "(string host = \"127.0.0.1\", ushort port = 6379)",
					"endline": 133
				},
				{
					"kind": "function",
					"line": 145,
					"deco": "FAAyaXk",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "del",
					"originalType": "size_t(string[] keys...)",
					"endline": 147
				},
				{
					"kind": "function",
					"line": 149,
					"deco": "FAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "exists",
					"endline": 151
				},
				{
					"kind": "function",
					"line": 153,
					"deco": "FAyakZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "seconds"
						}
					],
					"name": "expire",
					"originalType": "bool(string key, size_t seconds)",
					"endline": 155
				},
				{
					"kind": "function",
					"line": 157,
					"deco": "FAyalZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "l",
							"name": "timestamp"
						}
					],
					"name": "expireAt",
					"endline": 159
				},
				{
					"kind": "function",
					"line": 161,
					"deco": "FAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "pattern"
						}
					],
					"name": "keys",
					"endline": 163
				},
				{
					"kind": "function",
					"line": 165,
					"deco": "FAyaAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "db"
						}
					],
					"name": "move",
					"endline": 167
				},
				{
					"kind": "function",
					"line": 169,
					"deco": "FAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "persists",
					"endline": 171
				},
				{
					"kind": "function",
					"line": 175,
					"deco": "FZAya",
					"name": "randomKey",
					"endline": 177
				},
				{
					"kind": "function",
					"line": 179,
					"deco": "FAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "newkey"
						}
					],
					"name": "rename",
					"endline": 181
				},
				{
					"kind": "function",
					"line": 183,
					"deco": "FAyaAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "newkey"
						}
					],
					"name": "renameNX",
					"endline": 185
				},
				{
					"kind": "function",
					"line": 189,
					"deco": "FAyaZl",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "ttl",
					"endline": 191
				},
				{
					"kind": "function",
					"line": 193,
					"deco": "FAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "type",
					"endline": 195
				},
				{
					"kind": "template",
					"line": 203,
					"members": [
						{
							"kind": "function",
							"line": 203,
							"type": "size_t(string key, T suffix)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "suffix"
								}
							],
							"name": "append",
							"endline": 205
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "append"
				},
				{
					"kind": "function",
					"line": 207,
					"deco": "FAyaiZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "i",
							"default": "1",
							"name": "value"
						}
					],
					"name": "decr",
					"endline": 209
				},
				{
					"kind": "template",
					"line": 211,
					"members": [
						{
							"kind": "function",
							"line": 211,
							"type": "T(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "get",
							"endline": 213
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "get"
				},
				{
					"kind": "function",
					"line": 215,
					"deco": "FAyakZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "offset"
						}
					],
					"name": "getBit",
					"originalType": "bool(string key, size_t offset)",
					"endline": 217
				},
				{
					"kind": "template",
					"line": 219,
					"members": [
						{
							"kind": "function",
							"line": 219,
							"type": "T(string key, size_t start, size_t end)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "start"
								},
								{
									"type": "size_t",
									"name": "end"
								}
							],
							"name": "getRange",
							"endline": 221
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "getRange"
				},
				{
					"kind": "template",
					"line": 223,
					"members": [
						{
							"kind": "function",
							"line": 223,
							"type": "T(string key, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "getSet",
							"endline": 225
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "getSet"
				},
				{
					"kind": "function",
					"line": 227,
					"deco": "FAyaiZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "i",
							"default": "1",
							"name": "value"
						}
					],
					"name": "incr",
					"endline": 229
				},
				{
					"kind": "function",
					"line": 231,
					"deco": "FAAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "mget",
					"endline": 233
				},
				{
					"kind": "template",
					"line": 235,
					"members": [
						{
							"kind": "function",
							"line": 235,
							"type": "void(ARGS args)",
							"parameters": [
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "mset",
							"endline": 239
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "mset"
				},
				{
					"kind": "template",
					"line": 241,
					"members": [
						{
							"kind": "function",
							"line": 241,
							"type": "bool(ARGS args)",
							"parameters": [
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "msetNX",
							"endline": 245
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "msetNX"
				},
				{
					"kind": "template",
					"line": 247,
					"members": [
						{
							"kind": "function",
							"line": 247,
							"type": "void(string key, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "set",
							"endline": 249
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "set"
				},
				{
					"kind": "function",
					"line": 251,
					"deco": "FAyakbZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "offset"
						},
						{
							"deco": "b",
							"name": "value"
						}
					],
					"name": "setBit",
					"originalType": "bool(string key, size_t offset, bool value)",
					"endline": 253
				},
				{
					"kind": "template",
					"line": 255,
					"members": [
						{
							"kind": "function",
							"line": 255,
							"type": "void(string key, size_t seconds, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "seconds"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "setEX",
							"endline": 258
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "setEX"
				},
				{
					"kind": "template",
					"line": 260,
					"members": [
						{
							"kind": "function",
							"line": 260,
							"type": "bool(string key, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "setNX",
							"endline": 262
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "setNX"
				},
				{
					"kind": "template",
					"line": 264,
					"members": [
						{
							"kind": "function",
							"line": 264,
							"type": "size_t(string key, size_t offset, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "offset"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "setRange",
							"endline": 266
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "setRange"
				},
				{
					"kind": "function",
					"line": 268,
					"deco": "FAyaZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "strlen",
					"originalType": "size_t(string key)",
					"endline": 270
				},
				{
					"kind": "function",
					"line": 276,
					"deco": "FAyaAAyaXk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "AAya",
							"name": "fields"
						}
					],
					"name": "hdel",
					"originalType": "size_t(string key, string[] fields...)",
					"endline": 279
				},
				{
					"kind": "function",
					"line": 281,
					"deco": "FAyaAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "field"
						}
					],
					"name": "hexists",
					"endline": 283
				},
				{
					"kind": "template",
					"line": 285,
					"members": [
						{
							"kind": "function",
							"line": 285,
							"type": "T(string key, string field)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "string",
									"name": "field"
								}
							],
							"name": "hget",
							"endline": 287
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "hget"
				},
				{
					"kind": "function",
					"line": 289,
					"deco": "FAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "hgetAll",
					"endline": 291
				},
				{
					"kind": "function",
					"line": 293,
					"deco": "FAyaAyaiZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "field"
						},
						{
							"deco": "i",
							"default": "1",
							"name": "value"
						}
					],
					"name": "hincr",
					"endline": 295
				},
				{
					"kind": "function",
					"line": 297,
					"deco": "FAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "hkeys",
					"endline": 299
				},
				{
					"kind": "function",
					"line": 301,
					"deco": "FAyaZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "hlen",
					"originalType": "size_t(string key)",
					"endline": 303
				},
				{
					"kind": "function",
					"line": 305,
					"deco": "FAyaAAyaXC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "AAya",
							"name": "fields"
						}
					],
					"name": "hmget",
					"endline": 308
				},
				{
					"kind": "template",
					"line": 310,
					"members": [
						{
							"kind": "function",
							"line": 310,
							"type": "void(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "hmset",
							"endline": 313
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "hmset"
				},
				{
					"kind": "template",
					"line": 315,
					"members": [
						{
							"kind": "function",
							"line": 315,
							"type": "bool(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "hmsetNX",
							"endline": 318
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "hmsetNX"
				},
				{
					"kind": "function",
					"line": 320,
					"deco": "FAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "hvals",
					"endline": 322
				},
				{
					"kind": "template",
					"line": 324,
					"members": [
						{
							"kind": "function",
							"line": 324,
							"type": "T(string key, size_t index)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "index"
								}
							],
							"name": "lindex",
							"endline": 326
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "lindex"
				},
				{
					"kind": "template",
					"line": 328,
					"members": [
						{
							"kind": "function",
							"line": 328,
							"type": "size_t(string key, T1 pivot, T2 value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T1",
									"name": "pivot"
								},
								{
									"type": "T2",
									"name": "value"
								}
							],
							"name": "linsertBefore",
							"endline": 330
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T1"
						},
						{
							"kind": "type",
							"name": "T2"
						}
					],
					"name": "linsertBefore"
				},
				{
					"kind": "template",
					"line": 332,
					"members": [
						{
							"kind": "function",
							"line": 332,
							"type": "size_t(string key, T1 pivot, T2 value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T1",
									"name": "pivot"
								},
								{
									"type": "T2",
									"name": "value"
								}
							],
							"name": "linsertAfter",
							"endline": 334
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T1"
						},
						{
							"kind": "type",
							"name": "T2"
						}
					],
					"name": "linsertAfter"
				},
				{
					"kind": "function",
					"line": 336,
					"deco": "FAyaZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "llen",
					"originalType": "size_t(string key)",
					"endline": 338
				},
				{
					"kind": "template",
					"line": 340,
					"members": [
						{
							"kind": "function",
							"line": 340,
							"type": "size_t(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "lpush",
							"endline": 343
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "lpush"
				},
				{
					"kind": "template",
					"line": 345,
					"members": [
						{
							"kind": "function",
							"line": 345,
							"type": "size_t(string key, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "lpushX",
							"endline": 347
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"name": "lpushX"
				},
				{
					"kind": "template",
					"line": 349,
					"members": [
						{
							"kind": "function",
							"line": 349,
							"type": "size_t(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "rpush",
							"endline": 352
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "rpush"
				},
				{
					"kind": "template",
					"line": 354,
					"members": [
						{
							"kind": "function",
							"line": 354,
							"type": "size_t(string key, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "rpushX",
							"endline": 356
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"name": "rpushX"
				},
				{
					"kind": "function",
					"line": 358,
					"deco": "FAyakkZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "stop"
						}
					],
					"name": "lrange",
					"originalType": "RedisReply(string key, size_t start, size_t stop)",
					"endline": 360
				},
				{
					"kind": "template",
					"line": 362,
					"members": [
						{
							"kind": "function",
							"line": 362,
							"type": "size_t(string key, size_t count, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "count"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "lrem",
							"endline": 364
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "lrem"
				},
				{
					"kind": "template",
					"line": 366,
					"members": [
						{
							"kind": "function",
							"line": 366,
							"type": "void(string key, size_t index, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "size_t",
									"name": "index"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "lset",
							"endline": 368
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "lset"
				},
				{
					"kind": "function",
					"line": 370,
					"deco": "FAyakkZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "stop"
						}
					],
					"name": "ltrim",
					"originalType": "void(string key, size_t start, size_t stop)",
					"endline": 372
				},
				{
					"kind": "template",
					"line": 374,
					"members": [
						{
							"kind": "function",
							"line": 374,
							"type": "T(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "rpop",
							"endline": 376
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "rpop"
				},
				{
					"kind": "template",
					"line": 378,
					"members": [
						{
							"kind": "function",
							"line": 378,
							"type": "T(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "lpop",
							"endline": 380
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "lpop"
				},
				{
					"kind": "template",
					"line": 382,
					"members": [
						{
							"kind": "function",
							"line": 382,
							"type": "T(string key, string destination)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "string",
									"name": "destination"
								}
							],
							"name": "rpoplpush",
							"endline": 384
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "rpoplpush"
				},
				{
					"kind": "template",
					"line": 390,
					"members": [
						{
							"kind": "function",
							"line": 390,
							"type": "size_t(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "sadd",
							"endline": 393
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "sadd"
				},
				{
					"kind": "function",
					"line": 395,
					"deco": "FAyaZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "scard",
					"originalType": "size_t(string key)",
					"endline": 397
				},
				{
					"kind": "function",
					"line": 399,
					"deco": "FAAyaXC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sdiff",
					"endline": 401
				},
				{
					"kind": "function",
					"line": 403,
					"deco": "FAyaAAyaXk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "destination"
						},
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sdiffStore",
					"originalType": "size_t(string destination, string[] keys...)",
					"endline": 406
				},
				{
					"kind": "function",
					"line": 408,
					"deco": "FAAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sinter",
					"endline": 410
				},
				{
					"kind": "function",
					"line": 412,
					"deco": "FAyaAAyaXk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "destination"
						},
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sinterStore",
					"originalType": "size_t(string destination, string[] keys...)",
					"endline": 415
				},
				{
					"kind": "template",
					"line": 417,
					"members": [
						{
							"kind": "function",
							"line": 417,
							"type": "bool(string key, T member)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "T",
									"name": "member"
								}
							],
							"name": "sisMember",
							"endline": 419
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "sisMember"
				},
				{
					"kind": "function",
					"line": 421,
					"deco": "FAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "smembers",
					"endline": 423
				},
				{
					"kind": "template",
					"line": 425,
					"members": [
						{
							"kind": "function",
							"line": 425,
							"type": "bool(string source, string destination, T member)",
							"parameters": [
								{
									"type": "string",
									"name": "source"
								},
								{
									"type": "string",
									"name": "destination"
								},
								{
									"type": "T",
									"name": "member"
								}
							],
							"name": "smove",
							"endline": 427
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "smove"
				},
				{
					"kind": "template",
					"line": 429,
					"members": [
						{
							"kind": "function",
							"line": 429,
							"type": "T(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "spop",
							"endline": 431
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "spop"
				},
				{
					"kind": "template",
					"line": 433,
					"members": [
						{
							"kind": "function",
							"line": 433,
							"type": "T(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "srandMember",
							"endline": 435
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "srandMember"
				},
				{
					"kind": "template",
					"line": 437,
					"members": [
						{
							"kind": "function",
							"line": 437,
							"type": "size_t(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "srem",
							"endline": 440
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "srem"
				},
				{
					"kind": "function",
					"line": 442,
					"deco": "FAAyaXC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sunion",
					"endline": 444
				},
				{
					"kind": "function",
					"line": 446,
					"deco": "FAAyaXk",
					"parameters": [
						{
							"deco": "AAya",
							"name": "keys"
						}
					],
					"name": "sunionStore",
					"originalType": "size_t(string[] keys...)",
					"endline": 448
				},
				{
					"kind": "template",
					"line": 454,
					"members": [
						{
							"kind": "function",
							"line": 454,
							"type": "size_t(string key, ARGS args)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								},
								{
									"type": "ARGS",
									"name": "args"
								}
							],
							"name": "zadd",
							"endline": 457
						}
					],
					"parameters": [
						{
							"kind": "tuple",
							"name": "ARGS"
						}
					],
					"name": "zadd"
				},
				{
					"kind": "function",
					"line": 459,
					"deco": "FAyaZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "Zcard",
					"originalType": "size_t(string key)",
					"endline": 461
				},
				{
					"kind": "function",
					"line": 463,
					"deco": "FAyaddZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "d",
							"name": "min"
						},
						{
							"deco": "d",
							"name": "max"
						}
					],
					"name": "zcount",
					"originalType": "size_t(string key, double min, double max)",
					"endline": 465
				},
				{
					"kind": "function",
					"line": 467,
					"deco": "FAyadAyaZd",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "d",
							"name": "value"
						},
						{
							"deco": "Aya",
							"name": "member"
						}
					],
					"name": "zincrby",
					"endline": 469
				},
				{
					"kind": "function",
					"line": 473,
					"deco": "FAyakkbZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "end"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "withScores"
						}
					],
					"name": "zrange",
					"originalType": "RedisReply(string key, size_t start, size_t end, bool withScores = false)",
					"endline": 477
				},
				{
					"kind": "function",
					"line": 479,
					"deco": "FAyakkbZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "end"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "withScores"
						}
					],
					"name": "zrangeByScore",
					"originalType": "RedisReply(string key, size_t start, size_t end, bool withScores = false)",
					"endline": 483
				},
				{
					"kind": "function",
					"line": 485,
					"deco": "FAyakkkkbZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "end"
						},
						{
							"deco": "k",
							"name": "offset"
						},
						{
							"deco": "k",
							"name": "count"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "withScores"
						}
					],
					"name": "zrangeByScore",
					"originalType": "RedisReply(string key, size_t start, size_t end, size_t offset, size_t count, bool withScores = false)",
					"endline": 490
				},
				{
					"kind": "function",
					"line": 492,
					"deco": "FAyaAyaZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "member"
						}
					],
					"name": "zrank",
					"endline": 495
				},
				{
					"kind": "function",
					"line": 496,
					"deco": "FAyaAAyaXk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "AAya",
							"name": "members"
						}
					],
					"name": "zrem",
					"originalType": "size_t(string key, string[] members...)",
					"endline": 499
				},
				{
					"kind": "function",
					"line": 501,
					"deco": "FAyaiiZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "i",
							"name": "start"
						},
						{
							"deco": "i",
							"name": "stop"
						}
					],
					"name": "zremRangeByRank",
					"originalType": "size_t(string key, int start, int stop)",
					"endline": 503
				},
				{
					"kind": "function",
					"line": 505,
					"deco": "FAyaddZk",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "d",
							"name": "min"
						},
						{
							"deco": "d",
							"name": "max"
						}
					],
					"name": "zremRangeByScore",
					"originalType": "size_t(string key, double min, double max)",
					"endline": 507
				},
				{
					"kind": "function",
					"line": 509,
					"deco": "FAyakkbZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "end"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "withScores"
						}
					],
					"name": "zrevRange",
					"originalType": "RedisReply(string key, size_t start, size_t end, bool withScores = false)",
					"endline": 513
				},
				{
					"kind": "function",
					"line": 515,
					"deco": "FAyaddbZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "d",
							"name": "min"
						},
						{
							"deco": "d",
							"name": "max"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "withScores"
						}
					],
					"name": "zrevRangeByScore",
					"endline": 519
				},
				{
					"kind": "function",
					"line": 521,
					"deco": "FAyaAyaZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "member"
						}
					],
					"name": "zrevRank",
					"endline": 524
				},
				{
					"kind": "function",
					"line": 526,
					"deco": "FAyaAyaZC4vibe2db5redis5redis10RedisReply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"name": "member"
						}
					],
					"name": "zscore",
					"endline": 528
				},
				{
					"kind": "function",
					"line": 543,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "password"
						}
					],
					"name": "auth",
					"endline": 545
				},
				{
					"kind": "template",
					"line": 547,
					"members": [
						{
							"kind": "function",
							"line": 547,
							"type": "T(T data)",
							"parameters": [
								{
									"type": "T",
									"name": "data"
								}
							],
							"name": "echo",
							"endline": 549
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "echo"
				},
				{
					"kind": "function",
					"line": 551,
					"deco": "FZv",
					"name": "ping",
					"endline": 553
				},
				{
					"kind": "function",
					"line": 555,
					"deco": "FZv",
					"name": "quit",
					"endline": 557
				},
				{
					"kind": "function",
					"line": 558,
					"deco": "FkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "db_index"
						}
					],
					"name": "select",
					"originalType": "void(size_t db_index)",
					"endline": 560
				},
				{
					"kind": "template",
					"line": 569,
					"members": [
						{
							"kind": "function",
							"line": 569,
							"type": "T(string parameter)",
							"parameters": [
								{
									"type": "string",
									"name": "parameter"
								}
							],
							"name": "getConfig",
							"endline": 571
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "getConfig"
				},
				{
					"kind": "template",
					"line": 573,
					"members": [
						{
							"kind": "function",
							"line": 573,
							"type": "void(string parameter, T value)",
							"parameters": [
								{
									"type": "string",
									"name": "parameter"
								},
								{
									"type": "T",
									"name": "value"
								}
							],
							"name": "setConfig",
							"endline": 575
						}
					],
					"parameters": [
						{
							"kind": "type",
							"type": "E[]",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "E"
						}
					],
					"name": "setConfig"
				},
				{
					"kind": "function",
					"line": 577,
					"deco": "FZv",
					"name": "configResetStat",
					"endline": 579
				},
				{
					"kind": "function",
					"line": 581,
					"deco": "FZk",
					"name": "dbSize",
					"originalType": "size_t()",
					"endline": 583
				},
				{
					"kind": "function",
					"line": 588,
					"deco": "FZv",
					"name": "flushAll",
					"endline": 590
				},
				{
					"kind": "function",
					"line": 592,
					"deco": "FZv",
					"name": "flushDB",
					"endline": 594
				},
				{
					"kind": "function",
					"line": 596,
					"deco": "FZAya",
					"name": "info",
					"endline": 598
				},
				{
					"kind": "function",
					"line": 600,
					"deco": "FZl",
					"name": "lastSave",
					"endline": 602
				},
				{
					"kind": "function",
					"line": 606,
					"deco": "FZv",
					"name": "save",
					"endline": 608
				},
				{
					"kind": "function",
					"line": 610,
					"deco": "FZv",
					"name": "shutdown",
					"endline": 612
				},
				{
					"kind": "function",
					"line": 614,
					"deco": "FAyatZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "port"
						}
					],
					"name": "slaveOf",
					"endline": 616
				},
				{
					"kind": "template",
					"line": 622,
					"members": [
						{
							"kind": "function",
							"line": 622,
							"type": "T(string command, in ubyte[][] args...)",
							"parameters": [
								{
									"type": "string",
									"name": "command"
								},
								{
									"storageClass": [
										"in"
									],
									"type": "ubyte[][]",
									"name": "args"
								}
							],
							"name": "request",
							"endline": 638
						}
					],
					"parameters": [
						{
							"kind": "type",
							"default": "RedisReply",
							"name": "T"
						}
					],
					"name": "request"
				}
			],
			"name": "RedisClient",
			"comment": " A redis client with connection pooling. \n"
		}
	],
	"name": "vibe.db.redis.redis"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/mongo.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.db.mongo.client"
		},
		{
			"kind": "function",
			"line": 48,
			"deco": "FAyatZC4vibe2db5mongo6client11MongoClient",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host"
				},
				{
					"deco": "t",
					"name": "port"
				}
			],
			"name": "connectMongoDB",
			"comment": "\n\tConnects to a MongoDB instance.\n\n\tIf the host/port form is used, default settings will be used, which enable\n\tsafe updates, but no fsync. By specifying a URL instead, it is possible to\n\tfully customize the settings. See\n\t$(LINK http://www.mongodb.org/display/DOCS/Connections) for the complete set\n\tof options.\n\n\tExamples:\n\t\t---\n\t\t// connecting with default settings:\n\t\tauto client = connectMongoDB(\"127.0.0.1\");\n\t\tauto users = client.getCollection(\"users\");\n\t\tusers.insert(Bson(\"peter\"));\n\t\t---\n\n\t\t---\n\t\t// connectiong using the URL form with custom settings\n\t\tauto client = connectMongoDB(\"mongodb://localhost/?slaveOk=true\");\n\t\t---\n\n\tParams:\n\t\thost = Specifies the host name or IP address of the MongoDB server.\n\t\tport = Can be used to specify the port of the MongoDB server if different from the default one.\n\t\thost_or_url = Can either be a host name, in which case the default port will be used, or a URL with the mongodb:// scheme.\n\n\tReturns:\n\t\tA new MongoClient instance that can be used to access the database.\n\n \tThrows:\n \t\tThrows an exception if a mongodb:// URL is given and the URL cannot be parsed.\n \t\tAn exception will not be thrown if called with a hostname and port.\n",
			"endline": 52
		},
		{
			"kind": "function",
			"line": 54,
			"deco": "FAyaZC4vibe2db5mongo6client11MongoClient",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host_or_url"
				}
			],
			"name": "connectMongoDB",
			"comment": " ditto\n",
			"endline": 62
		}
	],
	"name": "vibe.db.mongo.mongo",
	"comment": "\n\tMongoDB and MongoCollection classes and connections.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/cursor.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.data.bson"
		},
		{
			"kind": "struct",
			"line": 25,
			"members": [
				{
					"kind": "destructor",
					"line": 38,
					"deco": "FZv",
					"name": "~this",
					"endline": 43
				},
				{
					"kind": "function",
					"line": 50,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"comment": "\n\t\tReturns true if there are more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
					"originalType": "bool()",
					"endline": 50
				},
				{
					"kind": "function",
					"line": 59,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZS4vibe4data4bson4Bson",
					"name": "front",
					"comment": "\n\t\tReturns the current document of the response.\n\n\t\tUse empty and popFront to iterate over the list of documents using an\n\t\tinput range interface. Note that calling this function is only allowed\n\t\tif empty returns false.\n\t\n",
					"originalType": "Bson()",
					"endline": 59
				},
				{
					"kind": "function",
					"line": 66,
					"deco": "FZv",
					"name": "popFront",
					"comment": "\n\t\tAdvances the cursor to the next document of the response.\n\n\t\tNote that calling this function is only allowed if empty returns false.\n\t\n",
					"endline": 66
				},
				{
					"kind": "function",
					"line": 76,
					"deco": "FDFKS4vibe4data4bson4BsonZiZi",
					"parameters": [
						{
							"deco": "DFKS4vibe4data4bson4BsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": "\n\t\tIterates over all remaining documents.\n\n\t\tNote that iteration is one-way - elements that have already been visited\n\t\twill not be visited again if another iteration is done.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
					"originalType": "int(int delegate(ref Bson doc) del)",
					"endline": 87
				},
				{
					"kind": "function",
					"line": 97,
					"deco": "FDFKkKS4vibe4data4bson4BsonZiZi",
					"parameters": [
						{
							"deco": "DFKkKS4vibe4data4bson4BsonZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": "\n\t\tIterates over all remaining documents.\n\n\t\tNote that iteration is one-way - elements that have already been visited\n\t\twill not be visited again if another iteration is done.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
					"originalType": "int(int delegate(ref size_t idx, ref Bson doc) del)",
					"endline": 109
				},
				{
					"kind": "function",
					"line": 25,
					"deco": "FNcS4vibe2db5mongo6cursor11MongoCursorZS4vibe2db5mongo6cursor11MongoCursor",
					"parameters": [
						{
							"deco": "S4vibe2db5mongo6cursor11MongoCursor",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "MongoCursor",
			"comment": "\n\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n"
		}
	],
	"name": "vibe.db.mongo.cursor",
	"comment": "\n\tMongoDB cursor abstraction\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/client.d",
	"members": [
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.db.mongo.collection"
		},
		{
			"kind": "import",
			"line": 12,
			"name": "vibe.db.mongo.database"
		},
		{
			"kind": "class",
			"line": 27,
			"members": [
				{
					"kind": "function",
					"line": 80,
					"deco": "FAyaZS4vibe2db5mongo10collection15MongoCollection",
					"parameters": [
						{
							"deco": "Aya",
							"name": "path"
						}
					],
					"name": "getCollection",
					"comment": "\n\t\tAccesses a collection using an absolute path.\n\n\t\tThe full database.collection path must be specified. To access\n\t\tcollections using a path relative to their database, use getDatabase in\n\t\tconjunction with MongoDatabase.opIndex.\n\n\t\tReturns:\n\t\t\tMongoCollection for the given combined database and collectiion name(path)\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto col = client.getCollection(\"test.collection\");\n\t\t\t---\n   \n",
					"endline": 83
				},
				{
					"kind": "function",
					"line": 107,
					"deco": "FAyaZS4vibe2db5mongo8database13MongoDatabase",
					"parameters": [
						{
							"deco": "Aya",
							"name": "dbName"
						}
					],
					"name": "getDatabase",
					"comment": "\n\t\tReturns an object representing the specified database.\n\n\t\tThe returned object allows to access the database entity (which contains\n\t\ta set of collections). There are two main use cases:\n\n\t\t1. Accessing collections using a relative path\n\n\t\t2. Performing service commands on the database itself\n\n\t\tNote that there is no performance gain in accessing collections via a\n\t\trelative path compared to getCollection and an absolute path.\n\n\t\tReturns:\n\t\t\tMongoDatabase instance representing requested database\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto db = client.getDatabase(\"test\");\n\t\t\tauto coll = db[\"collection\"];\n\t\t\t---\n\t\n",
					"endline": 110
				}
			],
			"name": "MongoClient",
			"comment": "\n\tRepresents a single remote MongoClient. Abstracts away management of connections\n\tto mongo service.\n \n"
		}
	],
	"name": "vibe.db.mongo.client",
	"comment": "\n\tMongoClient class doing connection management. Usually this is a main entry point\n\tfor client code.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/database.d",
	"members": [
		{
			"kind": "struct",
			"line": 21,
			"members": [
				{
					"kind": "constructor",
					"line": 29,
					"deco": "FNcC4vibe2db5mongo6client11MongoClientAyaZS4vibe2db5mongo8database13MongoDatabase",
					"parameters": [
						{
							"deco": "C4vibe2db5mongo6client11MongoClient",
							"name": "client"
						},
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "this",
					"originalType": "(MongoClient client, string name)",
					"endline": 41
				},
				{
					"kind": "function",
					"line": 44,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZAya",
					"name": "name",
					"comment": " The name of this database\n",
					"originalType": "string()",
					"endline": 47
				},
				{
					"kind": "function",
					"line": 50,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe2db5mongo6client11MongoClient",
					"name": "client",
					"comment": " The client which represents the connection to the database server\n",
					"originalType": "MongoClient()",
					"endline": 53
				},
				{
					"kind": "function",
					"line": 59,
					"deco": "FAyaZS4vibe2db5mongo10collection15MongoCollection",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndex",
					"comment": " Accesses the collections of this database.\n\n\t\tReturns: The collection with the given name\n\t\n",
					"endline": 62
				},
				{
					"kind": "function",
					"line": 72,
					"deco": "FZyS4vibe2db5mongo10connection22_MongoErrorDescription",
					"name": "getLastError",
					"comment": " Retrieves the last error code (if any) from the database server.\n\n\t\tExact object format is not documented. MongoErrorDescription signature will be\n\t\tupdated upon any issues. Note that this method will execute a query to service\n\t\tcollection and thus is far from being \"free\".\n\n\t\tReturns: struct storing data from MongoDB db.getLastErrorObj() object\n \t\n",
					"originalType": "MongoErrorDescription()",
					"endline": 75
				},
				{
					"kind": "function",
					"line": 86,
					"deco": "FAyaZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "Aya",
							"name": "mask"
						}
					],
					"name": "getLog",
					"comment": " Returns recent log messages for this database from the database server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/getLog+Command).\n\n\t \tParams:\n\t \t\tmask = \"global\" or \"rs\" or \"startupWarnings\". Refer to official MongoDB docs.\n\n     \tReturns: Bson document with recent log messages from MongoDB service.\n \t \n",
					"endline": 89
				},
				{
					"kind": "function",
					"line": 97,
					"deco": "FbZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "b",
							"default": "false",
							"name": "async"
						}
					],
					"name": "fsync",
					"comment": " Performs a filesystem/disk sync of the database on the server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/fsync+Command)\n\n\t\tReturns: check documentation\n \t \n",
					"endline": 100
				},
				{
					"kind": "function",
					"line": 114,
					"deco": "FS4vibe4data4bson4BsonZS4vibe4data4bson4Bson",
					"parameters": [
						{
							"deco": "S4vibe4data4bson4Bson",
							"name": "command_and_options"
						}
					],
					"name": "runCommand",
					"comment": " Generic means to run commands on the database.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/Commands) for a list\n\t\tof possible values for command_and_options.\n\n\t\tParams:\n\t\t\tcommand_and_options = Bson object containing the command to be executed\n\t\t\t\tas well as the command parameters as fields\n\n\t\tReturns: The raw response of the MongoDB server\n\t\n",
					"endline": 117
				}
			],
			"name": "MongoDatabase",
			"comment": " Represents a single database accessible through a given MongoClient.\n"
		}
	],
	"name": "vibe.db.mongo.database",
	"comment": "\n\tMongoDatabase class representing common database for group of collections.\n\n\tTechnically it is very special collection with common query functions\n\tdisabled and some service commands provided.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/connection.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.data.bson"
		},
		{
			"kind": "alias",
			"line": 40,
			"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
			"name": "MongoErrorDescription",
			"comment": "\n D POD representation of Mongo error object.\n\n For successful queries \"code\" is negative.\n Can be used also to check how many documents where updated upon\n a successful query via \"n\" field.\n \n"
		},
		{
			"kind": "class",
			"line": 45,
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 47,
					"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection14MongoException",
					"parameters": [
						{
							"deco": "Aya",
							"name": "message"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						}
					],
					"name": "this",
					"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
					"endline": 50
				}
			],
			"name": "MongoException",
			"comment": "\n Root class for vibe.d Mongo driver exception hierarchy.\n \n"
		},
		{
			"kind": "class",
			"line": 58,
			"base": "MongoException",
			"members": [
				{
					"kind": "constructor",
					"line": 60,
					"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection20MongoDriverException",
					"parameters": [
						{
							"deco": "Aya",
							"name": "message"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						}
					],
					"name": "this",
					"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
					"endline": 63
				}
			],
			"name": "MongoDriverException",
			"comment": "\n Generic class for all exception related to unhandled driver problems.\n\n I.e.: protocol mismatch or unexpected mongo service behavior.\n \n"
		},
		{
			"kind": "class",
			"line": 72,
			"base": "MongoException",
			"members": [
				{
					"kind": "variable",
					"line": 74,
					"storageClass": [
						"immutable"
					],
					"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
					"name": "description",
					"originalType": "MongoErrorDescription",
					"offset": 36
				},
				{
					"kind": "constructor",
					"line": 77,
					"deco": "FyS4vibe2db5mongo10connection22_MongoErrorDescriptionAyaiC6object9ThrowableZC4vibe2db5mongo10connection16MongoDBException",
					"parameters": [
						{
							"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
							"name": "description"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						}
					],
					"name": "this",
					"originalType": "(MongoErrorDescription description, string file = __FILE__, int line = __LINE__, Throwable next = null)",
					"endline": 82
				}
			],
			"name": "MongoDBException",
			"comment": "\n Wrapper class for all inner mongo collection manipulation errors.\n\n It does not indicate problem with vibe.d driver itself. Most frequently this\n one is thrown when MongoConnection is in checked mode and getLastError() has something interesting.\n \n"
		},
		{
			"kind": "class",
			"line": 90,
			"base": "MongoException",
			"members": [
				{
					"kind": "constructor",
					"line": 92,
					"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection18MongoAuthException",
					"parameters": [
						{
							"deco": "Aya",
							"name": "message"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						}
					],
					"name": "this",
					"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
					"endline": 95
				}
			],
			"name": "MongoAuthException",
			"comment": "\n Generic class for all exceptions related to authentication problems.\n\n I.e.: unsupported mechanisms or wrong credentials.\n \n"
		},
		{
			"kind": "class",
			"line": 104,
			"members": [
				{
					"kind": "variable",
					"line": 112,
					"init": "27017",
					"storageClass": [
						"enum"
					],
					"deco": "i",
					"name": "defaultPort"
				},
				{
					"kind": "constructor",
					"line": 115,
					"deco": "FAyatZC4vibe2db5mongo10connection15MongoConnection",
					"parameters": [
						{
							"deco": "Aya",
							"name": "server"
						},
						{
							"deco": "t",
							"default": "cast(ushort)27017u",
							"name": "port"
						}
					],
					"name": "this",
					"comment": " Simplified constructor overload, with no m_settings\n",
					"originalType": "(string server, ushort port = defaultPort)",
					"endline": 119
				},
				{
					"kind": "constructor",
					"line": 121,
					"deco": "FC4vibe2db5mongo10connection19MongoClientSettingsZC4vibe2db5mongo10connection15MongoConnection",
					"parameters": [
						{
							"deco": "C4vibe2db5mongo10connection19MongoClientSettings",
							"name": "cfg"
						}
					],
					"name": "this",
					"originalType": "(MongoClientSettings cfg)",
					"endline": 129
				},
				{
					"kind": "function",
					"line": 131,
					"deco": "FZv",
					"name": "connect",
					"endline": 146
				},
				{
					"kind": "function",
					"line": 148,
					"deco": "FZv",
					"name": "disconnect",
					"endline": 154
				},
				{
					"kind": "function",
					"line": 156,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "connected",
					"originalType": "const bool()",
					"endline": 156
				},
				{
					"kind": "function",
					"line": 158,
					"deco": "FAyaE4vibe2db5mongo10connection11UpdateFlagsS4vibe4data4bson4BsonS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "collection_name"
						},
						{
							"deco": "E4vibe2db5mongo10connection11UpdateFlags",
							"name": "flags"
						},
						{
							"deco": "S4vibe4data4bson4Bson",
							"name": "selector"
						},
						{
							"deco": "S4vibe4data4bson4Bson",
							"name": "update"
						}
					],
					"name": "update",
					"endline": 172
				},
				{
					"kind": "function",
					"line": 174,
					"deco": "FAyaE4vibe2db5mongo10connection11InsertFlagsAS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "collection_name"
						},
						{
							"deco": "E4vibe2db5mongo10connection11InsertFlags",
							"name": "flags"
						},
						{
							"deco": "AS4vibe4data4bson4Bson",
							"name": "documents"
						}
					],
					"name": "insert",
					"endline": 190
				},
				{
					"kind": "function",
					"line": 192,
					"deco": "FAyaE4vibe2db5mongo10connection10QueryFlagsiiS4vibe4data4bson4BsonS4vibe4data4bson4BsonZC4vibe2db5mongo10connection5Reply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "collection_name"
						},
						{
							"deco": "E4vibe2db5mongo10connection10QueryFlags",
							"name": "flags"
						},
						{
							"deco": "i",
							"name": "nskip"
						},
						{
							"deco": "i",
							"name": "nret"
						},
						{
							"deco": "S4vibe4data4bson4Bson",
							"name": "query"
						},
						{
							"deco": "S4vibe4data4bson4Bson",
							"default": "(Bson __ctmp2673;\n , __ctmp2673).this(null)",
							"name": "returnFieldSelector"
						}
					],
					"name": "query",
					"originalType": "Reply(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector = Bson(null))",
					"endline": 204
				},
				{
					"kind": "function",
					"line": 206,
					"deco": "FAyailZC4vibe2db5mongo10connection5Reply",
					"parameters": [
						{
							"deco": "Aya",
							"name": "collection_name"
						},
						{
							"deco": "i",
							"name": "nret"
						},
						{
							"deco": "l",
							"name": "cursor_id"
						}
					],
					"name": "getMore",
					"endline": 215
				},
				{
					"kind": "function",
					"line": 217,
					"deco": "FAyaE4vibe2db5mongo10connection11DeleteFlagsS4vibe4data4bson4BsonZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "collection_name"
						},
						{
							"deco": "E4vibe2db5mongo10connection11DeleteFlags",
							"name": "flags"
						},
						{
							"deco": "S4vibe4data4bson4Bson",
							"name": "selector"
						}
					],
					"name": "delete_",
					"endline": 230
				},
				{
					"kind": "function",
					"line": 232,
					"deco": "FAlZv",
					"parameters": [
						{
							"deco": "Al",
							"name": "cursors"
						}
					],
					"name": "killCursors",
					"endline": 241
				},
				{
					"kind": "function",
					"line": 243,
					"deco": "FAyaZyS4vibe2db5mongo10connection22_MongoErrorDescription",
					"parameters": [
						{
							"deco": "Aya",
							"name": "db"
						}
					],
					"name": "getLastError",
					"originalType": "MongoErrorDescription(string db)",
					"endline": 304
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "MongoConnection",
			"comment": "\n  [internal] Provides low-level mongodb protocol access.\n\n  It is not intended for direct usage. Please use vibe.db.mongo.db and vibe.db.mongo.collection modules for your code.\n  Note that a MongoConnection may only be used from one fiber/thread at a time.\n \n"
		},
		{
			"kind": "function",
			"line": 440,
			"deco": "FJC4vibe2db5mongo10connection19MongoClientSettingsAyaZb",
			"parameters": [
				{
					"deco": "C4vibe2db5mongo10connection19MongoClientSettings",
					"storageClass": [
						"out"
					],
					"name": "cfg"
				},
				{
					"deco": "Aya",
					"name": "url"
				}
			],
			"name": "parseMongoDBUrl",
			"comment": "\n Parses the given string as a mongodb URL. The URL must be in the form documented at\n $(LINK http://www.mongodb.org/display/DOCS/Connections) which is:\n\n mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n Returns: true if the URL was successfully parsed. False if the URL can not be parsed.\n\n If the URL is successfully parsed the MongoClientSettings instance will contain the parsed config.\n If the URL is not successfully parsed the information in the MongoClientSettings instance may be\n incomplete and should not be used.\n \n",
			"endline": 592
		},
		{
			"kind": "enum",
			"line": 683,
			"members": [
				{
					"kind": "enum member",
					"line": 684,
					"name": "Reply"
				},
				{
					"kind": "enum member",
					"line": 685,
					"name": "Msg"
				},
				{
					"kind": "enum member",
					"line": 686,
					"name": "Update"
				},
				{
					"kind": "enum member",
					"line": 687,
					"name": "Insert"
				},
				{
					"kind": "enum member",
					"line": 688,
					"name": "Reserved1"
				},
				{
					"kind": "enum member",
					"line": 689,
					"name": "Query"
				},
				{
					"kind": "enum member",
					"line": 690,
					"name": "GetMore"
				},
				{
					"kind": "enum member",
					"line": 691,
					"name": "Delete"
				},
				{
					"kind": "enum member",
					"line": 692,
					"name": "KillCursors"
				}
			],
			"baseDeco": "i",
			"name": "OpCode"
		},
		{
			"kind": "enum",
			"line": 695,
			"members": [
				{
					"kind": "enum member",
					"line": 696,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 697,
					"name": "Upsert"
				},
				{
					"kind": "enum member",
					"line": 698,
					"name": "MultiUpdate"
				}
			],
			"baseDeco": "i",
			"name": "UpdateFlags"
		},
		{
			"kind": "enum",
			"line": 701,
			"members": [
				{
					"kind": "enum member",
					"line": 702,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 703,
					"name": "ContinueOnError"
				}
			],
			"baseDeco": "i",
			"name": "InsertFlags"
		},
		{
			"kind": "enum",
			"line": 706,
			"members": [
				{
					"kind": "enum member",
					"line": 707,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 708,
					"name": "TailableCursor"
				},
				{
					"kind": "enum member",
					"line": 709,
					"name": "SlaveOk"
				},
				{
					"kind": "enum member",
					"line": 710,
					"name": "OplogReplay"
				},
				{
					"kind": "enum member",
					"line": 711,
					"name": "NoCursorTimeout"
				},
				{
					"kind": "enum member",
					"line": 712,
					"name": "AwaitData"
				},
				{
					"kind": "enum member",
					"line": 713,
					"name": "Exhaust"
				},
				{
					"kind": "enum member",
					"line": 714,
					"name": "Partial"
				}
			],
			"baseDeco": "i",
			"name": "QueryFlags"
		},
		{
			"kind": "enum",
			"line": 717,
			"members": [
				{
					"kind": "enum member",
					"line": 718,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 719,
					"name": "SingleRemove"
				}
			],
			"baseDeco": "i",
			"name": "DeleteFlags"
		},
		{
			"kind": "enum",
			"line": 722,
			"members": [
				{
					"kind": "enum member",
					"line": 723,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 724,
					"name": "CursorNotFound"
				},
				{
					"kind": "enum member",
					"line": 725,
					"name": "QueryFailure"
				},
				{
					"kind": "enum member",
					"line": 726,
					"name": "ShardConfigStale"
				},
				{
					"kind": "enum member",
					"line": 727,
					"name": "AwaitCapable"
				}
			],
			"baseDeco": "i",
			"name": "ReplyFlags"
		},
		{
			"kind": "class",
			"line": 731,
			"members": [
				{
					"kind": "variable",
					"line": 732,
					"deco": "l",
					"name": "cursor",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 733,
					"deco": "E4vibe2db5mongo10connection10ReplyFlags",
					"name": "flags",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 734,
					"deco": "i",
					"name": "firstDocument",
					"offset": 20
				},
				{
					"kind": "variable",
					"line": 735,
					"deco": "AS4vibe4data4bson4Bson",
					"name": "documents",
					"offset": 24
				}
			],
			"name": "Reply",
			"comment": " [internal]\n"
		},
		{
			"kind": "class",
			"line": 758,
			"members": [
				{
					"kind": "variable",
					"line": 759,
					"deco": "Aya",
					"name": "username",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 760,
					"deco": "Aya",
					"name": "digest",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 761,
					"deco": "AS4vibe2db5mongo10connection9MongoHost",
					"name": "hosts",
					"offset": 24
				},
				{
					"kind": "variable",
					"line": 762,
					"deco": "Aya",
					"name": "database",
					"offset": 32
				},
				{
					"kind": "variable",
					"line": 763,
					"init": "cast(QueryFlags)0",
					"deco": "E4vibe2db5mongo10connection10QueryFlags",
					"name": "defQueryFlags",
					"offset": 40
				},
				{
					"kind": "variable",
					"line": 764,
					"deco": "Aya",
					"name": "replicaSet",
					"offset": 44
				},
				{
					"kind": "variable",
					"line": 765,
					"deco": "b",
					"name": "safe",
					"offset": 52
				},
				{
					"kind": "variable",
					"line": 766,
					"deco": "S4vibe4data4bson4Bson",
					"name": "w",
					"offset": 56
				},
				{
					"kind": "variable",
					"line": 767,
					"deco": "l",
					"name": "wTimeoutMS",
					"offset": 68
				},
				{
					"kind": "variable",
					"line": 768,
					"deco": "b",
					"name": "fsync",
					"offset": 76
				},
				{
					"kind": "variable",
					"line": 769,
					"deco": "b",
					"name": "journal",
					"offset": 77
				},
				{
					"kind": "variable",
					"line": 770,
					"deco": "l",
					"name": "connectTimeoutMS",
					"offset": 80
				},
				{
					"kind": "variable",
					"line": 771,
					"deco": "l",
					"name": "socketTimeoutMS",
					"offset": 88
				},
				{
					"kind": "function",
					"line": 773,
					"storageClass": [
						"static"
					],
					"deco": "FAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "username"
						},
						{
							"deco": "Aya",
							"name": "password"
						}
					],
					"name": "makeDigest",
					"endline": 776
				}
			],
			"name": "MongoClientSettings",
			"comment": " [internal]\n"
		}
	],
	"name": "vibe.db.mongo.connection",
	"comment": "\n\tLow level mongodb protocol.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/db/mongo/collection.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.db.mongo.cursor"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.db.mongo.connection"
		},
		{
			"kind": "struct",
			"line": 53,
			"members": [
				{
					"kind": "constructor",
					"line": 61,
					"deco": "FNcC4vibe2db5mongo6client11MongoClientAyaZS4vibe2db5mongo10collection15MongoCollection",
					"parameters": [
						{
							"deco": "C4vibe2db5mongo6client11MongoClient",
							"name": "client"
						},
						{
							"deco": "Aya",
							"name": "fullPath"
						}
					],
					"name": "this",
					"originalType": "(MongoClient client, string fullPath)",
					"endline": 72
				},
				{
					"kind": "constructor",
					"line": 74,
					"deco": "FNcKS4vibe2db5mongo8database13MongoDatabaseAyaZS4vibe2db5mongo10collection15MongoCollection",
					"parameters": [
						{
							"deco": "S4vibe2db5mongo8database13MongoDatabase",
							"storageClass": [
								"ref"
							],
							"name": "db"
						},
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "this",
					"originalType": "(ref MongoDatabase db, string name)",
					"endline": 81
				},
				{
					"kind": "function",
					"line": 86,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZS4vibe2db5mongo8database13MongoDatabase",
					"name": "database",
					"comment": "\n\t  Returns: Root database to which this collection belongs.\n\t \n",
					"originalType": "MongoDatabase()",
					"endline": 86
				},
				{
					"kind": "function",
					"line": 91,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "name",
					"comment": "\n\t  Returns: Name of this collection (excluding the database name).\n\t \n",
					"originalType": "const string()",
					"endline": 91
				},
				{
					"kind": "template",
					"line": 99,
					"members": [
						{
							"kind": "function",
							"line": 99,
							"type": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
							"parameters": [
								{
									"type": "T",
									"name": "selector"
								},
								{
									"type": "U",
									"name": "update"
								},
								{
									"default": "UpdateFlags.None",
									"type": "UpdateFlags",
									"name": "flags"
								}
							],
							"name": "update",
							"comment": "\n\t  Performs an update operation on documents matching 'selector', updating them with 'update'.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t \n",
							"endline": 103
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "U"
						}
					],
					"comment": "\n\t  Performs an update operation on documents matching 'selector', updating them with 'update'.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t \n",
					"name": "update"
				},
				{
					"kind": "template",
					"line": 111,
					"members": [
						{
							"kind": "function",
							"line": 111,
							"type": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
							"parameters": [
								{
									"type": "T",
									"name": "document_or_documents"
								},
								{
									"default": "InsertFlags.None",
									"type": "InsertFlags",
									"name": "flags"
								}
							],
							"name": "insert",
							"comment": "\n\t  Inserts new documents into the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t \n",
							"endline": 119
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t  Inserts new documents into the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t \n",
					"name": "insert"
				},
				{
					"kind": "template",
					"line": 129,
					"members": [
						{
							"kind": "function",
							"line": 129,
							"type": "MongoCursor(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								},
								{
									"type": "U",
									"name": "returnFieldSelector"
								},
								{
									"default": "QueryFlags.None",
									"type": "QueryFlags",
									"name": "flags"
								},
								{
									"deco": "i",
									"default": "0",
									"name": "num_skip"
								},
								{
									"deco": "i",
									"default": "0",
									"name": "num_docs_per_chunk"
								}
							],
							"name": "find",
							"comment": "\n\t  Queries the collection for existing documents.\n\n\t  If no arguments are passed to find(), all documents of the collection will be returned.\n\n\t  Throws: Exception if a DB communication error or a query error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t \n",
							"endline": 138
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "U"
						}
					],
					"comment": "\n\t  Queries the collection for existing documents.\n\n\t  If no arguments are passed to find(), all documents of the collection will be returned.\n\n\t  Throws: Exception if a DB communication error or a query error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t \n",
					"name": "find"
				},
				{
					"kind": "template",
					"line": 141,
					"members": [
						{
							"kind": "function",
							"line": 141,
							"type": "MongoCursor(T query)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								}
							],
							"name": "find",
							"comment": " ditto\n",
							"endline": 141
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "find"
				},
				{
					"kind": "template",
					"line": 144,
					"members": [
						{
							"kind": "function",
							"line": 144,
							"type": "MongoCursor()",
							"name": "find",
							"comment": " ditto\n",
							"endline": 144
						}
					],
					"parameters": [],
					"comment": " ditto\n",
					"name": "find"
				},
				{
					"kind": "template",
					"line": 153,
					"members": [
						{
							"kind": "function",
							"line": 153,
							"type": "Bson(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								},
								{
									"type": "U",
									"name": "returnFieldSelector"
								},
								{
									"default": "QueryFlags.None",
									"type": "QueryFlags",
									"name": "flags"
								}
							],
							"name": "findOne",
							"comment": "\n\t  Queries the collection for existing documents.\n\n\t  Returns: the first match or null\n\t  Throws: Exception if a DB communication error or a query error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t \n",
							"endline": 158
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "U"
						}
					],
					"comment": "\n\t  Queries the collection for existing documents.\n\n\t  Returns: the first match or null\n\t  Throws: Exception if a DB communication error or a query error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t \n",
					"name": "findOne"
				},
				{
					"kind": "template",
					"line": 160,
					"members": [
						{
							"kind": "function",
							"line": 160,
							"type": "Bson(T query)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								}
							],
							"name": "findOne",
							"comment": " ditto\n",
							"endline": 165
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " ditto\n",
					"name": "findOne"
				},
				{
					"kind": "template",
					"line": 173,
					"members": [
						{
							"kind": "function",
							"line": 173,
							"type": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
							"parameters": [
								{
									"type": "T",
									"name": "selector"
								},
								{
									"default": "DeleteFlags.None",
									"type": "DeleteFlags",
									"name": "flags"
								}
							],
							"name": "remove",
							"comment": "\n\t  Removes documents from the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t \n",
							"endline": 177
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t  Removes documents from the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t \n",
					"name": "remove"
				},
				{
					"kind": "template",
					"line": 180,
					"members": [
						{
							"kind": "function",
							"line": 180,
							"type": "void()",
							"name": "remove",
							"comment": " ditto\n",
							"endline": 180
						}
					],
					"parameters": [],
					"comment": " ditto\n",
					"name": "remove"
				},
				{
					"kind": "template",
					"line": 188,
					"members": [
						{
							"kind": "function",
							"line": 188,
							"type": "Bson(T query, U update, V returnFieldSelector)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								},
								{
									"type": "U",
									"name": "update"
								},
								{
									"type": "V",
									"name": "returnFieldSelector"
								}
							],
							"name": "findAndModify",
							"comment": "\n\t  Combines a modify and find operation to a single atomic operation.\n\n\t  Throws Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://docs.mongodb.org/manual/reference/command/findAndModify)\n\t \n",
							"endline": 199
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "U"
						},
						{
							"kind": "type",
							"name": "V"
						}
					],
					"comment": "\n\t  Combines a modify and find operation to a single atomic operation.\n\n\t  Throws Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://docs.mongodb.org/manual/reference/command/findAndModify)\n\t \n",
					"name": "findAndModify"
				},
				{
					"kind": "template",
					"line": 202,
					"members": [
						{
							"kind": "function",
							"line": 202,
							"type": "Bson(T query, U update)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								},
								{
									"type": "U",
									"name": "update"
								}
							],
							"name": "findAndModify",
							"comment": " ditto\n",
							"endline": 205
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						},
						{
							"kind": "type",
							"name": "U"
						}
					],
					"comment": " ditto\n",
					"name": "findAndModify"
				},
				{
					"kind": "template",
					"line": 213,
					"members": [
						{
							"kind": "function",
							"line": 213,
							"type": "ulong(T query)",
							"parameters": [
								{
									"type": "T",
									"name": "query"
								}
							],
							"name": "count",
							"comment": "\n\t  Counts the results of the specified query expression.\n\n\t  Throws Exception if a DB communication error occured.\nSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n\t \n",
							"endline": 222
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t  Counts the results of the specified query expression.\n\n\t  Throws Exception if a DB communication error occured.\nSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n\t \n",
					"name": "count"
				},
				{
					"kind": "function",
					"line": 224,
					"deco": "FHAyaiE4vibe2db5mongo10collection10IndexFlagsZv",
					"parameters": [
						{
							"deco": "HAyai",
							"name": "field_orders"
						},
						{
							"deco": "E4vibe2db5mongo10collection10IndexFlags",
							"default": "cast(IndexFlags)0",
							"name": "flags"
						}
					],
					"name": "ensureIndex",
					"originalType": "void(int[string] field_orders, IndexFlags flags = IndexFlags.None)",
					"endline": 248
				},
				{
					"kind": "function",
					"line": 250,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "dropIndex",
					"endline": 253
				}
			],
			"name": "MongoCollection",
			"comment": "\n  Represents a single collection inside a MongoDB.\n\n  All methods take arbitrary types for Bson arguments. serializeToBson() is implicitly called on\n  them before they are send to the database. The following example shows some possible ways\n  to specify objects.\n\nExamples:\n\n---\nMongoClient client = connectMongoDB(\"127.0.0.1\");\nMongoCollection users = client.getCollection(\"myapp.users\");\n\n// canonical version using a Bson object\nusers.insert(Bson([\"name\": Bson(\"admin\"), \"password\": Bson(\"secret\")]));\n\n// short version using a string[string] AA that is automatically\n// serialized to Bson\nusers.insert([\"name\": \"admin\", \"password\": \"secret\"]);\n\n// BSON specific types are also serialized automatically\nBsonObjectId uid = ...;\nBson usr = users.find([\"_id\": uid]);\n\n// JSON is another possibility\nJson jusr = parseJson(\"{\\\"name\\\": \\\"admin\\\", \\\"password\\\": \\\"secret\\\"}\");\nusers.insert(jusr);\n---\n \n"
		},
		{
			"kind": "enum",
			"line": 256,
			"members": [
				{
					"kind": "enum member",
					"line": 257,
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 258,
					"name": "Unique"
				},
				{
					"kind": "enum member",
					"line": 259,
					"name": "DropDuplicates"
				},
				{
					"kind": "enum member",
					"line": 260,
					"name": "Background"
				},
				{
					"kind": "enum member",
					"line": 261,
					"name": "Sparse"
				}
			],
			"baseDeco": "i",
			"name": "IndexFlags"
		}
	],
	"name": "vibe.db.mongo.collection",
	"comment": "\n\tMongoCollection class\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/internal/win32.d",
	"members": [],
	"name": "vibe.internal.win32",
	"comment": " [internal]\n"
},
{
	"kind": "module",
	"file": "source/vibe/internal/std/process.d",
	"members": [
		{
			"kind": "function",
			"line": 314,
			"deco": "FNexAAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAAa",
					"name": "args"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdin",
					"name": "stdin"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdout",
					"name": "stdout"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stderr",
					"name": "stderr"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnProcess",
			"comment": "\nSpawns a new _process, optionally assigning it an arbitrary set of standard\ninput, output, and error streams.\n\nThe function returns immediately, leaving the child _process to execute\nin parallel with its parent.  It is recommended to always call $(LREF wait)\non the returned $(LREF Pid), as detailed in the documentation for $(D wait).\n\nCommand_line:\nThere are four overloads of this function.  The first two take an array\nof strings, $(D args), which should contain the program name as the\nzeroth element and any command-line arguments in subsequent elements.\nThe third and fourth versions are included for convenience, and may be\nused when there are no command-line arguments.  They take a single string,\n$(D program), which specifies the program name.\n\nUnless a directory is specified in $(D args[0]) or $(D program),\n$(D spawnProcess) will search for the program in a platform-dependent\nmanner.  On POSIX systems, it will look for the executable in the\ndirectories listed in the PATH environment variable, in the order\nthey are listed.  On Windows, it will search for the executable in\nthe following sequence:\n$(OL\n$(LI The directory from which the application loaded.)\n$(LI The current directory for the parent process.)\n$(LI The 32-bit Windows system directory.)\n$(LI The 16-bit Windows system directory.)\n$(LI The Windows directory.)\n$(LI The directories listed in the PATH environment variable.)\n)\n---\n// Run an executable called \"prog\" located in the current working\n// directory:\nauto pid = spawnProcess(\"./prog\");\nscope(exit) wait(pid);\n// We can do something else while the program runs.  The scope guard\n// ensures that the process is waited for at the end of the scope.\n...\n\n// Run DMD on the file \"myprog.d\", specifying a few compiler switches:\nauto dmdPid = spawnProcess([\"dmd\", \"-O\", \"-release\", \"-inline\", \"myprog.d\" ]);\nif (wait(dmdPid) != 0)\nwriteln(\"Compilation failed!\");\n---\n\nEnvironment_variables:\nBy default, the child process inherits the environment of the parent\nprocess, along with any additional variables specified in the $(D env)\nparameter.  If the same variable exists in both the parent's environment\nand in $(D env), the latter takes precedence.\n\nIf the $(LREF Config.newEnv) flag is set in $(D config), the child\nprocess will $(I not) inherit the parent's environment.  Its entire\nenvironment will then be determined by $(D env).\n---\nwait(spawnProcess(\"myapp\", [\"foo\" : \"bar\"], Config.newEnv));\n---\n\nStandard_streams:\nThe optional arguments $(D stdin), $(D stdout) and $(D stderr) may\nbe used to assign arbitrary $(XREF stdio,File) objects as the standard\ninput, output and error streams, respectively, of the child process.  The\nformer must be opened for reading, while the latter two must be opened for\nwriting.  The default is for the child process to inherit the standard\nstreams of its parent.\n---\n// Run DMD on the file myprog.d, logging any error messages to a\n// file named errors.log.\nauto logFile = File(\"errors.log\", \"w\");\nauto pid = spawnProcess([\"dmd\", \"myprog.d\"],\nstd.stdio.stdin,\nstd.stdio.stdout,\nlogFile);\nif (wait(pid) != 0)\nwriteln(\"Compilation failed. See errors.log for details.\");\n---\n\nNote that if you pass a $(D File) object that is $(I not)\none of the standard input/output/error streams of the parent process,\nthat stream will by default be $(I closed) in the parent process when\nthis function returns.  See the $(LREF Config) documentation below for\ninformation about how to disable this behaviour.\n\nBeware of buffering issues when passing $(D File) objects to\n$(D spawnProcess).  The child process will inherit the low-level raw\nread/write offset associated with the underlying file descriptor, but\nit will not be aware of any buffered data.  In cases where this matters\n(e.g. when a file should be aligned before being passed on to the\nchild process), it may be a good idea to use unbuffered streams, or at\nleast ensure all relevant buffers are flushed.\n\nParams:\nargs    = An array which contains the program name as the zeroth element\nand any command-line arguments in the following elements.\nprogram = The program name, $(I without) command-line arguments.\nstdin   = The standard input stream of the child process.\nThis can be any $(XREF stdio,File) that is opened for reading.\nBy default the child process inherits the parent's input\nstream.\nstdout  = The standard output stream of the child process.\nThis can be any $(XREF stdio,File) that is opened for writing.\nBy default the child process inherits the parent's output stream.\nstderr  = The standard error stream of the child process.\nThis can be any $(XREF stdio,File) that is opened for writing.\nBy default the child process inherits the parent's error stream.\nenv     = Additional environment variables for the child process.\nconfig  = Flags that control process creation. See $(LREF Config)\nfor an overview of available flags.\n\nReturns:\nA $(LREF Pid) object that corresponds to the spawned process.\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to pass one of the streams\nto the child process (Windows only).$(BR)\n$(CXREF exception,RangeError) if $(D args) is empty.\n",
			"originalType": "@trusted Pid(in char[][] args, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none)",
			"endline": 325
		},
		{
			"kind": "function",
			"line": 328,
			"deco": "FNexAAaxHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAAa",
					"name": "args"
				},
				{
					"deco": "xHAyaAya",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnProcess",
			"comment": " ditto\n",
			"originalType": "@trusted Pid(in char[][] args, const string[string] env, Config config = Config.none)",
			"endline": 339
		},
		{
			"kind": "function",
			"line": 342,
			"deco": "FNexAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAa",
					"name": "program"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdin",
					"name": "stdin"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdout",
					"name": "stdout"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stderr",
					"name": "stderr"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnProcess",
			"comment": " ditto\n",
			"originalType": "@trusted Pid(in char[] program, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none)",
			"endline": 352
		},
		{
			"kind": "function",
			"line": 355,
			"deco": "FNexAaxHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAa",
					"name": "program"
				},
				{
					"deco": "xHAyaAya",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnProcess",
			"comment": " ditto\n",
			"originalType": "@trusted Pid(in char[] program, const string[string] env, Config config = Config.none)",
			"endline": 361
		},
		{
			"kind": "function",
			"line": 695,
			"deco": "FNexAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAa",
					"name": "command"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdin",
					"name": "stdin"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stdout",
					"name": "stdout"
				},
				{
					"deco": "S3std5stdio4File",
					"default": "stderr",
					"name": "stderr"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnShell",
			"comment": "\nA variation on $(LREF spawnProcess) that runs the given _command through\nthe current user's preferred _command interpreter (aka. shell).\n\nThe string $(D command) is passed verbatim to the shell, and is therefore\nsubject to its rules about _command structure, argument/filename quoting\nand escaping of special characters.\nThe path to the shell executable is determined by the $(LREF userShell)\nfunction.\n\nIn all other respects this function works just like $(D spawnProcess).\nPlease refer to the $(LREF spawnProcess) documentation for descriptions\nof the other function parameters, the return value and any exceptions\nthat may be thrown.\n---\n// Run the command/program \"foo\" on the file named \"my file.txt\", and\n// redirect its output into foo.log.\nauto pid = spawnShell(`foo \"my file.txt\" > foo.log`);\nwait(pid);\n---\n\nSee_also:\n$(LREF escapeShellCommand), which may be helpful in constructing a\nproperly quoted and escaped shell _command line for the current platform.\n",
			"originalType": "@trusted Pid(in char[] command, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none)",
			"endline": 716
		},
		{
			"kind": "function",
			"line": 719,
			"deco": "FNexAaxHAyaAyaE4vibe8internal3std7process6ConfigZC4vibe8internal3std7process3Pid",
			"parameters": [
				{
					"deco": "xAa",
					"name": "command"
				},
				{
					"deco": "xHAyaAya",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "spawnShell",
			"comment": " ditto\n",
			"originalType": "@trusted Pid(in char[] command, const string[string] env, Config config = Config.none)",
			"endline": 730
		},
		{
			"kind": "enum",
			"line": 757,
			"members": [
				{
					"kind": "enum member",
					"line": 758,
					"name": "none"
				},
				{
					"kind": "enum member",
					"line": 766,
					"name": "newEnv",
					"comment": "\n    By default, the child process inherits the parent's environment,\n    and any environment variables passed to $(LREF spawnProcess) will\n    be added to it.  If this flag is set, the only variables in the\n    child process' environment will be those given to spawnProcess.\n    \n"
				},
				{
					"kind": "enum member",
					"line": 775,
					"name": "retainStdin",
					"comment": "\n    Unless the child process inherits the standard input/output/error\n    streams of its parent, one almost always wants the streams closed\n    in the parent when $(LREF spawnProcess) returns.  Therefore, by\n    default, this is done.  If this is not desirable, pass any of these\n    options to spawnProcess.\n    \n"
				},
				{
					"kind": "enum member",
					"line": 776,
					"name": "retainStdout",
					"comment": " ditto\n"
				},
				{
					"kind": "enum member",
					"line": 777,
					"name": "retainStderr",
					"comment": " ditto\n"
				},
				{
					"kind": "enum member",
					"line": 784,
					"name": "suppressConsole",
					"comment": "\n    On Windows, if the child process is a console application, this\n    flag will prevent the creation of a console window.  Otherwise,\n    it will be ignored. On POSIX, $(D suppressConsole) has no effect.\n    \n"
				},
				{
					"kind": "enum member",
					"line": 795,
					"name": "inheritFDs",
					"comment": "\n    On POSIX, open $(LINK2 http://en.wikipedia.org/wiki/File_descriptor,file descriptors)\n    are by default inherited by the child process.  As this may lead\n    to subtle bugs when pipes or multiple threads are involved,\n    $(LREF spawnProcess) ensures that all file descriptors except the\n    ones that correspond to standard input/output/error are closed\n    in the child process when it starts.  Use $(D inheritFDs) to prevent\n    this.  On Windows, this option has no effect.\n    \n"
				}
			],
			"baseDeco": "i",
			"name": "Config",
			"comment": "\nFlags that control the behaviour of $(LREF spawnProcess) and\n$(LREF spawnShell).\n\nUse bitwise OR to combine flags.\n\nExample:\n---\nauto logFile = File(\"myapp_error.log\", \"w\");\n\n// Start program, suppressing the console window (Windows only),\n// redirect its error stream to logFile, and leave logFile open\n// in the parent process as well.\nauto pid = spawnProcess(\"myapp\", stdin, stdout, logFile,\nConfig.retainStderr | Config.suppressConsole);\nscope(exit)\n{\nauto exitCode = wait(pid);\nlogFile.writeln(\"myapp exited with code \", exitCode);\nlogFile.close();\n}\n---\n"
		},
		{
			"kind": "class",
			"line": 801,
			"members": [
				{
					"kind": "function",
					"line": 810,
					"storageClass": [
						"@property"
					],
					"deco": "xFNaNbNdNfZi",
					"name": "processID",
					"comment": "\n    The process ID number.\n\n    This is a number that uniquely identifies the process on the operating\n    system, for at least as long as the process is running.  Once $(LREF wait)\n    has been called on the $(LREF Pid), this method will return an\n    invalid process ID.\n    \n",
					"originalType": "const pure nothrow @safe int()",
					"endline": 813
				},
				{
					"kind": "function",
					"line": 833,
					"storageClass": [
						"@property"
					],
					"deco": "FNaNbNdNfZi",
					"name": "osHandle",
					"comment": "\n    An operating system handle to the process.\n\n    This handle is used to specify the process in OS-specific APIs.\n    On POSIX, this function returns a $(D core.sys.posix.sys.types.pid_t)\n    with the same value as $(LREF Pid.processID), while on Windows it returns\n    a $(D core.sys.windows.windows.HANDLE).\n\n    Once $(LREF wait) has been called on the $(LREF Pid), this method\n    will return an invalid handle.\n    \n",
					"originalType": "pure nothrow @safe pid_t()",
					"endline": 836
				}
			],
			"name": "Pid",
			"comment": " A handle that corresponds to a spawned process.\n"
		},
		{
			"kind": "function",
			"line": 991,
			"deco": "FNfC4vibe8internal3std7process3PidZi",
			"parameters": [
				{
					"deco": "C4vibe8internal3std7process3Pid",
					"name": "pid"
				}
			],
			"name": "wait",
			"comment": "\nWaits for the process associated with $(D pid) to terminate, and returns\nits exit status.\n\nIn general one should always _wait for child processes to terminate\nbefore exiting the parent process.  Otherwise, they may become\n\"$(WEB en.wikipedia.org/wiki/Zombie_process,zombies)\" – processes\nthat are defunct, yet still occupy a slot in the OS process table.\n\nIf the process has already terminated, this function returns directly.\nThe exit code is cached, so that if wait() is called multiple times on\nthe same $(LREF Pid) it will always return the same value.\n\nPOSIX_specific:\nIf the process is terminated by a signal, this function returns a\nnegative number whose absolute value is the signal number.\nSince POSIX restricts normal exit codes to the range 0-255, a\nnegative return value will always indicate termination by signal.\nSignal codes are defined in the $(D core.sys.posix.signal) module\n(which corresponds to the $(D signal.h) POSIX header).\n\nThrows:\n$(LREF ProcessException) on failure.\n\nExamples:\nSee the $(LREF spawnProcess) documentation.\n\nSee_also:\n$(LREF tryWait), for a non-blocking function.\n",
			"endline": 995
		},
		{
			"kind": "function",
			"line": 1046,
			"storageClass": [
				"auto"
			],
			"deco": "FNfC4vibe8internal3std7process3PidZS4vibe8internal3std7process7tryWaitFNfC4vibe8internal3std7process3PidZ13TryWaitResult",
			"parameters": [
				{
					"deco": "C4vibe8internal3std7process3Pid",
					"name": "pid"
				}
			],
			"name": "tryWait",
			"comment": "\nA non-blocking version of $(LREF wait).\n\nIf the process associated with $(D pid) has already terminated,\n$(D tryWait) has the exact same effect as $(D wait).\nIn this case, it returns a struct where the $(D terminated) field\nis set to $(D true) and the $(D status) field has the same\ninterpretation as the return value of $(D wait).\n\nIf the process has $(I not) yet terminated, this function differs\nfrom $(D wait) in that does not wait for this to happen, but instead\nreturns immediately.  The $(D terminated) field of the returned\ntuple will then be set to $(D false), while the $(D status) field\nwill always be 0 (zero).  $(D wait) or $(D tryWait) should then be\ncalled again on the same $(D Pid) at some later time; not only to\nget the exit code, but also to avoid the process becoming a \"zombie\"\nwhen it finally terminates.  (See $(LREF wait) for details).\n\nReturns:\nA $(D struct) which contains the fields $(D bool terminated)\nand $(D int status).  (This will most likely change to become a\n$(D std.typecons.Tuple!(bool,\"terminated\",int,\"status\")) in the future,\nbut a compiler bug currently prevents this.)\n\nThrows:\n$(LREF ProcessException) on failure.\n\nExample:\n---\nauto pid = spawnProcess(\"dmd myapp.d\");\nscope(exit) wait(pid);\n...\nauto dmd = tryWait(pid);\nif (dmd.terminated)\n{\nif (dmd.status == 0) writeln(\"Compilation succeeded!\");\nelse writeln(\"Compilation failed\");\n}\nelse writeln(\"Still compiling...\");\n...\n---\nNote that in this example, the first $(D wait) call will have no\neffect if the process has already terminated by the time $(D tryWait)\nis called.  In the opposite case, however, the $(D scope) statement\nensures that we always wait for the process if it hasn't terminated\nby the time we reach the end of the scope.\n",
			"originalType": "@safe (Pid pid)",
			"endline": 1055
		},
		{
			"kind": "function",
			"line": 1114,
			"deco": "FC4vibe8internal3std7process3PidZv",
			"parameters": [
				{
					"deco": "C4vibe8internal3std7process3Pid",
					"name": "pid"
				}
			],
			"name": "kill",
			"comment": "\nAttempts to terminate the process associated with $(D pid).\n\nThe effect of this function, as well as the meaning of $(D codeOrSignal),\nis highly platform dependent.  Details are given below.  Common to all\nplatforms is that this function only $(I initiates) termination of the process,\nand returns immediately.  It does not wait for the process to end,\nnor does it guarantee that the process does in fact get terminated.\n\nAlways call $(LREF wait) to wait for a process to complete, even if $(D kill)\nhas been called on it.\n\nWindows_specific:\nThe process will be\n$(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx,\nforcefully and abruptly terminated).  If $(D codeOrSignal) is specified, it\nwill be used as the exit code of the process.  If not, the process wil exit\nwith code 1.  Do not use $(D codeOrSignal = 259), as this is a special value\n(aka. $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx,\nSTILL_ACTIVE)) used by Windows to signal that a process has in fact $(I not)\nterminated yet.\n---\nauto pid = spawnProcess(\"some_app\");\nkill(pid, 10);\nassert (wait(pid) == 10);\n---\n$(RED Warning:) The mechanisms for process termination are\n$(LINK2 http://blogs.msdn.com/b/oldnewthing/archive/2007/05/03/2383346.aspx,\nincredibly badly specified) in the Windows API.  This function may therefore\nproduce unexpected results, and should be used with the utmost care.\n\nPOSIX_specific:\nA $(LINK2 http://en.wikipedia.org/wiki/Unix_signal,signal) will be sent to\nthe process, whose value is given by $(D codeOrSignal).  Depending on the\nsignal sent, this may or may not terminate the process.  Symbolic constants\nfor various $(LINK2 http://en.wikipedia.org/wiki/Unix_signal#POSIX_signals,\nPOSIX signals) are defined in $(D core.sys.posix.signal), which corresponds to the\n$(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html,\n$(D signal.h) POSIX header).  If $(D codeOrSignal) is omitted, the\n$(D SIGTERM) signal will be sent.  (This matches the behaviour of the\n$(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/kill.html,\n$(D _kill)) shell command.)\n---\nimport core.sys.posix.signal: SIGKILL;\nauto pid = spawnProcess(\"some_app\");\nkill(pid, SIGKILL);\nassert (wait(pid) == -SIGKILL); // Negative return value on POSIX!\n---\n\nThrows:\n$(LREF ProcessException) if the operating system reports an error.\n(Note that this does not include failure to terminate the process,\nwhich is considered a \"normal\" outcome.)$(BR)\n$(OBJECTREF Error) if $(D codeOrSignal) is negative.\n",
			"endline": 1122
		},
		{
			"kind": "function",
			"line": 1125,
			"deco": "FC4vibe8internal3std7process3PidiZv",
			"parameters": [
				{
					"deco": "C4vibe8internal3std7process3Pid",
					"name": "pid"
				},
				{
					"deco": "i",
					"name": "codeOrSignal"
				}
			],
			"name": "kill",
			"comment": " ditto\n",
			"endline": 1149
		},
		{
			"kind": "function",
			"line": 1187,
			"deco": "FNeZS4vibe8internal3std7process4Pipe",
			"name": "pipe",
			"comment": "\nCreates a unidirectional _pipe.\n\nData is written to one end of the _pipe and read from the other.\n---\nauto p = pipe();\np.writeEnd.writeln(\"Hello World\");\nassert (p.readEnd.readln().chomp() == \"Hello World\");\n---\nPipes can, for example, be used for interprocess communication\nby spawning a new process and passing one end of the _pipe to\nthe child, while the parent uses the other end.\n(See also $(LREF pipeProcess) and $(LREF pipeShell) for an easier\nway of doing this.)\n---\n// Use cURL to download the dlang.org front page, pipe its\n// output to grep to extract a list of links to ZIP files,\n// and write the list to the file \"D downloads.txt\":\nauto p = pipe();\nauto outFile = File(\"D downloads.txt\", \"w\");\nauto cpid = spawnProcess([\"curl\", \"http://dlang.org/download.html\"],\nstd.stdio.stdin, p.writeEnd);\nscope(exit) wait(cpid);\nauto gpid = spawnProcess([\"grep\", \"-o\", `http://\\S*\\.zip`],\np.readEnd, outFile);\nscope(exit) wait(gpid);\n---\n\nReturns:\nA $(LREF Pipe) object that corresponds to the created _pipe.\n\nThrows:\n$(XREF stdio,StdioException) on failure.\n",
			"endline": 1202
		},
		{
			"kind": "struct",
			"line": 1284,
			"members": [
				{
					"kind": "function",
					"line": 1286,
					"storageClass": [
						"@property"
					],
					"deco": "FNdNeZS3std5stdio4File",
					"name": "readEnd",
					"comment": " The read end of the pipe.\n",
					"originalType": "@trusted File()",
					"endline": 1286
				},
				{
					"kind": "function",
					"line": 1290,
					"storageClass": [
						"@property"
					],
					"deco": "FNdNeZS3std5stdio4File",
					"name": "writeEnd",
					"comment": " The write end of the pipe.\n",
					"originalType": "@trusted File()",
					"endline": 1290
				},
				{
					"kind": "function",
					"line": 1304,
					"deco": "FNeZv",
					"name": "close",
					"comment": "\n    Closes both ends of the pipe.\n\n    Normally it is not necessary to do this manually, as $(XREF stdio,File)\n    objects are automatically closed when there are no more references\n    to them.\n\n    Note that if either end of the pipe has been passed to a child process,\n    it will only be closed in the parent process.  (What happens in the\n    child process is platform dependent.)\n    \n",
					"endline": 1308
				},
				{
					"kind": "destructor",
					"line": 1284,
					"deco": "FZv",
					"name": "~this"
				},
				{
					"kind": "function",
					"line": 1284,
					"deco": "FNcS4vibe8internal3std7process4PipeZS4vibe8internal3std7process4Pipe",
					"parameters": [
						{
							"deco": "S4vibe8internal3std7process4Pipe",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "Pipe",
			"comment": " An interface to a pipe created by the $(LREF pipe) function.\n"
		},
		{
			"kind": "function",
			"line": 1374,
			"deco": "FNeAAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipes",
			"parameters": [
				{
					"deco": "AAya",
					"name": "args"
				},
				{
					"deco": "E4vibe8internal3std7process8Redirect",
					"default": "cast(Redirect)7",
					"name": "redirectFlags"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "pipeProcess",
			"comment": "\nStarts a new process, creating pipes to redirect its standard\ninput, output and/or error streams.\n\n$(D pipeProcess) and $(D pipeShell) are convenient wrappers around\n$(LREF spawnProcess) and $(LREF spawnShell), respectively, and\nautomate the task of redirecting one or more of the child process'\nstandard streams through pipes.  Like the functions they wrap,\nthese functions return immediately, leaving the child process to\nexecute in parallel with the invoking process.  It is recommended\nto always call $(LREF wait) on the returned $(LREF ProcessPipes.pid),\nas detailed in the documentation for $(D wait).\n\nThe $(D args)/$(D program)/$(D command), $(D env) and $(D config)\nparameters are forwarded straight to the underlying spawn functions,\nand we refer to their documentation for details.\n\nParams:\nargs     = An array which contains the program name as the zeroth element\nand any command-line arguments in the following elements.\n(See $(LREF spawnProcess) for details.)\nprogram  = The program name, $(I without) command-line arguments.\n(See $(LREF spawnProcess) for details.)\ncommand  = A shell command which is passed verbatim to the command\ninterpreter.  (See $(LREF spawnShell) for details.)\nredirect = Flags that determine which streams are redirected, and\nhow.  See $(LREF Redirect) for an overview of available\nflags.\nenv      = Additional environment variables for the child process.\n(See $(LREF spawnProcess) for details.)\nconfig   = Flags that control process creation. See $(LREF Config)\nfor an overview of available flags, and note that the\n$(D retainStd...) flags have no effect in this function.\n\nReturns:\nA $(LREF ProcessPipes) object which contains $(XREF stdio,File)\nhandles that communicate with the redirected streams of the child\nprocess, along with a $(LREF Pid) object that corresponds to the\nspawned process.\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to redirect any of the streams.$(BR)\n$(OBJECTREF Error) if $(D redirectFlags) is an invalid combination of flags.\n\nExample:\n---\nauto pipes = pipeProcess(\"my_application\", Redirect.stdout | Redirect.stderr);\nscope(exit) wait(pipes.pid);\n\n// Store lines of output.\nstring[] output;\nforeach (line; pipes.stdout.byLine) output ~= line.idup;\n\n// Store lines of errors.\nstring[] errors;\nforeach (line; pipes.stderr.byLine) errors ~= line.idup;\n---\n",
			"originalType": "@trusted ProcessPipes(string[] args, Redirect redirectFlags = Redirect.all, const string[string] env = null, Config config = Config.none)",
			"endline": 1381
		},
		{
			"kind": "function",
			"line": 1384,
			"deco": "FNeAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipes",
			"parameters": [
				{
					"deco": "Aya",
					"name": "program"
				},
				{
					"deco": "E4vibe8internal3std7process8Redirect",
					"default": "cast(Redirect)7",
					"name": "redirectFlags"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "pipeProcess",
			"comment": " ditto\n",
			"originalType": "@trusted ProcessPipes(string program, Redirect redirectFlags = Redirect.all, const string[string] env = null, Config config = Config.none)",
			"endline": 1391
		},
		{
			"kind": "function",
			"line": 1394,
			"deco": "FNfAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipes",
			"parameters": [
				{
					"deco": "Aya",
					"name": "command"
				},
				{
					"deco": "E4vibe8internal3std7process8Redirect",
					"default": "cast(Redirect)7",
					"name": "redirectFlags"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				}
			],
			"name": "pipeShell",
			"comment": " ditto\n",
			"originalType": "@safe ProcessPipes(string command, Redirect redirectFlags = Redirect.all, const string[string] env = null, Config config = Config.none)",
			"endline": 1401
		},
		{
			"kind": "enum",
			"line": 1486,
			"members": [
				{
					"kind": "enum member",
					"line": 1488,
					"name": "stdin",
					"comment": " Redirect the standard input, output or error streams, respectively.\n"
				},
				{
					"kind": "enum member",
					"line": 1489,
					"name": "stdout",
					"comment": " ditto\n"
				},
				{
					"kind": "enum member",
					"line": 1490,
					"name": "stderr",
					"comment": " ditto\n"
				},
				{
					"kind": "enum member",
					"line": 1496,
					"name": "all",
					"comment": "\n    Redirect _all three streams.  This is equivalent to\n    $(D Redirect.stdin | Redirect.stdout | Redirect.stderr).\n    \n"
				},
				{
					"kind": "enum member",
					"line": 1502,
					"name": "stderrToStdout",
					"comment": "\n    Redirect the standard error stream into the standard output stream.\n    This can not be combined with $(D Redirect.stderr).\n    \n"
				},
				{
					"kind": "enum member",
					"line": 1508,
					"name": "stdoutToStderr",
					"comment": "\n    Redirect the standard output stream into the standard error stream.\n    This can not be combined with $(D Redirect.stdout).\n    \n"
				}
			],
			"baseDeco": "i",
			"name": "Redirect",
			"comment": "\nFlags that can be passed to $(LREF pipeProcess) and $(LREF pipeShell)\nto specify which of the child process' standard streams are redirected.\nUse bitwise OR to combine flags.\n"
		},
		{
			"kind": "struct",
			"line": 1517,
			"members": [
				{
					"kind": "function",
					"line": 1519,
					"storageClass": [
						"@property"
					],
					"deco": "FNbNdNfZC4vibe8internal3std7process3Pid",
					"name": "pid",
					"comment": " The $(LREF Pid) of the child process.\n",
					"originalType": "nothrow @safe Pid()",
					"endline": 1523
				},
				{
					"kind": "function",
					"line": 1533,
					"storageClass": [
						"@property"
					],
					"deco": "FNdNeZS3std5stdio4File",
					"name": "stdin",
					"comment": "\n    An $(XREF stdio,File) that allows writing to the child process'\n    standard input stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard input stream hasn't\n    been redirected.\n    \n",
					"originalType": "@trusted File()",
					"endline": 1539
				},
				{
					"kind": "function",
					"line": 1549,
					"storageClass": [
						"@property"
					],
					"deco": "FNdNeZS3std5stdio4File",
					"name": "stdout",
					"comment": "\n    An $(XREF stdio,File) that allows reading from the child process'\n    standard output stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard output stream hasn't\n    been redirected.\n    \n",
					"originalType": "@trusted File()",
					"endline": 1555
				},
				{
					"kind": "function",
					"line": 1565,
					"storageClass": [
						"@property"
					],
					"deco": "FNdNeZS3std5stdio4File",
					"name": "stderr",
					"comment": "\n    An $(XREF stdio,File) that allows reading from the child process'\n    standard error stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard error stream hasn't\n    been redirected.\n    \n",
					"originalType": "@trusted File()",
					"endline": 1571
				},
				{
					"kind": "destructor",
					"line": 1517,
					"deco": "FZv",
					"name": "~this"
				},
				{
					"kind": "function",
					"line": 1517,
					"deco": "FNcS4vibe8internal3std7process12ProcessPipesZS4vibe8internal3std7process12ProcessPipes",
					"parameters": [
						{
							"deco": "S4vibe8internal3std7process12ProcessPipes",
							"name": "p"
						}
					],
					"name": "opAssign"
				}
			],
			"name": "ProcessPipes",
			"comment": "\nObject which contains $(XREF stdio,File) handles that allow communication\nwith a child process through its standard streams.\n"
		},
		{
			"kind": "function",
			"line": 1639,
			"storageClass": [
				"auto"
			],
			"deco": "FNeAAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZS4vibe8internal3std7process194__T11executeImplS168_D4vibe8internal3std7process11pipeProcessFNeAAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipesTAAyaZ11executeImplFAAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZ13ProcessOutput",
			"parameters": [
				{
					"deco": "AAya",
					"name": "args"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				},
				{
					"deco": "k",
					"default": "4294967295u",
					"name": "maxOutput"
				}
			],
			"name": "execute",
			"comment": "\nExecutes the given program or shell command and returns its exit\ncode and output.\n\n$(D execute) and $(D executeShell) start a new process using\n$(LREF spawnProcess) and $(LREF spawnShell), respectively, and wait\nfor the process to complete before returning.  The functions capture\nwhat the child process prints to both its standard output and\nstandard error streams, and return this together with its exit code.\n---\nauto dmd = execute(\"dmd\", \"myapp.d\");\nif (dmd.status != 0) writeln(\"Compilation failed:\\n\", dmd.output);\n\nauto ls = executeShell(\"ls -l\");\nif (ls.status == 0) writeln(\"Failed to retrieve file listing\");\nelse writeln(ls.output);\n---\n\nThe $(D args)/$(D program)/$(D command), $(D env) and $(D config)\nparameters are forwarded straight to the underlying spawn functions,\nand we refer to their documentation for details.\n\nParams:\nargs      = An array which contains the program name as the zeroth element\nand any command-line arguments in the following elements.\n(See $(LREF spawnProcess) for details.)\nprogram   = The program name, $(I without) command-line arguments.\n(See $(LREF spawnProcess) for details.)\ncommand   = A shell command which is passed verbatim to the command\ninterpreter.  (See $(LREF spawnShell) for details.)\nenv       = Additional environment variables for the child process.\n(See $(LREF spawnProcess) for details.)\nconfig    = Flags that control process creation. See $(LREF Config)\nfor an overview of available flags, and note that the\n$(D retainStd...) flags have no effect in this function.\nmaxOutput = The maximum number of bytes of output that should be\ncaptured.\n\nReturns:\nA $(D struct) which contains the fields $(D int status) and\n$(D string output).  (This will most likely change to become a\n$(D std.typecons.Tuple!(int,\"status\",bool,\"output\")) in the future,\nbut a compiler bug currently prevents this.)\n\nPOSIX_specific:\nIf the process is terminated by a signal, the $(D status) field of\nthe return value will contain a negative number whose absolute\nvalue is the signal number.  (See $(LREF wait) for details.)\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to capture output.\n",
			"originalType": "@trusted (string[] args, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max)",
			"endline": 1641
		},
		{
			"kind": "function",
			"line": 1649,
			"storageClass": [
				"auto"
			],
			"deco": "FNeAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZS4vibe8internal3std7process193__T11executeImplS168_D4vibe8internal3std7process11pipeProcessFNeAAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipesTAyaZ11executeImplFAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZ13ProcessOutput",
			"parameters": [
				{
					"deco": "Aya",
					"name": "program"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				},
				{
					"deco": "k",
					"default": "4294967295u",
					"name": "maxOutput"
				}
			],
			"name": "execute",
			"comment": " ditto\n",
			"originalType": "@trusted (string program, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max)",
			"endline": 1651
		},
		{
			"kind": "function",
			"line": 1659,
			"storageClass": [
				"auto"
			],
			"deco": "FNeAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZS4vibe8internal3std7process189__T11executeImplS164_D4vibe8internal3std7process9pipeShellFNfAyaE4vibe8internal3std7process8RedirectxHAyaAyaE4vibe8internal3std7process6ConfigZS4vibe8internal3std7process12ProcessPipesTAyaZ11executeImplFAyaxHAyaAyaE4vibe8internal3std7process6ConfigkZ13ProcessOutput",
			"parameters": [
				{
					"deco": "Aya",
					"name": "command"
				},
				{
					"deco": "xHAyaAya",
					"default": "null",
					"name": "env"
				},
				{
					"deco": "E4vibe8internal3std7process6Config",
					"default": "cast(Config)0",
					"name": "config"
				},
				{
					"deco": "k",
					"default": "4294967295u",
					"name": "maxOutput"
				}
			],
			"name": "executeShell",
			"comment": " ditto\n",
			"originalType": "@trusted (string command, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max)",
			"endline": 1661
		},
		{
			"kind": "class",
			"line": 1698,
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 1701,
					"deco": "FAyaAyakZC4vibe8internal3std7process16ProcessException",
					"parameters": [
						{
							"deco": "Aya",
							"name": "msg"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "k",
							"default": "cast(uint)__LINE__",
							"name": "line"
						}
					],
					"name": "this",
					"originalType": "(string msg, string file = __FILE__, size_t line = __LINE__)",
					"endline": 1704
				},
				{
					"kind": "function",
					"line": 1707,
					"storageClass": [
						"static"
					],
					"deco": "FAyaAyakZC4vibe8internal3std7process16ProcessException",
					"parameters": [
						{
							"deco": "Aya",
							"default": "null",
							"name": "customMsg"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "k",
							"default": "cast(uint)__LINE__",
							"name": "line"
						}
					],
					"name": "newFromErrno",
					"originalType": "ProcessException(string customMsg = null, string file = __FILE__, size_t line = __LINE__)",
					"endline": 1726
				}
			],
			"name": "ProcessException",
			"comment": " An exception that signals a problem with starting or waiting for a process.\n"
		},
		{
			"kind": "function",
			"line": 1752,
			"storageClass": [
				"@property"
			],
			"deco": "FNdNfZAya",
			"name": "userShell",
			"comment": "\nDetermines the path to the current user's default command interpreter.\n\nOn Windows, this function returns the contents of the COMSPEC environment\nvariable, if it exists.  Otherwise, it returns the string $(D \"cmd.exe\").\n\nOn POSIX, $(D userShell) returns the contents of the SHELL environment\nvariable, if it exists and is non-empty.  Otherwise, it returns\n$(D \"/bin/sh\").\n",
			"originalType": "@safe string()",
			"endline": 1756
		},
		{
			"kind": "function",
			"line": 1766,
			"storageClass": [
				"@property"
			],
			"deco": "FNdNeZi",
			"name": "thisProcessID",
			"comment": " Returns the process ID number of the current process.\n",
			"originalType": "@trusted int()",
			"endline": 1770
		},
		{
			"kind": "function",
			"line": 1820,
			"deco": "FxAAaXAya",
			"parameters": [
				{
					"deco": "xAAa",
					"name": "args"
				}
			],
			"name": "escapeShellCommand",
			"comment": "\nEscapes an argv-style argument array to be used with $(LREF spawnShell),\n$(LREF pipeShell) or $(LREF executeShell).\n---\nstring url = \"http://dlang.org/\";\nexecuteShell(escapeShellCommand(\"wget\", url, \"-O\", \"dlang-index.html\"));\n---\n\nConcatenate multiple $(D escapeShellCommand) and\n$(LREF escapeShellFileName) results to use shell redirection or\npiping operators.\n---\nexecuteShell(\nescapeShellCommand(\"curl\", \"http://dlang.org/download.html\") ~\n\"|\" ~\nescapeShellCommand(\"grep\", \"-o\", `http://\\S*\\.zip`) ~\n\">\" ~\nescapeShellFileName(\"D download links.txt\"));\n---\n\nThrows:\n$(OBJECTREF Error) if any part of the command line contains unescapable\ncharacters (NUL on all platforms, as well as CR and LF on Windows).\n",
			"originalType": "string(in char[][] args...)",
			"endline": 1824
		},
		{
			"kind": "function",
			"line": 1907,
			"deco": "FNaNbNexAaZAya",
			"parameters": [
				{
					"deco": "xAa",
					"name": "arg"
				}
			],
			"name": "escapeWindowsArgument",
			"comment": "\nQuotes a command-line argument in a manner conforming to the behavior of\n$(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx,\nCommandLineToArgvW).\n",
			"originalType": "pure nothrow @trusted string(in char[] arg)",
			"endline": 1915
		},
		{
			"kind": "function",
			"line": 2024,
			"deco": "FNaNbNexAaZAya",
			"parameters": [
				{
					"deco": "xAa",
					"name": "fileName"
				}
			],
			"name": "escapeShellFileName",
			"comment": "\nEscapes a filename to be used for shell redirection with $(LREF spawnShell),\n$(LREF pipeShell) or $(LREF shell).\n",
			"originalType": "pure nothrow @trusted string(in char[] fileName)",
			"endline": 2033
		},
		{
			"kind": "class",
			"line": 2049,
			"members": [
				{
					"kind": "function",
					"line": 2060,
					"storageClass": [
						"static"
					],
					"deco": "FNfAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndex",
					"comment": "\n    Retrieves the value of the environment variable with the given $(D name).\n\n    If no such variable exists, this function throws an $(D Exception).\n    See also $(LREF environment.get), which doesn't throw on failure.\n    ---\n    auto path = environment[\"PATH\"];\n    ---\n    \n",
					"endline": 2065
				},
				{
					"kind": "function",
					"line": 2088,
					"storageClass": [
						"static"
					],
					"deco": "FNfAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "defaultValue"
						}
					],
					"name": "get",
					"comment": "\n    Retrieves the value of the environment variable with the given $(D name),\n    or a default value if the variable doesn't exist.\n\n    Unlike $(LREF environment.opIndex), this function never throws.\n    ---\n    auto sh = environment.get(\"SHELL\", \"/bin/sh\");\n    ---\n    This function is also useful in checking for the existence of an\n    environment variable.\n    ---\n    auto myVar = environment.get(\"MYVAR\");\n    if (myVar is null)\n    {\n\t// Environment variable doesn't exist.\n\t// Note that we have to use 'is' for the comparison, since\n\t// myVar == null is also true if the variable exists but is\n\t// empty.\n    }\n    ---\n    \n",
					"endline": 2093
				},
				{
					"kind": "function",
					"line": 2105,
					"storageClass": [
						"static"
					],
					"deco": "FNeAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						},
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndexAssign",
					"comment": "\n    Assigns the given $(D value) to the environment variable with the given\n    $(D name).\n\n    If the variable does not exist, it will be created. If it already exists,\n    it will be overwritten.\n    ---\n    environment[\"foo\"] = \"bar\";\n    ---\n    \n",
					"endline": 2130
				},
				{
					"kind": "function",
					"line": 2138,
					"storageClass": [
						"static"
					],
					"deco": "FNeAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "remove",
					"comment": "\n    Removes the environment variable with the given $(D name).\n\n    If the variable isn't in the environment, this function returns\n    successfully without doing anything.\n    \n",
					"endline": 2143
				},
				{
					"kind": "function",
					"line": 2153,
					"storageClass": [
						"static"
					],
					"deco": "FNeZHAyaAya",
					"name": "toAA",
					"comment": "\n    Copies all environment variables into an associative array.\n\n    Windows_specific:\n    While Windows environment variable names are case insensitive, D's\n    built-in associative arrays are not.  This function will store all\n    variable names in uppercase (e.g. $(D PATH)).\n    \n",
					"endline": 2199
				}
			],
			"name": "environment",
			"comment": "\nManipulates _environment variables using an associative-array-like\ninterface.\n\nThis class contains only static methods, and cannot be instantiated.\nSee below for examples of use.\n"
		},
		{
			"kind": "function",
			"line": 2310,
			"deco": "FAyaZi",
			"parameters": [
				{
					"deco": "Aya",
					"name": "command"
				}
			],
			"name": "system",
			"comment": "\nExecute $(D command) in a _command shell.\n\n$(RED This function is scheduled for deprecation.  Please use\n$(LREF spawnShell) or $(LREF executeShell) instead.)\n\nReturns: If $(D command) is null, returns nonzero if the _command\ninterpreter is found, and zero otherwise. If $(D command) is not\nnull, returns -1 on error, or the exit status of command (which may\nin turn signal an error in command's execution).\n\nNote: On Unix systems, the homonym C function (which is accessible\nto D programs as $(LINK2 std_c_process.html, std.c._system))\nreturns a code in the same format as $(LUCKY waitpid, waitpid),\nmeaning that C programs must use the $(D WEXITSTATUS) macro to\nextract the actual exit code from the $(D system) call. D's $(D\nsystem) automatically extracts the exit status.\n\n",
			"endline": 2328
		},
		{
			"kind": "alias",
			"line": 2356,
			"name": "P_WAIT"
		},
		{
			"kind": "alias",
			"line": 2357,
			"name": "P_NOWAIT"
		},
		{
			"kind": "function",
			"line": 2359,
			"deco": "FiAyaAAyaZi",
			"parameters": [
				{
					"deco": "i",
					"name": "mode"
				},
				{
					"deco": "Aya",
					"name": "pathname"
				},
				{
					"deco": "AAya",
					"name": "argv"
				}
			],
			"name": "spawnvp",
			"endline": 2375
		},
		{
			"kind": "function",
			"line": 2381,
			"deco": "FixPaxPPaZi",
			"parameters": [
				{
					"deco": "i",
					"name": "mode"
				},
				{
					"deco": "xPa",
					"name": "pathname"
				},
				{
					"deco": "xPPa",
					"name": "argv"
				}
			],
			"name": "_spawnvp",
			"originalType": "int(int mode, in char* pathname, in char** argv)",
			"endline": 2430
		},
		{
			"kind": "function",
			"line": 2462,
			"deco": "FxAyaxAAyaZi",
			"parameters": [
				{
					"deco": "xAya",
					"name": "pathname"
				},
				{
					"deco": "xAAya",
					"name": "argv"
				}
			],
			"name": "execv",
			"comment": "\n Replace the current process by executing a command, $(D pathname), with\n the arguments in $(D argv).\n\n $(RED These functions are scheduled for deprecation.  Please use\n $(LREF spawnShell) instead (or, alternatively, the homonymous C\n functions declared in $(D std.c.process).))\n\n Typically, the first element of $(D argv) is\n the command being executed, i.e. $(D argv[0] == pathname). The 'p'\n versions of $(D exec) search the PATH environment variable for $(D\n pathname). The 'e' versions additionally take the new process'\n environment variables as an array of strings of the form key=value.\n\n Does not return on success (the current process will have been\n replaced). Returns -1 on failure with no indication of the\n underlying error.\n",
			"originalType": "int(in string pathname, in string[] argv)",
			"endline": 2469
		},
		{
			"kind": "function",
			"line": 2472,
			"deco": "FxAyaxAAyaxAAyaZi",
			"parameters": [
				{
					"deco": "xAya",
					"name": "pathname"
				},
				{
					"deco": "xAAya",
					"name": "argv"
				},
				{
					"deco": "xAAya",
					"name": "envp"
				}
			],
			"name": "execve",
			"comment": " ditto \n",
			"originalType": "int(in string pathname, in string[] argv, in string[] envp)",
			"endline": 2481
		},
		{
			"kind": "function",
			"line": 2484,
			"deco": "FxAyaxAAyaZi",
			"parameters": [
				{
					"deco": "xAya",
					"name": "pathname"
				},
				{
					"deco": "xAAya",
					"name": "argv"
				}
			],
			"name": "execvp",
			"comment": " ditto \n",
			"originalType": "int(in string pathname, in string[] argv)",
			"endline": 2491
		},
		{
			"kind": "function",
			"line": 2494,
			"deco": "FxAyaxAAyaxAAyaZi",
			"parameters": [
				{
					"deco": "xAya",
					"name": "pathname"
				},
				{
					"deco": "xAAya",
					"name": "argv"
				},
				{
					"deco": "xAAya",
					"name": "envp"
				}
			],
			"name": "execvpe",
			"comment": " ditto \n",
			"originalType": "int(in string pathname, in string[] argv, in string[] envp)",
			"endline": 2543
		},
		{
			"kind": "alias",
			"line": 2557,
			"name": "getpid",
			"comment": "\n Returns the process ID of the calling process, which is guaranteed to be\n unique on the system. This call is always successful.\n\n $(RED This function is scheduled for deprecation.  Please use\n $(LREF thisProcessID) instead.)\n\n Example:\n ---\n writefln(\"Current process id: %s\", getpid());\n ---\n"
		},
		{
			"kind": "function",
			"line": 2580,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "cmd"
				}
			],
			"name": "shell",
			"comment": "\nRuns $(D_PARAM cmd) in a shell and returns its standard output. If\nthe process could not be started or exits with an error code,\nthrows ErrnoException.\n\n$(RED This function is scheduled for deprecation.  Please use\n$(LREF executeShell) instead.)\n\nExample:\n\n----\nauto tempFilename = chomp(shell(\"mcookie\"));\nauto f = enforce(fopen(tempFilename), \"w\");\nscope(exit)\n{\nfclose(f) == 0 || assert(false);\nsystem(escapeShellCommand(\"rm\", tempFilename));\n}\n... use f ...\n----\n",
			"endline": 2615
		},
		{
			"kind": "function",
			"line": 2626,
			"deco": "FxAaZAya",
			"parameters": [
				{
					"deco": "xAa",
					"name": "name"
				}
			],
			"name": "getenv",
			"comment": "\nGets the value of environment variable $(D name) as a string. Calls\n$(LINK2 std_c_stdlib.html#_getenv, std.c.stdlib._getenv)\ninternally.\n\n$(RED This function is scheduled for deprecation.  Please use\n$(LREF environment.get) instead.)\n",
			"originalType": "string(in char[] name)",
			"endline": 2635
		},
		{
			"kind": "function",
			"line": 2648,
			"deco": "FxAaxAabZv",
			"parameters": [
				{
					"deco": "xAa",
					"name": "name"
				},
				{
					"deco": "xAa",
					"name": "value"
				},
				{
					"deco": "b",
					"name": "overwrite"
				}
			],
			"name": "setenv",
			"comment": "\nSets the value of environment variable $(D name) to $(D value). If the\nvalue was written, or the variable was already present and $(D\noverwrite) is false, returns normally. Otherwise, it throws an\nexception. Calls $(LINK2 std_c_stdlib.html#_setenv,\nstd.c.stdlib._setenv) internally.\n\n$(RED This function is scheduled for deprecation.  Please use\n$(LREF environment.opIndexAssign) instead.)\n",
			"originalType": "void(in char[] name, in char[] value, bool overwrite)",
			"endline": 2652
		},
		{
			"kind": "function",
			"line": 2662,
			"deco": "FxAaZv",
			"parameters": [
				{
					"deco": "xAa",
					"name": "name"
				}
			],
			"name": "unsetenv",
			"comment": "\nRemoves variable $(D name) from the environment. Calls $(LINK2\nstd_c_stdlib.html#_unsetenv, std.c.stdlib._unsetenv) internally.\n\n$(RED This function is scheduled for deprecation.  Please use\n$(LREF environment.remove) instead.)\n",
			"originalType": "void(in char[] name)",
			"endline": 2665
		},
		{
			"kind": "function",
			"line": 2733,
			"deco": "FAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				}
			],
			"name": "browse",
			"endline": 2758
		}
	],
	"name": "vibe.internal.std.process",
	"comment": "\nFunctions for starting and interacting with other processes, and for\nworking with the current _process' execution environment.\n\nProcess_handling:\n$(UL $(LI\n$(LREF spawnProcess) spawns a new _process, optionally assigning it an\narbitrary set of standard input, output, and error streams.\nThe function returns immediately, leaving the child _process to execute\nin parallel with its parent.  All other functions in this module that\nspawn processes are built around $(D spawnProcess).)\n$(LI\n$(LREF wait) makes the parent _process wait for a child _process to\nterminate.  In general one should always do this, to avoid\nchild processes becoming \"zombies\" when the parent _process exits.\nScope guards are perfect for this – see the $(LREF spawnProcess)\ndocumentation for examples.  $(LREF tryWait) is similar to $(D wait),\nbut does not block if the _process has not yet terminated.)\n$(LI\n$(LREF pipeProcess) also spawns a child _process which runs\nin parallel with its parent.  However, instead of taking\narbitrary streams, it automatically creates a set of\npipes that allow the parent to communicate with the child\nthrough the child's standard input, output, and/or error streams.\nThis function corresponds roughly to C's $(D popen) function.)\n$(LI\n$(LREF execute) starts a new _process and waits for it\nto complete before returning.  Additionally, it captures\nthe _process' standard output and error streams and returns\nthe output of these as a string.)\n$(LI\n$(LREF spawnShell), $(LREF pipeShell) and $(LREF executeShell) work like\n$(D spawnProcess), $(D pipeProcess) and $(D execute), respectively,\nexcept that they take a single command string and run it through\nthe current user's default command interpreter.\n$(D executeShell) corresponds roughly to C's $(D system) function.)\n$(LI\n$(LREF kill) attempts to terminate a running _process.)\n)\n\nThe following table compactly summarises the different _process creation\nfunctions and how they relate to each other:\n$(BOOKTABLE,\n$(TR $(TH )\n$(TH Runs program directly)\n$(TH Runs shell command))\n$(TR $(TD Low-level _process creation)\n$(TD $(LREF spawnProcess))\n$(TD $(LREF spawnShell)))\n$(TR $(TD Automatic input/output redirection using pipes)\n$(TD $(LREF pipeProcess))\n$(TD $(LREF pipeShell)))\n$(TR $(TD Execute and wait for completion, collect output)\n$(TD $(LREF execute))\n$(TD $(LREF executeShell)))\n)\n\nOther_functionality:\n$(UL\n$(LI\n$(LREF pipe) is used to create unidirectional pipes.)\n$(LI\n$(LREF environment) is an interface through which the current _process'\nenvironment variables can be read and manipulated.)\n$(LI\n$(LREF escapeShellCommand) and $(LREF escapeShellFileName) are useful\nfor constructing shell command lines in a portable way.)\n)\n\nAuthors:\n$(LINK2 https://github.com/kyllingstad, Lars Tandle Kyllingstad),\n$(LINK2 https://github.com/schveiguy, Steven Schveighoffer),\n$(WEB thecybershadow.net, Vladimir Panteleev)\nCopyright:\nCopyright (c) 2013, the authors. All rights reserved.\nSource:\n$(PHOBOSSRC std/_process.d)\nMacros:\nWIKI=Phobos/StdProcess\nOBJECTREF=$(D $(LINK2 object.html#$0,$0))\nLREF=$(D $(LINK2 #.$0,$0))\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/router.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.http.server"
		},
		{
			"kind": "interface",
			"line": 21,
			"members": [
				{
					"kind": "function",
					"line": 23,
					"storageClass": [
						"abstract"
					],
					"deco": "FE4vibe4http6common10HTTPMethodAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "E4vibe4http6common10HTTPMethod",
							"name": "method"
						},
						{
							"deco": "Aya",
							"name": "path"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "match",
					"comment": " Adds a new route for request that match the path and method\n",
					"originalType": "HTTPRouter(HTTPMethod method, string path, HTTPServerRequestDelegate cb)"
				},
				{
					"kind": "function",
					"line": 25,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FE4vibe4http6common10HTTPMethodAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "E4vibe4http6common10HTTPMethod",
							"name": "method"
						},
						{
							"deco": "Aya",
							"name": "path"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "match",
					"comment": " ditto\n",
					"endline": 25
				},
				{
					"kind": "function",
					"line": 27,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FE4vibe4http6common10HTTPMethodAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "E4vibe4http6common10HTTPMethod",
							"name": "method"
						},
						{
							"deco": "Aya",
							"name": "path"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "match",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(HTTPMethod method, string path, HTTPServerRequestFunction cb)",
					"endline": 27
				},
				{
					"kind": "function",
					"line": 30,
					"storageClass": [
						"abstract"
					],
					"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"parameters": [
						{
							"deco": "C4vibe4http6server17HTTPServerRequest",
							"name": "req"
						},
						{
							"deco": "C4vibe4http6server18HTTPServerResponse",
							"name": "res"
						}
					],
					"name": "handleRequest",
					"comment": " Handles the HTTP request by dispatching it to the registered request handlers.\n",
					"overrides": [
						"vibe.http.server.HTTPServerRequestHandler.handleRequest"
					]
				},
				{
					"kind": "function",
					"line": 33,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "get",
					"comment": " Adds a new route for GET requests matching the specified pattern.\n",
					"endline": 33
				},
				{
					"kind": "function",
					"line": 35,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "get",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 35
				},
				{
					"kind": "function",
					"line": 37,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "get",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 37
				},
				{
					"kind": "function",
					"line": 40,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "post",
					"comment": " Adds a new route for POST requests matching the specified pattern.\n",
					"endline": 40
				},
				{
					"kind": "function",
					"line": 42,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "post",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 42
				},
				{
					"kind": "function",
					"line": 44,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "post",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 44
				},
				{
					"kind": "function",
					"line": 47,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "put",
					"comment": " Adds a new route for PUT requests matching the specified pattern.\n",
					"endline": 47
				},
				{
					"kind": "function",
					"line": 49,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 49
				},
				{
					"kind": "function",
					"line": 51,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "put",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 51
				},
				{
					"kind": "function",
					"line": 54,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "delete_",
					"comment": " Adds a new route for DELETE requests matching the specified pattern.\n",
					"endline": 54
				},
				{
					"kind": "function",
					"line": 56,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "delete_",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 56
				},
				{
					"kind": "function",
					"line": 58,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "delete_",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 58
				},
				{
					"kind": "function",
					"line": 61,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "patch",
					"comment": " Adds a new route for PATCH requests matching the specified pattern.\n",
					"endline": 61
				},
				{
					"kind": "function",
					"line": 63,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "patch",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 63
				},
				{
					"kind": "function",
					"line": 65,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "patch",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 65
				},
				{
					"kind": "function",
					"line": 68,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "C4vibe4http6server24HTTPServerRequestHandler",
							"name": "cb"
						}
					],
					"name": "any",
					"comment": " Adds a new route for requests matching the specified pattern, regardless of their HTTP verb.\n",
					"endline": 68
				},
				{
					"kind": "function",
					"line": 70,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "any",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
					"endline": 70
				},
				{
					"kind": "function",
					"line": 72,
					"storageClass": [
						"final",
						"abstract"
					],
					"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_match"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "any",
					"comment": " ditto\n",
					"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
					"endline": 76
				}
			],
			"interfaces": [
				"HTTPServerRequestHandler"
			],
			"name": "HTTPRouter",
			"comment": "\n\tAn interface for HTTP request routers.\n"
		},
		{
			"kind": "alias",
			"line": 80,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6router10HTTPRouter",
			"name": "HttpRouter",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 132,
			"members": [
				{
					"kind": "function",
					"line": 138,
					"deco": "FE4vibe4http6common10HTTPMethodAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router9URLRouter",
					"parameters": [
						{
							"deco": "E4vibe4http6common10HTTPMethod",
							"name": "method"
						},
						{
							"deco": "Aya",
							"name": "path"
						},
						{
							"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
							"name": "cb"
						}
					],
					"name": "match",
					"comment": " Adds a new route for requests matching the specified HTTP method and pattern.\n",
					"originalType": "URLRouter(HTTPMethod method, string path, HTTPServerRequestDelegate cb)",
					"endline": 145,
					"overrides": [
						"vibe.http.router.HTTPRouter.match"
					]
				},
				{
					"kind": "function",
					"line": 148,
					"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"parameters": [
						{
							"deco": "C4vibe4http6server17HTTPServerRequest",
							"name": "req"
						},
						{
							"deco": "C4vibe4http6server18HTTPServerResponse",
							"name": "res"
						}
					],
					"name": "handleRequest",
					"comment": " Handles a HTTP request by dispatching it to the registered route handlers.\n",
					"endline": 170,
					"overrides": [
						"vibe.http.server.HTTPServerRequestHandler.handleRequest"
					]
				}
			],
			"interfaces": [
				"HTTPRouter"
			],
			"name": "URLRouter",
			"comment": "\n\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms of placeholders.\n\tThe following example shows how these are used.\n\n\tRegistered routes are matched in the same sequence as initially specified.\n\tMatching ends as soon as a route handler writes a response using res.writeBody()\n\tor similar means. If no route matches or if no route handler writes a response,\n\tthe router will simply not handle the request and the HTTP server may generate\n\ta 404 error.\n\n\t---\n\tvoid addGroup(HTTPServerRequest req, HTTPServerResponse res)\n\t{\n\t\t// Route variables are accessible via the params map\n\t\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n\t}\n\n\tstatic this()\n\t{\n\t\tauto router = new URLRouter;\n\t\t// Matches all GET requests for /users/*/groups/* and places\n\t\t// the place holders in req.params as 'username' and 'groupname'.\n\t\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t\t// Natches all requests. This can be useful for authorization and\n\t\t// similar tasks. The auth method will only write a response if the\n\t\t// user is _not_ authorized. Otherwise, the router will fall through\n\t\t// and continue with the following routes.\n\t\trouter.any(\"*\", &auth);\n\n\t\t// Matches a POST request\n\t\trouter.post(\"/users/:username/delete\", &deleteUser);\n\n\t\t// Matches all GET requests in /static/ such as /static/img.png or\n\t\t// /static/styles/sty.css\n\t\trouter.get(\"/static/*\", serveStaticFiles(\"public/\"));\n\n\t\t// Setup a HTTP server...\n\t\tauto settings = new HTTPServerSettings;\n\t\t// ...\n\n\t\t// The router can be directly passed to the listenHTTP function as\n\t\t// the main request handler.\n\t\tlistenHTTP(settings, router);\n\t}\n\t---\n"
		},
		{
			"kind": "alias",
			"line": 174,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6router9URLRouter",
			"name": "UrlRouter",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.http.router",
	"comment": "\n\tPattern based URL router.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/proxy.d",
	"members": [
		{
			"kind": "function",
			"line": 33,
			"deco": "FC4vibe4http6server18HTTPServerSettingsAyatZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "Aya",
					"name": "destination_host"
				},
				{
					"deco": "t",
					"name": "destination_port"
				}
			],
			"name": "listenHTTPReverseProxy",
			"comment": "\n\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n",
			"endline": 38
		},
		{
			"kind": "alias",
			"line": 41,
			"storageClass": [
				"deprecated"
			],
			"name": "listenHttpReverseProxy",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 47,
			"deco": "FAyatZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "destination_host"
				},
				{
					"deco": "t",
					"name": "destination_port"
				}
			],
			"name": "reverseProxyRequest",
			"comment": "\n\tReturns a HTTP request handler that forwards any request to the specified host/port.\n",
			"originalType": "HTTPServerRequestDelegate(string destination_host, ushort destination_port)",
			"endline": 126
		}
	],
	"name": "vibe.http.proxy",
	"comment": "\n\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/log.d",
	"members": [
		{
			"kind": "class",
			"line": 20,
			"base": "HTTPLogger",
			"members": [
				{
					"kind": "constructor",
					"line": 21,
					"deco": "FC4vibe4http6server18HTTPServerSettingsAyaZC4vibe4http3log17HTTPConsoleLogger",
					"parameters": [
						{
							"deco": "C4vibe4http6server18HTTPServerSettings",
							"name": "settings"
						},
						{
							"deco": "Aya",
							"name": "format"
						}
					],
					"name": "this",
					"originalType": "(HTTPServerSettings settings, string format)",
					"endline": 24
				}
			],
			"name": "HTTPConsoleLogger"
		},
		{
			"kind": "class",
			"line": 32,
			"base": "HTTPLogger",
			"members": [
				{
					"kind": "constructor",
					"line": 37,
					"deco": "FC4vibe4http6server18HTTPServerSettingsAyaAyaZC4vibe4http3log14HTTPFileLogger",
					"parameters": [
						{
							"deco": "C4vibe4http6server18HTTPServerSettings",
							"name": "settings"
						},
						{
							"deco": "Aya",
							"name": "format"
						},
						{
							"deco": "Aya",
							"name": "filename"
						}
					],
					"name": "this",
					"originalType": "(HTTPServerSettings settings, string format, string filename)",
					"endline": 41
				},
				{
					"kind": "function",
					"line": 43,
					"storageClass": [
						"override"
					],
					"deco": "FZv",
					"name": "close",
					"endline": 47,
					"overrides": [
						"vibe.http.log.HTTPLogger.close"
					]
				}
			],
			"name": "HTTPFileLogger"
		},
		{
			"kind": "class",
			"line": 58,
			"members": [
				{
					"kind": "constructor",
					"line": 64,
					"deco": "FC4vibe4http6server18HTTPServerSettingsAyaZC4vibe4http3log10HTTPLogger",
					"parameters": [
						{
							"deco": "C4vibe4http6server18HTTPServerSettings",
							"name": "settings"
						},
						{
							"deco": "Aya",
							"name": "format"
						}
					],
					"name": "this",
					"originalType": "(HTTPServerSettings settings, string format)",
					"endline": 68
				},
				{
					"kind": "function",
					"line": 70,
					"deco": "FZv",
					"name": "close",
					"endline": 70
				},
				{
					"kind": "function",
					"line": 72,
					"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"parameters": [
						{
							"deco": "C4vibe4http6server17HTTPServerRequest",
							"name": "req"
						},
						{
							"deco": "C4vibe4http6server18HTTPServerResponse",
							"name": "res"
						}
					],
					"name": "log",
					"endline": 76
				}
			],
			"name": "HTTPLogger"
		},
		{
			"kind": "function",
			"line": 81,
			"deco": "FAyaC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server18HTTPServerSettingsZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "format"
				},
				{
					"deco": "C4vibe4http6server17HTTPServerRequest",
					"name": "req"
				},
				{
					"deco": "C4vibe4http6server18HTTPServerResponse",
					"name": "res"
				},
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				}
			],
			"name": "formatApacheLog",
			"endline": 236
		}
	],
	"name": "vibe.http.log",
	"comment": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/session.d",
	"members": [
		{
			"kind": "class",
			"line": 22,
			"members": [
				{
					"kind": "function",
					"line": 41,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "id",
					"comment": " Returns the unique session id of this session.\n",
					"originalType": "const string()",
					"endline": 41
				},
				{
					"kind": "function",
					"line": 44,
					"deco": "xFAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "isKeySet",
					"comment": " Queries the session for the existence of a particular key.\n",
					"endline": 44
				},
				{
					"kind": "function",
					"line": 60,
					"deco": "FDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKAyaZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"comment": "\n\t\tEnables foreach-iteration over all key/value pairs of the session.\n\n\t\tExamples:\n\t\t---\n\t\t// sends all session entries to the requesting browser\n\t\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tres.contentType = \"text/plain\";\n\t\t\tforeach(key, value; req.session)\n\t\t\t\tres.bodyWriter.write(key ~ \": \" ~ value ~ \"\\n\");\n\t\t}\n\t\t---\n\t\n",
					"originalType": "int(int delegate(ref string key, ref string value) del)",
					"endline": 66
				},
				{
					"kind": "function",
					"line": 84,
					"deco": "xFAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndex",
					"comment": "\n\t\tGets/sets a key/value pair stored within the session.\n\n\t\tReturns null if the specified key is not set.\n\n\t\tExamples:\n\t\t---\n\t\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tres.contentType = \"text/plain\";\n\t\t\tres.bodyWriter.write(\"Username: \" ~ req.session[\"userName\"]);\n\t\t\tres.bodyWriter.write(\"Request count: \" ~ req.session[\"requestCount\"]);\n\t\t\treq.session[\"requestCount\"] = to!string(req.session[\"requestCount\"].to!int + 1);\n\t\t}\n\t\t---\n\t\n",
					"endline": 84
				},
				{
					"kind": "function",
					"line": 86,
					"deco": "FAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						},
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndexAssign",
					"comment": " ditto\n",
					"endline": 86
				}
			],
			"name": "Session",
			"comment": "\n\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n"
		},
		{
			"kind": "interface",
			"line": 98,
			"members": [
				{
					"kind": "function",
					"line": 100,
					"storageClass": [
						"abstract"
					],
					"deco": "FZC4vibe4http7session7Session",
					"name": "create",
					"comment": " Creates a new session.\n"
				},
				{
					"kind": "function",
					"line": 103,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyaZC4vibe4http7session7Session",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "open",
					"comment": " Opens an existing session.\n"
				},
				{
					"kind": "function",
					"line": 106,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyaAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "set",
					"comment": " Sets a name/value pair for a given session.\n"
				},
				{
					"kind": "function",
					"line": 109,
					"storageClass": [
						"abstract"
					],
					"deco": "xFAyaAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "defaultVal"
						}
					],
					"name": "get",
					"comment": " Returns the value for a given session key.\n"
				},
				{
					"kind": "function",
					"line": 112,
					"storageClass": [
						"abstract"
					],
					"deco": "xFAyaAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "isKeySet",
					"comment": " Determines if a certain session key is set.\n"
				},
				{
					"kind": "function",
					"line": 115,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "destroy",
					"comment": " Terminates the given session.\n"
				},
				{
					"kind": "function",
					"line": 118,
					"storageClass": [
						"abstract"
					],
					"deco": "FAyaZDFDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "iterateSession",
					"comment": " Iterates all key/value pairs stored in the given session. \n",
					"originalType": "int delegate(int delegate(ref string key, ref string value))(string id)"
				}
			],
			"name": "SessionStore",
			"comment": "\n\tInterface for a basic session store.\n\n\tA sesseion store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n"
		},
		{
			"kind": "class",
			"line": 135,
			"members": [
				{
					"kind": "function",
					"line": 140,
					"deco": "FZC4vibe4http7session7Session",
					"name": "create",
					"endline": 145,
					"overrides": [
						"vibe.http.session.SessionStore.create"
					]
				},
				{
					"kind": "function",
					"line": 147,
					"deco": "FAyaZC4vibe4http7session7Session",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "open",
					"endline": 151,
					"overrides": [
						"vibe.http.session.SessionStore.open"
					]
				},
				{
					"kind": "function",
					"line": 153,
					"deco": "FAyaAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "set",
					"endline": 157,
					"overrides": [
						"vibe.http.session.SessionStore.set"
					]
				},
				{
					"kind": "function",
					"line": 159,
					"deco": "xFAyaAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "defaultVal"
						}
					],
					"name": "get",
					"endline": 168,
					"overrides": [
						"vibe.http.session.SessionStore.get"
					]
				},
				{
					"kind": "function",
					"line": 170,
					"deco": "xFAyaAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						},
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "isKeySet",
					"endline": 173,
					"overrides": [
						"vibe.http.session.SessionStore.isKeySet"
					]
				},
				{
					"kind": "function",
					"line": 175,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "destroy",
					"endline": 178,
					"overrides": [
						"vibe.http.session.SessionStore.destroy"
					]
				},
				{
					"kind": "function",
					"line": 180,
					"deco": "FAyaZDFDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "id"
						}
					],
					"name": "iterateSession",
					"originalType": "int delegate(int delegate(ref string key, ref string value))(string id)",
					"endline": 191,
					"overrides": [
						"vibe.http.session.SessionStore.iterateSession"
					]
				}
			],
			"interfaces": [
				"SessionStore"
			],
			"name": "MemorySessionStore",
			"comment": "\n\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n"
		}
	],
	"name": "vibe.http.session",
	"comment": "\n\tCookie based session support.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/auth/basic_auth.d",
	"members": [
		{
			"kind": "function",
			"line": 21,
			"deco": "FAyaDFAyaAyaZbZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "realm"
				},
				{
					"deco": "DFAyaAyaZb",
					"name": "pwcheck"
				}
			],
			"name": "performBasicAuth",
			"comment": "\n\tReturns a request handler that enforces request to be authenticated using HTTP Basic Auth.\n",
			"originalType": "HTTPServerRequestDelegate(string realm, bool delegate(string user, string name) pwcheck)",
			"endline": 49
		},
		{
			"kind": "function",
			"line": 65,
			"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseAyaDFAyaAyaZbZAya",
			"parameters": [
				{
					"deco": "C4vibe4http6server17HTTPServerRequest",
					"name": "req"
				},
				{
					"deco": "C4vibe4http6server18HTTPServerResponse",
					"name": "res"
				},
				{
					"deco": "Aya",
					"name": "realm"
				},
				{
					"deco": "DFAyaAyaZb",
					"name": "pwcheck"
				}
			],
			"name": "performBasicAuth",
			"comment": "\n\tEnforces HTTP Basic Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\trealm = HTTP Basic Auth realm reported to the client\n\t\tpwcheck = A delegate queried for validating user/password pairs\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HTTPStatusExeption in case of an authentication failure.\n",
			"endline": 84
		},
		{
			"kind": "function",
			"line": 90,
			"deco": "FC4vibe4http6common11HTTPRequestAyaAyaZv",
			"parameters": [
				{
					"deco": "C4vibe4http6common11HTTPRequest",
					"name": "req"
				},
				{
					"deco": "Aya",
					"name": "user"
				},
				{
					"deco": "Aya",
					"name": "password"
				}
			],
			"name": "addBasicAuth",
			"comment": "\n\tAugments the given HTTP request with an HTTP Basic Auth header.\n",
			"endline": 95
		}
	],
	"name": "vibe.http.auth.basic_auth",
	"comment": "\n\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/restutil.d",
	"members": [
		{
			"kind": "import",
			"line": 20,
			"name": "std.typetuple"
		},
		{
			"kind": "import",
			"line": 20,
			"name": "std.typecons"
		},
		{
			"kind": "template",
			"line": 23,
			"members": [
				{
					"kind": "variable",
					"line": 26,
					"init": "(functionAttributes!(T) & FunctionAttribute.property) != 0 && !is(ReturnType!(T) == void)",
					"storageClass": [
						"enum"
					],
					"name": "isPropertyGetter"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\tDistinguishes getters from setters by their function signatures.\n",
			"name": "isPropertyGetter"
		},
		{
			"kind": "template",
			"line": 30,
			"members": [
				{
					"kind": "variable",
					"line": 33,
					"init": "(functionAttributes!(T) & FunctionAttribute.property) != 0 && is(ReturnType!(T) == void)",
					"storageClass": [
						"enum"
					],
					"name": "isPropertySetter"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " Close relative of isPropertyGetter\n",
			"name": "isPropertySetter"
		},
		{
			"kind": "template",
			"line": 51,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": " Given some class or interface, reduces it to single base interface\n",
			"name": "reduceToInterface"
		},
		{
			"kind": "template",
			"line": 78,
			"members": [
				{
					"kind": "alias",
					"line": 80,
					"type": "TypeTuple!(__traits(getAttributes, Symbol))",
					"name": "type_udas"
				},
				{
					"kind": "template",
					"line": 82,
					"members": [],
					"parameters": [
						{
							"kind": "tuple",
							"name": "list"
						}
					],
					"name": "extract"
				},
				{
					"kind": "variable",
					"line": 92,
					"init": "extract!(type_udas)",
					"storageClass": [
						"enum"
					],
					"name": "extractUda"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "UDA"
				},
				{
					"kind": "alias",
					"name": "Symbol"
				}
			],
			"comment": "\n  Small convenience wrapper to find and extract certain UDA from given type\nReturns: null if UDA is not found, UDA value otherwise\n \n",
			"name": "extractUda"
		},
		{
			"kind": "template",
			"line": 109,
			"members": [
				{
					"kind": "alias",
					"line": 113,
					"type": "FunctionTypeOf!(Symbol)",
					"name": "T"
				},
				{
					"kind": "alias",
					"line": 120,
					"type": "std.traits.fullyQualifiedName",
					"name": "fqn"
				},
				{
					"kind": "function",
					"line": 122,
					"type": "string(string type)",
					"parameters": [
						{
							"type": "string",
							"name": "type"
						}
					],
					"name": "addTypeQualifiers",
					"endline": 147
				},
				{
					"kind": "template",
					"line": 149,
					"members": [
						{
							"kind": "alias",
							"line": 151,
							"type": "ParameterStorageClass",
							"name": "PSC"
						},
						{
							"kind": "variable",
							"line": 159,
							"init": "format(\"%s%s%s%s\", psc & PSC.scope_ ? \"scope \" : \"\", psc & PSC.out_ ? \"out \" : \"\", psc & PSC.ref_ ? \"ref \" : \"\", psc & PSC.lazy_ ? \"lazy \" : \"\")",
							"storageClass": [
								"enum"
							],
							"name": "storageClassesString"
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "k",
							"name": "psc"
						}
					],
					"name": "storageClassesString"
				},
				{
					"kind": "template",
					"line": 162,
					"members": [
						{
							"kind": "function",
							"line": 162,
							"type": "string()",
							"name": "parametersString",
							"endline": 204
						}
					],
					"parameters": [
						{
							"kind": "alias",
							"name": "T"
						}
					],
					"name": "parametersString"
				},
				{
					"kind": "template",
					"line": 206,
					"members": [],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"name": "linkageString"
				},
				{
					"kind": "template",
					"line": 214,
					"members": [
						{
							"kind": "alias",
							"line": 216,
							"type": "FunctionAttribute",
							"name": "FA"
						},
						{
							"kind": "variable",
							"line": 217,
							"init": "functionAttributes!(T)",
							"storageClass": [
								"enum"
							],
							"name": "attrs"
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"name": "functionAttributeString"
				},
				{
					"kind": "variable",
					"line": 235,
					"init": "addTypeQualifiers(format(\"%s%s%s %s(%s)\", linkageString!(T), functionAttributeString!(T), fqn!(ReturnType!(T)), __traits(identifier, Symbol), parametersString!(Symbol)()))",
					"storageClass": [
						"enum"
					],
					"type": "string",
					"name": "cloneFunction"
				}
			],
			"parameters": [
				{
					"kind": "alias",
					"name": "Symbol"
				}
			],
			"comment": "\n\tClones function signature including its name so that resulting string\n\tcan be mixed into descendant class to override it. All symbols in\n\tresulting string are fully qualified.\n \n",
			"name": "cloneFunction"
		},
		{
			"kind": "template",
			"line": 264,
			"members": [],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tReturns a tuple consisting of all symbols type T consists of\n\tthat may need explicit qualification. Implementation is incomplete\n\tand tuned for REST interface generation needs.\n \n",
			"name": "getSymbols"
		},
		{
			"kind": "template",
			"line": 341,
			"members": [
				{
					"kind": "function",
					"line": 341,
					"type": "string[]()",
					"name": "getRequiredImports",
					"comment": "\n\tFor a given interface, finds all user-defined types\n\tused in its method signatures and generates list of\n\tmodule they originate from.\n \n",
					"endline": 374
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "I"
				}
			],
			"comment": "\n\tFor a given interface, finds all user-defined types\n\tused in its method signatures and generates list of\n\tmodule they originate from.\n \n",
			"name": "getRequiredImports"
		}
	],
	"name": "vibe.http.restutil",
	"comment": "\n\tHelper module for vibe.http.rest that contains various utility templates and functions\n\tthat use D static introspection capabilities. Separated to keep main module concentrated\n\ton HTTP/API related functionality. Is not intended for direct usage but some utilities here\n\tare pretty general.\n\n\tSome of the templates/functions may someday make their way into wider use.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/form.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.inet.webform"
		},
		{
			"kind": "template",
			"line": 126,
			"members": [
				{
					"kind": "function",
					"line": 126,
					"type": "void(URLRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered, Flag!(\"strict\") strict = Yes.strict)",
					"parameters": [
						{
							"type": "URLRouter",
							"name": "router"
						},
						{
							"type": "I",
							"name": "instance"
						},
						{
							"type": "string",
							"name": "url_prefix"
						},
						{
							"default": "MethodStyle.Unaltered",
							"type": "MethodStyle",
							"name": "style"
						},
						{
							"default": "Yes.strict",
							"type": "Flag!(\"strict\")",
							"name": "strict"
						}
					],
					"name": "registerFormInterface",
					"comment": "\n\tGenerates a form based interface to the given instance.\n\n\tEach function is callable with either GET or POST using form encoded\n\tparameters.  All methods of I that start with \"get\", \"query\", \"add\", \"create\",\n\t\"post\" are made available via the URL url_prefix~method_name. A method named\n\t\"index\" will be made available via url_prefix. method_name is generated from\n\tthe original method name by the same rules as for\n\tvibe.http.rest.registerRestInterface. All these methods might take a\n\tHTTPServerRequest parameter and a HTTPServerResponse parameter, but don't have\n\tto.\n\n\tAll additional parameters will be filled with available form-data fields.\n\tEvery parameter name has to match a form field name (or is a fillable\n\tstruct). The registered handler will throw an exception if no overload is\n\tfound that is compatible with all available form data fields.\n\n\tIf a parameter name is not found in the form data and the parameter is a\n\tstruct, all accessible fields of the struct (might also be properties) will\n\tbe searched in the form, with the parameter (struct) name prefixed. An underscore is\n\tused as delimiter. So if you have a struct parameter with name 'foo' of type:\n\t---\n\tstruct FooBar {\n\t\tint bar;\n\t\tint another_foo;\n\t}\n\t---\n\tthe form data must contain the keys 'foo_bar' and 'foo_another_foo'. Their\n\tcorresponding values will be applied to the structure's fields. If not all\n\tfields of the struct are found, this is considered an error and the next\n\toverload (if any) will be tried.\n\n\tThe registered handler gives really good error messages if no appropriate\n\toverload is found, but this comes at the price of some allocations for the\n\terror messages, which are not used at all if eventually a valid overload is\n\tfound. So because of this and because the search for an appropriate\n\toverload is done at run time (according to the provided form data) you\n\tmight want to avoid overloads for performance critical sites.\n\n\tFor a thorough example of how to use this method, see the form_interface\n\texample in the examples directory.\n\n\tSee_Also: registerFormMethod, vibe.http.rest.registerRestInterface\n\n\tParams:\n\t\trouter = The router the found methods are registered with.\n\n\t\tinstance = The instance whose methods should be called via the registered URLs.\n\n\t\turl_prefix = The prefix before the method name. A method named getWelcomePage\n\t\twith a given url_prefix=\"/mywebapp/welcomePage/\" would be made available as\n\t\t\"/mywebapp/welcomePage/getWelcomePage\" if MethodStyle is Unaltered.\n\n\t\tstyle = How the url part representing the method name should be altered.\n        strict = Yes.strict if you want missing parameters in the form to be an error. No.strict if you are happy with the types' default value in this case.\n                (If you have overloads this might cause not the best matching overload to be chosen.)\n\n\tExamples:\n\n\t---\n\tclass FrontEnd {\n\t\t// GET /\n\t\tvoid index(HTTPServerResponse res)\n\t\t{\n\t\t\tres.render!(\"index.dt\");\n\t\t}\n\n\t\t/// GET /files?folder=...\n\t\tvoid getFiles(HTTPServerRequest req, HTTPServerResponse res, string folder)\n\t\t{\n\t\t\tres.render!(\"files.dt\", req, folder);\n\t\t}\n\n\t\t/// POST /login\n\t\tvoid postLogin(HTTPServerRequest req, HTTPServerResponse res, string username,\n\t\t\tstring password)\n\t\t{\n\t\t\tif( username != \"tester\" || password != \"secret\" )\n\t\t\t\tthrow new HTTPStatusException(HTTPStatus.Unauthorized);\n\t\t\tauto session = req.session;\n\t\t\tif( !session ) session = res.startSession();\n\t\t\tsession[\"username\"] = username;\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t}\n\n\tshared static this()\n\t{\n\t\tauto settings = new HTTPServerSettings;\n\t\tsettings.port = 8080;\n\t\tauto router = new URLRouter;\n\t\tregisterFormInterface(router, new FrontEnd, \"/\");\n\t\tlistenHTTP(settings, router);\n\t}\n\t---\n\n",
					"endline": 139
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "I"
				}
			],
			"comment": "\n\tGenerates a form based interface to the given instance.\n\n\tEach function is callable with either GET or POST using form encoded\n\tparameters.  All methods of I that start with \"get\", \"query\", \"add\", \"create\",\n\t\"post\" are made available via the URL url_prefix~method_name. A method named\n\t\"index\" will be made available via url_prefix. method_name is generated from\n\tthe original method name by the same rules as for\n\tvibe.http.rest.registerRestInterface. All these methods might take a\n\tHTTPServerRequest parameter and a HTTPServerResponse parameter, but don't have\n\tto.\n\n\tAll additional parameters will be filled with available form-data fields.\n\tEvery parameter name has to match a form field name (or is a fillable\n\tstruct). The registered handler will throw an exception if no overload is\n\tfound that is compatible with all available form data fields.\n\n\tIf a parameter name is not found in the form data and the parameter is a\n\tstruct, all accessible fields of the struct (might also be properties) will\n\tbe searched in the form, with the parameter (struct) name prefixed. An underscore is\n\tused as delimiter. So if you have a struct parameter with name 'foo' of type:\n\t---\n\tstruct FooBar {\n\t\tint bar;\n\t\tint another_foo;\n\t}\n\t---\n\tthe form data must contain the keys 'foo_bar' and 'foo_another_foo'. Their\n\tcorresponding values will be applied to the structure's fields. If not all\n\tfields of the struct are found, this is considered an error and the next\n\toverload (if any) will be tried.\n\n\tThe registered handler gives really good error messages if no appropriate\n\toverload is found, but this comes at the price of some allocations for the\n\terror messages, which are not used at all if eventually a valid overload is\n\tfound. So because of this and because the search for an appropriate\n\toverload is done at run time (according to the provided form data) you\n\tmight want to avoid overloads for performance critical sites.\n\n\tFor a thorough example of how to use this method, see the form_interface\n\texample in the examples directory.\n\n\tSee_Also: registerFormMethod, vibe.http.rest.registerRestInterface\n\n\tParams:\n\t\trouter = The router the found methods are registered with.\n\n\t\tinstance = The instance whose methods should be called via the registered URLs.\n\n\t\turl_prefix = The prefix before the method name. A method named getWelcomePage\n\t\twith a given url_prefix=\"/mywebapp/welcomePage/\" would be made available as\n\t\t\"/mywebapp/welcomePage/getWelcomePage\" if MethodStyle is Unaltered.\n\n\t\tstyle = How the url part representing the method name should be altered.\n        strict = Yes.strict if you want missing parameters in the form to be an error. No.strict if you are happy with the types' default value in this case.\n                (If you have overloads this might cause not the best matching overload to be chosen.)\n\n\tExamples:\n\n\t---\n\tclass FrontEnd {\n\t\t// GET /\n\t\tvoid index(HTTPServerResponse res)\n\t\t{\n\t\t\tres.render!(\"index.dt\");\n\t\t}\n\n\t\t/// GET /files?folder=...\n\t\tvoid getFiles(HTTPServerRequest req, HTTPServerResponse res, string folder)\n\t\t{\n\t\t\tres.render!(\"files.dt\", req, folder);\n\t\t}\n\n\t\t/// POST /login\n\t\tvoid postLogin(HTTPServerRequest req, HTTPServerResponse res, string username,\n\t\t\tstring password)\n\t\t{\n\t\t\tif( username != \"tester\" || password != \"secret\" )\n\t\t\t\tthrow new HTTPStatusException(HTTPStatus.Unauthorized);\n\t\t\tauto session = req.session;\n\t\t\tif( !session ) session = res.startSession();\n\t\t\tsession[\"username\"] = username;\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t}\n\n\tshared static this()\n\t{\n\t\tauto settings = new HTTPServerSettings;\n\t\tsettings.port = 8080;\n\t\tauto router = new URLRouter;\n\t\tregisterFormInterface(router, new FrontEnd, \"/\");\n\t\tlistenHTTP(settings, router);\n\t}\n\t---\n\n",
			"name": "registerFormInterface"
		},
		{
			"kind": "template",
			"line": 174,
			"members": [
				{
					"kind": "function",
					"line": 174,
					"type": "void(URLRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered, Flag!(\"strict\") strict = Yes.strict)",
					"parameters": [
						{
							"type": "URLRouter",
							"name": "router"
						},
						{
							"type": "I",
							"name": "instance"
						},
						{
							"type": "string",
							"name": "url_prefix"
						},
						{
							"default": "MethodStyle.Unaltered",
							"type": "MethodStyle",
							"name": "style"
						},
						{
							"default": "Yes.strict",
							"type": "Flag!(\"strict\")",
							"name": "strict"
						}
					],
					"name": "registerFormMethod",
					"comment": "\n\tRegisters just a single method.\n\n\tFor details see registerFormInterface. This method does exactly the\n\tsame, but instead of registering found methods that match a scheme it just\n\tregisters the method specified.\n\n\tSee_Also: registerFormInterface\n\n\tParams:\n\t\tmethod = The name of the method to register. It might be\n\t\toverloaded, one overload has to match any given form data, otherwise an error is triggered.\n",
					"endline": 184
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "method"
				},
				{
					"kind": "type",
					"name": "I"
				}
			],
			"comment": "\n\tRegisters just a single method.\n\n\tFor details see registerFormInterface. This method does exactly the\n\tsame, but instead of registering found methods that match a scheme it just\n\tregisters the method specified.\n\n\tSee_Also: registerFormInterface\n\n\tParams:\n\t\tmethod = The name of the method to register. It might be\n\t\toverloaded, one overload has to match any given form data, otherwise an error is triggered.\n",
			"name": "registerFormMethod"
		},
		{
			"kind": "template",
			"line": 340,
			"members": [
				{
					"kind": "function",
					"line": 340,
					"type": "void(R dst, in string[string] data)",
					"parameters": [
						{
							"type": "R",
							"name": "dst"
						},
						{
							"storageClass": [
								"in"
							],
							"type": "string[string]",
							"name": "data"
						}
					],
					"name": "writeFormData",
					"comment": "\n\tEncodes the given dictionary as URL encoded form data.\n\n\tExamples:\n\t\t---\n\t\timport std.array;\n\t\timport vibe.core.log;\n\t\timport vibe.http.form;\n\n\t\tvoid test()\n\t\t{\n\t\t\tauto dst = appender!string();\n\t\t\tdst.writeFormData([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\t\t\tlogInfo(\"Form data: %s\", dst.data);\n\t\t}\n\t\t---\n",
					"endline": 353
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tEncodes the given dictionary as URL encoded form data.\n\n\tExamples:\n\t\t---\n\t\timport std.array;\n\t\timport vibe.core.log;\n\t\timport vibe.http.form;\n\n\t\tvoid test()\n\t\t{\n\t\t\tauto dst = appender!string();\n\t\t\tdst.writeFormData([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\t\t\tlogInfo(\"Form data: %s\", dst.data);\n\t\t}\n\t\t---\n",
			"name": "writeFormData"
		},
		{
			"kind": "function",
			"line": 378,
			"deco": "FC4vibe4http6client17HTTPClientRequestxHAyaAyaZv",
			"parameters": [
				{
					"deco": "C4vibe4http6client17HTTPClientRequest",
					"name": "req"
				},
				{
					"deco": "xHAyaAya",
					"name": "form"
				}
			],
			"name": "writeFormBody",
			"comment": "\n\tWrites a vibe.http.client.HTTPClientRequest body as URL encoded form data.\n\n\tExamples:\n\t\t---\n\t\timport vibe.core.log;\n\t\timport vibe.http.client;\n\t\timport vibe.http.form;\n\n\t\tvoid sendForm()\n\t\t{\n\t\t\trequestHTTP(\"http://example.com/form\",\n\t\t\t\t(scope req) {\n\t\t\t\t\treq.method = HTTPMethod.POST;\n\t\t\t\t\treq.writeFormData([\"field1\": \"value1\", \"field2\"; \"value2\"]);\n\t\t\t\t},\n\t\t\t\t(scope res) {\n\t\t\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t\t\t});\n\t\t}\n\t\t---\n",
			"originalType": "void(HTTPClientRequest req, in string[string] form)",
			"endline": 394
		},
		{
			"kind": "template",
			"line": 456,
			"members": [
				{
					"kind": "function",
					"line": 456,
					"type": "FormDataLoadResult(HTTPServerRequest req, ref T load_to, string name = \"\")",
					"parameters": [
						{
							"type": "HTTPServerRequest",
							"name": "req"
						},
						{
							"storageClass": [
								"ref"
							],
							"type": "T",
							"name": "load_to"
						},
						{
							"default": "\"\"",
							"type": "string",
							"name": "name"
						}
					],
					"name": "loadFormData",
					"comment": "\n Load form data into fields of a given struct or array.\n\n In comparison to registerFormInterface this method can be used in the case\n you have many optional form fields. It is not an error if not all fields of\n the struct are filled, but if it is present it must be convertible to the\n type of the corresponding struct field (properties are not supported). It\n is also not an error if the form contains more data than applied, the\n method simply returns the form length and the number of applied elements,\n so you can decide what todo.\n\n The keys in the form must be named like \"name_field\" for struct, where name\n is the one passed to this function. If you pass \"\" for name then the form\n is queried for \"field\" where field is the identifier of a field in the\n struct, as before.\n\n If you pass an array to the struct the elements get filled with elements from the form named like:\n \"name0\", \"name1\", ....\n\n If the struct/array contains structs/arrays whose identifier can not be\n found in the form, its fields will be filled recursively.\n\n Only dynamic arrays are supported. Their length will be expanded/reduced so\n the found form data matches exactly. For efficiency reason\n arr.assumeSafeAppend() gets called by the implementation if the length is\n reduced. So keep in mind that your data can be overridden.\n\n A little example:\n   ---\n   struct Address {\n\t\tstring street;\n\t\tint door;\n\t\tint zipCode;\n\t\tstring country;\n   }\n   struct Person {\n\t\tstring name;\n\t\tstring surname;\n\t\tAddress address;\n   }\n   // Assume form data: [ \"customer_name\" : \"John\", \"customer_surname\" : \"Smith\", \"customer_address_street\" : \"Broadway\", \"customer_address_door\" : \"12\", \"customer_address_zipCode\" : \"1002\"]\n   void postPerson(HTTPServerRequest req, HTTPServerResponse res) {\n\t\tPerson p;\n\t\t// We have a default value for country if not provided, so we don't care that it is not:\n\t\tp.address.country=\"Important Country\";\n\t\tp.name=\"Jane\";\n\t\tenforce(loadFormData(req, p, \"customer\"), \"More data than needed provided!\");\n\t\t// p will now contain the provided form data, non provided data stays untouched.\n\t\tassert(p.address.country==\"Important Country\");\n\t\tassert(p.name==\"John\");\n\t\tassert(p.surname==\"Smith\");\n   }\n   ---\n The mechanism is more useful in get requests, when you have good default values for unspecified parameters.\n Params:\n\t\treq  = The HTTPServerRequest that contains the form data. (req.query or req.form will be used depending on HTTPMethod)\n\t\tload_to = The struct you wan to be filled.\n\t\tname = The name of the struct, it is used to find data in the form.\t(form is queried for name_fieldName).\n  \n",
					"endline": 467
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n Load form data into fields of a given struct or array.\n\n In comparison to registerFormInterface this method can be used in the case\n you have many optional form fields. It is not an error if not all fields of\n the struct are filled, but if it is present it must be convertible to the\n type of the corresponding struct field (properties are not supported). It\n is also not an error if the form contains more data than applied, the\n method simply returns the form length and the number of applied elements,\n so you can decide what todo.\n\n The keys in the form must be named like \"name_field\" for struct, where name\n is the one passed to this function. If you pass \"\" for name then the form\n is queried for \"field\" where field is the identifier of a field in the\n struct, as before.\n\n If you pass an array to the struct the elements get filled with elements from the form named like:\n \"name0\", \"name1\", ....\n\n If the struct/array contains structs/arrays whose identifier can not be\n found in the form, its fields will be filled recursively.\n\n Only dynamic arrays are supported. Their length will be expanded/reduced so\n the found form data matches exactly. For efficiency reason\n arr.assumeSafeAppend() gets called by the implementation if the length is\n reduced. So keep in mind that your data can be overridden.\n\n A little example:\n   ---\n   struct Address {\n\t\tstring street;\n\t\tint door;\n\t\tint zipCode;\n\t\tstring country;\n   }\n   struct Person {\n\t\tstring name;\n\t\tstring surname;\n\t\tAddress address;\n   }\n   // Assume form data: [ \"customer_name\" : \"John\", \"customer_surname\" : \"Smith\", \"customer_address_street\" : \"Broadway\", \"customer_address_door\" : \"12\", \"customer_address_zipCode\" : \"1002\"]\n   void postPerson(HTTPServerRequest req, HTTPServerResponse res) {\n\t\tPerson p;\n\t\t// We have a default value for country if not provided, so we don't care that it is not:\n\t\tp.address.country=\"Important Country\";\n\t\tp.name=\"Jane\";\n\t\tenforce(loadFormData(req, p, \"customer\"), \"More data than needed provided!\");\n\t\t// p will now contain the provided form data, non provided data stays untouched.\n\t\tassert(p.address.country==\"Important Country\");\n\t\tassert(p.name==\"John\");\n\t\tassert(p.surname==\"Smith\");\n   }\n   ---\n The mechanism is more useful in get requests, when you have good default values for unspecified parameters.\n Params:\n\t\treq  = The HTTPServerRequest that contains the form data. (req.query or req.form will be used depending on HTTPMethod)\n\t\tload_to = The struct you wan to be filled.\n\t\tname = The name of the struct, it is used to find data in the form.\t(form is queried for name_fieldName).\n  \n",
			"name": "loadFormData"
		},
		{
			"kind": "struct",
			"line": 475,
			"members": [
				{
					"kind": "variable",
					"line": 477,
					"deco": "i",
					"name": "formLength",
					"comment": " The number of fields in the form\n",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 479,
					"deco": "i",
					"name": "appliedCount",
					"comment": " The number of actually applied fields.\n",
					"offset": 4
				},
				{
					"kind": "function",
					"line": 482,
					"deco": "xFZb",
					"name": "fullApplied",
					"comment": " Were all fields applied?\n",
					"endline": 484
				}
			],
			"name": "FormDataLoadResult",
			"comment": "\n struct that contains result from loadFormData.\n\n It is convertible to bool and will result to true if all form data has been applied.\n  \n"
		},
		{
			"kind": "struct",
			"line": 487,
			"members": [
				{
					"kind": "variable",
					"line": 488,
					"deco": "Aya",
					"name": "message",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 489,
					"deco": "AAya",
					"name": "missing_parameters",
					"offset": 8
				}
			],
			"name": "Error"
		}
	],
	"name": "vibe.http.form",
	"comment": "\n\tRoutines for automated implementation of HTML form based interfaces.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/websockets.d",
	"members": [
		{
			"kind": "function",
			"line": 48,
			"deco": "FDFC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "DFC4vibe4http10websockets9WebSocketZv",
					"name": "on_handshake"
				}
			],
			"name": "handleWebSockets",
			"comment": "\n\tReturns a HTTP request handler that establishes web socket conections.\n",
			"originalType": "HTTPServerRequestDelegate(void delegate(WebSocket) on_handshake)",
			"endline": 90
		},
		{
			"kind": "function",
			"line": 92,
			"deco": "FPFC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "PFC4vibe4http10websockets9WebSocketZv",
					"name": "on_handshake"
				}
			],
			"name": "handleWebSockets",
			"comment": " ditto\n",
			"originalType": "HTTPServerRequestDelegate(void function(WebSocket) on_handshake)",
			"endline": 95
		},
		{
			"kind": "class",
			"line": 101,
			"members": [
				{
					"kind": "constructor",
					"line": 108,
					"deco": "FC4vibe4core6stream6StreamZC4vibe4http10websockets9WebSocket",
					"parameters": [
						{
							"deco": "C4vibe4core6stream6Stream",
							"name": "conn"
						}
					],
					"name": "this",
					"originalType": "(Stream conn)",
					"endline": 112
				},
				{
					"kind": "function",
					"line": 117,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"out": {
						"kind": "function",
						"line": 118,
						"deco": "FKxbZv",
						"parameters": [
							{
								"deco": "xb",
								"storageClass": [
									"ref"
								],
								"name": "__result"
							}
						],
						"name": "__ensure",
						"originalType": "void(ref const bool __result)",
						"endline": 118
					},
					"name": "connected",
					"comment": "\n\t\tDetermines if the WebSocket connection is still alive.\n\t\n",
					"originalType": "bool()",
					"endline": 129
				},
				{
					"kind": "function",
					"line": 134,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"comment": "\n\t\tChecks if data is readily available for read.\n\t\n",
					"originalType": "bool()",
					"endline": 134
				},
				{
					"kind": "function",
					"line": 141,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "data"
						}
					],
					"name": "send",
					"comment": "\n\t\tSends a text message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type string).\n\t\n",
					"endline": 144
				},
				{
					"kind": "function",
					"line": 151,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "data"
						}
					],
					"name": "send",
					"comment": "\n\t\tSends a binary message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type Blob).\n\t\n",
					"endline": 154
				},
				{
					"kind": "function",
					"line": 159,
					"deco": "FMDFMC4vibe4http10websockets24OutgoingWebSocketMessageZvE4vibe4http10websockets11FrameOpcodeZv",
					"parameters": [
						{
							"deco": "DFMC4vibe4http10websockets24OutgoingWebSocketMessageZv",
							"storageClass": [
								"scope"
							],
							"name": "sender"
						},
						{
							"deco": "E4vibe4http10websockets11FrameOpcode",
							"default": "cast(FrameOpcode)1",
							"name": "frameOpcode"
						}
					],
					"name": "send",
					"comment": "\n\t\tSends a message using an output stream.\n\t\n",
					"originalType": "void(scope void delegate(scope OutgoingWebSocketMessage) sender, FrameOpcode frameOpcode = FrameOpcode.text)",
					"endline": 164
				},
				{
					"kind": "function",
					"line": 169,
					"deco": "FZv",
					"name": "close",
					"comment": "\n\t\tActively closes the connection.\n\t\n",
					"endline": 176
				},
				{
					"kind": "function",
					"line": 184,
					"deco": "FbZAh",
					"parameters": [
						{
							"deco": "b",
							"default": "false",
							"name": "strict"
						}
					],
					"name": "receiveBinary",
					"comment": "\n\t\tReceives a new message and returns its contents as a newly allocated data array.\n\n\t\tParams:\n\t\t\tstrict = If set, ensures the exact frame type (text/binary) is received and throws an execption otherwise.\n\t\n",
					"endline": 193
				},
				{
					"kind": "function",
					"line": 195,
					"deco": "FbZAya",
					"parameters": [
						{
							"deco": "b",
							"default": "false",
							"name": "strict"
						}
					],
					"name": "receiveText",
					"comment": " ditto\n",
					"endline": 204
				},
				{
					"kind": "function",
					"line": 209,
					"deco": "FMDFMC4vibe4http10websockets24IncomingWebSocketMessageZvZv",
					"parameters": [
						{
							"deco": "DFMC4vibe4http10websockets24IncomingWebSocketMessageZv",
							"storageClass": [
								"scope"
							],
							"name": "receiver"
						}
					],
					"name": "receive",
					"comment": "\n\t\tReceives a new message using an InputStream.\n\t\n",
					"endline": 215
				}
			],
			"name": "WebSocket",
			"comment": "\n\tRepresents a single _WebSocket connection.\n"
		},
		{
			"kind": "class",
			"line": 222,
			"members": [
				{
					"kind": "constructor",
					"line": 229,
					"deco": "FC4vibe4core6stream6StreamE4vibe4http10websockets11FrameOpcodeZC4vibe4http10websockets24OutgoingWebSocketMessage",
					"parameters": [
						{
							"deco": "C4vibe4core6stream6Stream",
							"name": "conn"
						},
						{
							"deco": "E4vibe4http10websockets11FrameOpcode",
							"name": "frameOpcode"
						}
					],
					"name": "this",
					"originalType": "(Stream conn, FrameOpcode frameOpcode)",
					"endline": 234
				},
				{
					"kind": "function",
					"line": 236,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 239,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 241,
					"deco": "FZv",
					"name": "flush",
					"endline": 249,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 251,
					"deco": "FZv",
					"name": "finalize",
					"endline": 259,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				},
				{
					"kind": "function",
					"line": 261,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 264,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "OutgoingWebSocketMessage",
			"comment": "\n\tRepresents a single outgoing _WebSocket message as an OutputStream.\n"
		},
		{
			"kind": "class",
			"line": 272,
			"members": [
				{
					"kind": "constructor",
					"line": 278,
					"deco": "FC4vibe4core6stream6StreamZC4vibe4http10websockets24IncomingWebSocketMessage",
					"parameters": [
						{
							"deco": "C4vibe4core6stream6Stream",
							"name": "conn"
						}
					],
					"name": "this",
					"originalType": "(Stream conn)",
					"endline": 283
				},
				{
					"kind": "function",
					"line": 285,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "empty",
					"originalType": "const bool()",
					"endline": 285,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 287,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZm",
					"name": "leastSize",
					"originalType": "const ulong()",
					"endline": 287,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 289,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 289,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 292,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZE4vibe4http10websockets11FrameOpcode",
					"name": "frameOpcode",
					"comment": " The frame type for this nessage;\n",
					"originalType": "const FrameOpcode()",
					"endline": 292
				},
				{
					"kind": "function",
					"line": 294,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 294,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 296,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 309,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "IncomingWebSocketMessage",
			"comment": "\n\tRepresents a single incoming _WebSocket message as an InputStream.\n"
		},
		{
			"kind": "enum",
			"line": 336,
			"members": [
				{
					"kind": "enum member",
					"line": 337,
					"name": "continuation"
				},
				{
					"kind": "enum member",
					"line": 338,
					"name": "text"
				},
				{
					"kind": "enum member",
					"line": 339,
					"name": "binary"
				},
				{
					"kind": "enum member",
					"line": 340,
					"name": "close"
				},
				{
					"kind": "enum member",
					"line": 341,
					"name": "ping"
				},
				{
					"kind": "enum member",
					"line": 342,
					"name": "pong"
				}
			],
			"baseDeco": "i",
			"name": "FrameOpcode"
		},
		{
			"kind": "struct",
			"line": 346,
			"members": [
				{
					"kind": "variable",
					"line": 347,
					"deco": "b",
					"name": "fin",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 348,
					"deco": "E4vibe4http10websockets11FrameOpcode",
					"name": "opcode",
					"offset": 4
				},
				{
					"kind": "variable",
					"line": 349,
					"deco": "Ah",
					"name": "payload",
					"offset": 8
				},
				{
					"kind": "function",
					"line": 352,
					"deco": "FC4vibe4core6stream12OutputStreamZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "stream"
						}
					],
					"name": "writeFrame",
					"endline": 369
				},
				{
					"kind": "function",
					"line": 371,
					"storageClass": [
						"static"
					],
					"deco": "FC4vibe4core6stream11InputStreamZS4vibe4http10websockets5Frame",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						}
					],
					"name": "readFrame",
					"endline": 408
				}
			],
			"name": "Frame"
		}
	],
	"name": "vibe.http.websockets",
	"comment": "\n\tImplements WebSocket support and fallbacks for older browsers.\n\n\tExamples:\n\t---\n\tvoid handleConn(WebSocket sock)\n\t{\n\t\t// simple echo server\n\t\twhile( sock.connected ){\n\t\t\tauto msg = sock.receiveText();\n\t\t\tsock.send(msg);\n\t\t}\n\t}\n\n\tstatic this {\n\t\tauto router = new URLRouter;\n\t\trouter.get(\"/websocket\", handleWebSockets(&handleConn))\n\n\t\t// Start HTTP server...\n\t}\n\t---\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/server.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.net"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.http.common"
		},
		{
			"kind": "import",
			"line": 12,
			"name": "vibe.http.session"
		},
		{
			"kind": "function",
			"line": 72,
			"deco": "FC4vibe4http6server18HTTPServerSettingsDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"name": "request_handler"
				}
			],
			"name": "listenHTTP",
			"comment": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\trequest_handler will be called for each HTTP request that is made. The\n\tres parameter of the callback then has to be filled with the response\n\tdata.\n\n\trequest_handler can be either HTTPServerRequestDelegate/HTTPServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHTTP() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seamless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHTTPPlain() instead.\n\n\tParams:\n\t\tsettings = Customizes the HTTP servers functionality.\n\t\trequest_handler = This callback is invoked for each incoming request and is responsible\n\t\t\tfor generating the response.\n",
			"originalType": "void(HTTPServerSettings settings, HTTPServerRequestDelegate request_handler)",
			"endline": 94
		},
		{
			"kind": "function",
			"line": 96,
			"deco": "FC4vibe4http6server18HTTPServerSettingsPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"name": "request_handler"
				}
			],
			"name": "listenHTTP",
			"comment": " ditto\n",
			"originalType": "void(HTTPServerSettings settings, HTTPServerRequestFunction request_handler)",
			"endline": 99
		},
		{
			"kind": "function",
			"line": 101,
			"deco": "FC4vibe4http6server18HTTPServerSettingsC4vibe4http6server24HTTPServerRequestHandlerZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "C4vibe4http6server24HTTPServerRequestHandler",
					"name": "request_handler"
				}
			],
			"name": "listenHTTP",
			"comment": " ditto\n",
			"endline": 104
		},
		{
			"kind": "alias",
			"line": 107,
			"storageClass": [
				"deprecated"
			],
			"name": "listenHttp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 161,
			"deco": "FC4vibe4http6server18HTTPServerSettingsPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"name": "request_handler"
				}
			],
			"name": "listenHTTPPlain",
			"comment": " ditto\n",
			"originalType": "void(HTTPServerSettings settings, HTTPServerRequestFunction request_handler)",
			"endline": 164
		},
		{
			"kind": "function",
			"line": 166,
			"deco": "FC4vibe4http6server18HTTPServerSettingsC4vibe4http6server24HTTPServerRequestHandlerZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "C4vibe4http6server24HTTPServerRequestHandler",
					"name": "request_handler"
				}
			],
			"name": "listenHTTPPlain",
			"comment": " ditto\n",
			"endline": 169
		},
		{
			"kind": "alias",
			"line": 172,
			"storageClass": [
				"deprecated"
			],
			"name": "listenHttpPlain",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 178,
			"members": [
				{
					"kind": "function",
					"line": 178,
					"type": "HTTPServerRequestDelegate()",
					"name": "staticTemplate",
					"endline": 187
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				}
			],
			"comment": "\n\tProvides a HTTP request handler that responds with a static Diet template.\n",
			"name": "staticTemplate"
		},
		{
			"kind": "function",
			"line": 192,
			"deco": "FAyaZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				}
			],
			"name": "staticRedirect",
			"comment": "\n\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n",
			"originalType": "HTTPServerRequestDelegate(string url)",
			"endline": 197
		},
		{
			"kind": "function",
			"line": 202,
			"deco": "FAyatZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host"
				},
				{
					"deco": "t",
					"name": "port"
				}
			],
			"name": "setVibeDistHost",
			"comment": "\n\tSets a VibeDist host to register with.\n",
			"endline": 206
		},
		{
			"kind": "function",
			"line": 208,
			"storageClass": [
				"deprecated"
			],
			"deco": "FZv",
			"name": "startListening",
			"endline": 208
		},
		{
			"kind": "template",
			"line": 226,
			"members": [
				{
					"kind": "function",
					"line": 226,
					"type": "void(HTTPServerResponse res)",
					"parameters": [
						{
							"type": "HTTPServerResponse",
							"name": "res"
						}
					],
					"name": "render",
					"endline": 231
				}
			],
			"parameters": [
				{
					"kind": "value",
					"deco": "Aya",
					"name": "template_file"
				},
				{
					"kind": "tuple",
					"name": "ALIASES"
				}
			],
			"comment": "\n\tRenders the given template and makes all ALIASES available to the template.\n\n\tThis currently suffers from multiple DMD bugs - use renderCompat() instead for the time being.\n\n\tYou can call this function as a member of HTTPServerResponse using D's uniform function\n\tcall syntax.\n\n\tExamples:\n\t\t---\n\t\tstring title = \"Hello, World!\";\n\t\tint pageNumber = 1;\n\t\tres.render!(\"mytemplate.jd\", title, pageNumber);\n\t\t---\n",
			"name": "render"
		},
		{
			"kind": "alias",
			"line": 239,
			"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"name": "HTTPServerRequestDelegate",
			"comment": "\n\n Delegate based request handler\n"
		},
		{
			"kind": "alias",
			"line": 241,
			"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"name": "HTTPServerRequestFunction",
			"comment": " Static function based request handler\n"
		},
		{
			"kind": "interface",
			"line": 243,
			"members": [
				{
					"kind": "function",
					"line": 245,
					"storageClass": [
						"abstract"
					],
					"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"parameters": [
						{
							"deco": "C4vibe4http6server17HTTPServerRequest",
							"name": "req"
						},
						{
							"deco": "C4vibe4http6server18HTTPServerResponse",
							"name": "res"
						}
					],
					"name": "handleRequest",
					"comment": " Handles incoming HTTP requests\n"
				}
			],
			"name": "HTTPServerRequestHandler",
			"comment": " Interface for class based request handlers\n"
		},
		{
			"kind": "alias",
			"line": 250,
			"storageClass": [
				"deprecated"
			],
			"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"name": "HttpServerRequestDelegate",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "alias",
			"line": 252,
			"storageClass": [
				"deprecated"
			],
			"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"name": "HttpServerRequestFunction",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "alias",
			"line": 254,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server24HTTPServerRequestHandler",
			"name": "HttpServerRequestHandler",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "alias",
			"line": 258,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server24HTTPServerRequestHandler",
			"name": "IHttpServerRequestHandler",
			"comment": " Compatibility alias.\n"
		},
		{
			"kind": "class",
			"line": 262,
			"members": [
				{
					"kind": "variable",
					"line": 264,
					"deco": "i",
					"name": "code",
					"comment": " The HTTP status code\n",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 266,
					"deco": "Aya",
					"name": "message",
					"comment": " The error message\n",
					"offset": 12
				},
				{
					"kind": "variable",
					"line": 268,
					"deco": "Aya",
					"name": "debugMessage",
					"comment": " Extended error message with debug information such as a stack trace\n",
					"offset": 20
				},
				{
					"kind": "variable",
					"line": 270,
					"deco": "C6object9Throwable",
					"name": "exception",
					"comment": " The error exception, if any\n",
					"originalType": "Throwable",
					"offset": 28
				}
			],
			"name": "HTTPServerErrorInfo",
			"comment": " Aggregates all information about an HTTP error status.\n"
		},
		{
			"kind": "alias",
			"line": 274,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server19HTTPServerErrorInfo",
			"name": "HttpServerErrorInfo",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "alias",
			"line": 278,
			"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server19HTTPServerErrorInfoZv",
			"name": "HTTPServerErrorPageHandler",
			"comment": " Delegate type used for user defined error page generator callbacks.\n"
		},
		{
			"kind": "alias",
			"line": 281,
			"storageClass": [
				"deprecated"
			],
			"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server19HTTPServerErrorInfoZv",
			"name": "HttpServerErrorPageHandler",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 289,
			"members": [
				{
					"kind": "enum member",
					"line": 290,
					"name": "none"
				},
				{
					"kind": "enum member",
					"line": 292,
					"name": "parseURL",
					"comment": " Fills the .path, .queryString fields in the request\n"
				},
				{
					"kind": "enum member",
					"line": 294,
					"name": "parseQueryString",
					"comment": " Fills the .query field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 296,
					"name": "parseFormBody",
					"comment": " Fills the .form field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 298,
					"name": "parseJsonBody",
					"comment": " Fills the .json field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 300,
					"name": "parseMultiPartBody",
					"comment": " Enables use of the .nextPart() method in the request\n"
				},
				{
					"kind": "enum member",
					"line": 302,
					"name": "parseCookies",
					"comment": " Fills the .cookies field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 304,
					"name": "distribute",
					"comment": " Distributes request processing among worker threads\n"
				},
				{
					"kind": "enum member",
					"line": 307,
					"name": "None",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 309,
					"name": "ParseURL",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 311,
					"name": "ParseQueryString",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 313,
					"name": "ParseFormBody",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 315,
					"name": "ParseJsonBody",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 317,
					"name": "ParseMultiPartBody",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 319,
					"name": "ParseCookies",
					"comment": " deprecated\n"
				}
			],
			"baseDeco": "i",
			"name": "HTTPServerOption",
			"comment": "\n\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n"
		},
		{
			"kind": "alias",
			"line": 323,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4http6server16HTTPServerOption",
			"name": "HttpServerOption",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 331,
			"members": [
				{
					"kind": "variable",
					"line": 337,
					"init": "cast(ushort)80u",
					"deco": "t",
					"name": "port",
					"comment": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a SSL enabled server you may want to set this\n\t\tto 443 instead.\n\t\n",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 343,
					"init": "[\"::\", \"0.0.0.0\"]",
					"deco": "AAya",
					"name": "bindAddresses",
					"comment": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n\t\n",
					"offset": 12
				},
				{
					"kind": "variable",
					"line": 350,
					"deco": "Aya",
					"name": "hostName",
					"comment": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n\t\n",
					"offset": 20
				},
				{
					"kind": "variable",
					"line": 357,
					"init": "cast(HTTPServerOption)63",
					"deco": "E4vibe4http6server16HTTPServerOption",
					"name": "options",
					"comment": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS).\n\t\n",
					"offset": 28
				},
				{
					"kind": "variable",
					"line": 366,
					"init": "Duration(0L)",
					"deco": "S4core4time8Duration",
					"name": "maxRequestTime",
					"comment": " Time of a request after which the connection is closed with an error; not supported yet\n",
					"offset": 32
				},
				{
					"kind": "variable",
					"line": 369,
					"init": "Duration(100000000L)",
					"deco": "S4core4time8Duration",
					"name": "keepAliveTimeout",
					"comment": " Maximum time between two request on a keep-alive connection\n",
					"offset": 40
				},
				{
					"kind": "variable",
					"line": 373,
					"init": "2097152LU",
					"deco": "m",
					"name": "maxRequestSize",
					"comment": " Maximum number of transferred bytes per request after which the connection is closed with\n an error; not supported yet\n",
					"offset": 48
				},
				{
					"kind": "variable",
					"line": 378,
					"init": "8192LU",
					"deco": "m",
					"name": "maxRequestHeaderSize",
					"comment": "\tMaximum number of transferred bytes for the request header. This includes the request line \n the url and all headers. \n",
					"offset": 56
				},
				{
					"kind": "variable",
					"line": 381,
					"init": "null",
					"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server19HTTPServerErrorInfoZv",
					"name": "errorPageHandler",
					"comment": " Sets a custom handler for displaying error pages for HTTP errors\n",
					"originalType": "HTTPServerErrorPageHandler",
					"offset": 64
				},
				{
					"kind": "function",
					"line": 388,
					"storageClass": [
						"deprecated",
						"@property"
					],
					"deco": "NgFNcNdZNgAya",
					"name": "sslCertFile",
					"comment": " If set, a HTTPS server will be started instead of plain HTTP\n\n\t\tPlease use sslContext in new code instead of setting the key/cert file. Those fileds\n\t\twill be deprecated at some point.\n\t\n",
					"originalType": "inout inout(string)()",
					"endline": 388
				},
				{
					"kind": "function",
					"line": 390,
					"storageClass": [
						"deprecated",
						"@property"
					],
					"deco": "NgFNcNdZNgAya",
					"name": "sslKeyFile",
					"comment": " ditto\n",
					"originalType": "inout inout(string)()",
					"endline": 390
				},
				{
					"kind": "variable",
					"line": 392,
					"deco": "C4vibe6stream3ssl10SSLContext",
					"name": "sslContext",
					"comment": " ditto\n",
					"originalType": "SSLContext",
					"offset": 72
				},
				{
					"kind": "variable",
					"line": 395,
					"deco": "C4vibe4http7session12SessionStore",
					"name": "sessionStore",
					"comment": " Session management is enabled if a session store instance is provided\n",
					"originalType": "SessionStore",
					"offset": 76
				},
				{
					"kind": "variable",
					"line": 396,
					"init": "\"vibe.session_id\"",
					"deco": "Aya",
					"name": "sessionIdCookie",
					"offset": 80
				},
				{
					"kind": "variable",
					"line": 399,
					"init": "\"vibe.d/0.7.17\"",
					"deco": "Aya",
					"name": "serverString",
					"comment": "\n",
					"offset": 88
				},
				{
					"kind": "variable",
					"line": 409,
					"init": "\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"",
					"deco": "Aya",
					"name": "accessLogFormat",
					"comment": " Specifies the format used for the access log.\n\n\t\tThe log format is given using the Apache server syntax. By default NCSA combined is used.\n\n\t\t---\n\t\t\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"\n\t\t---\n\t\n",
					"offset": 96
				},
				{
					"kind": "variable",
					"line": 412,
					"init": "\"\"",
					"deco": "Aya",
					"name": "accessLogFile",
					"comment": " Spefifies the name of a file to which access log messages are appended.\n",
					"offset": 104
				},
				{
					"kind": "variable",
					"line": 415,
					"init": "false",
					"deco": "b",
					"name": "accessLogToConsole",
					"comment": " If set, access log entries will be output to the console.\n",
					"offset": 112
				},
				{
					"kind": "function",
					"line": 418,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe4http6server18HTTPServerSettings",
					"name": "dup",
					"comment": " Returns a duplicate of the settings object.\n",
					"originalType": "HTTPServerSettings()",
					"endline": 428
				},
				{
					"kind": "variable",
					"line": 431,
					"init": "false",
					"deco": "b",
					"name": "disableDistHost",
					"comment": " Disable support for VibeDist and instead start listening immediately.\n",
					"offset": 113
				}
			],
			"name": "HTTPServerSettings",
			"comment": "\n\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n"
		},
		{
			"kind": "alias",
			"line": 437,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server18HTTPServerSettings",
			"name": "HttpServerSettings",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 443,
			"base": "HTTPRequest",
			"members": [
				{
					"kind": "variable",
					"line": 451,
					"deco": "Aya",
					"name": "peer",
					"comment": " The IP address of the client\n",
					"offset": 1368
				},
				{
					"kind": "variable",
					"line": 454,
					"deco": "b",
					"name": "ssl",
					"comment": " Determines if the request was issued over an SSL encrypted channel.\n",
					"offset": 1376
				},
				{
					"kind": "variable",
					"line": 460,
					"deco": "Aya",
					"name": "path",
					"comment": " The _path part of the URL.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n\t\t\n",
					"offset": 1380
				},
				{
					"kind": "variable",
					"line": 466,
					"deco": "Aya",
					"name": "username",
					"comment": " The user name part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n\t\t\n",
					"offset": 1388
				},
				{
					"kind": "variable",
					"line": 472,
					"deco": "Aya",
					"name": "password",
					"comment": " The _password part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n\t\t\n",
					"offset": 1396
				},
				{
					"kind": "variable",
					"line": 478,
					"deco": "Aya",
					"name": "queryString",
					"comment": " The _query string part of the URL.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n\t\t\n",
					"offset": 1404
				},
				{
					"kind": "variable",
					"line": 489,
					"deco": "S4vibe4http6common14CookieValueMap",
					"name": "cookies",
					"comment": " Contains the list of _cookies that are stored on the client.\n\n\t\t\tNote that the a single cookie name may occur multiple times if multiple\n\t\t\tcookies have that name but different paths or domains that all match\n\t\t\tthe request URI. By default, the first cookie will be returned, which is\n\t\t\tthe or one of the cookies with the closest path match.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseCookies is set.\n\t\t\n",
					"offset": 1412
				},
				{
					"kind": "variable",
					"line": 495,
					"deco": "HAyaAya",
					"name": "query",
					"comment": " Contains all _form fields supplied using the _query string.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseQueryString is set.\n\t\t\n",
					"offset": 1420
				},
				{
					"kind": "variable",
					"line": 503,
					"deco": "HAyaAya",
					"name": "params",
					"comment": " A map of general parameters for the request.\n\n\t\t\tThis map is supposed to be used by middleware functionality to store\n\t\t\tinformation for later stages. For example vibe.http.router.URLRouter uses this map\n\t\t\tto store the value of any named placeholders.\n\t\t\n",
					"offset": 1424
				},
				{
					"kind": "variable",
					"line": 511,
					"deco": "C4vibe4core6stream11InputStream",
					"name": "bodyReader",
					"comment": " Supplies the request body as a stream.\n\n\t\t\tIf the body has not already been read because one of the body parsers has\n\t\t\tprocessed it (e.g. HTTPServerOption.parseFormBody), it can be read from\n\t\t\tthis stream.\n\t\t\n",
					"originalType": "InputStream",
					"offset": 1428
				},
				{
					"kind": "variable",
					"line": 520,
					"deco": "S4vibe4data4json4Json",
					"name": "json",
					"comment": " Contains the parsed Json for a JSON request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseJsonBody is set.\n\n\t\t\t\tA JSON request must have the Content-Type \"application/json\".\n\t\t\n",
					"offset": 1432
				},
				{
					"kind": "variable",
					"line": 530,
					"deco": "HAyaAya",
					"name": "form",
					"comment": " Contains the parsed parameters of a HTML POST _form request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseFormBody is set.\n\n\t\t\t\tA form request must either have the Content-Type\n\t\t\t\t\"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n\t\t\n",
					"offset": 1444
				},
				{
					"kind": "variable",
					"line": 538,
					"deco": "HAyaS4vibe4inet7webform8FilePart",
					"name": "files",
					"comment": " Contains information about any uploaded file for a HTML _form request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseFormBody is set amd\n\t\t\t\tif the Content-Type is \"multipart/form-data\".\n\t\t\n",
					"offset": 1448
				},
				{
					"kind": "variable",
					"line": 548,
					"deco": "C4vibe4http7session7Session",
					"name": "session",
					"comment": " The current Session object.\n\n\t\t\tThis field is set if HTTPServerResponse.startSession() has been called\n\t\t\ton a previous response and if the client has sent back the matching\n\t\t\tcookie.\n\n\t\t\tRemarks: Requires the HTTPServerOption.parseCookies option.\n\t\t\n",
					"originalType": "Session",
					"offset": 1452
				},
				{
					"kind": "constructor",
					"line": 552,
					"deco": "FS3std8datetime7SysTimeZC4vibe4http6server17HTTPServerRequest",
					"parameters": [
						{
							"deco": "S3std8datetime7SysTime",
							"name": "time"
						}
					],
					"name": "this",
					"originalType": "(SysTime time)",
					"endline": 557
				},
				{
					"kind": "function",
					"line": 561,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNdZNgS3std8datetime7SysTime",
					"name": "timeCreated",
					"comment": " Time when this request started processing.\n\t\n",
					"originalType": "inout inout(SysTime)()",
					"endline": 561
				},
				{
					"kind": "function",
					"line": 573,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4inet3url3URL",
					"name": "fullURL",
					"comment": " The full URL that corresponds to this request.\n\n\t\tThe host URL includes the protocol, host and optionally the user\n\t\tand password that was used for this request. This field is useful to\n\t\tconstruct self referencing URLs.\n\n\t\tNote that the port is currently not set, so that this only works if\n\t\tthe standard port is used.\n\t\n",
					"originalType": "const URL()",
					"endline": 585
				},
				{
					"kind": "alias",
					"line": 588,
					"storageClass": [
						"deprecated"
					],
					"name": "fullUrl",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 598,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "rootDir",
					"comment": " The relative path the the root folder.\n\n\t\tUsing this function instead of absolute URLs for embedded links can be\n\t\tuseful to avoid dead link when the site is piped through a\n\t\treverse-proxy.\n\n\t\tThe returned string always ends with a slash.\n\t\n",
					"originalType": "const string()",
					"endline": 602
				}
			],
			"name": "HTTPServerRequest",
			"comment": "\n\tRepresents a HTTP request as received by the server side.\n"
		},
		{
			"kind": "alias",
			"line": 606,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server17HTTPServerRequest",
			"name": "HttpServerRequest",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 612,
			"base": "HTTPResponse",
			"members": [
				{
					"kind": "constructor",
					"line": 628,
					"deco": "FC4vibe4core6stream6StreamC4vibe4http6server18HTTPServerSettingsOC4vibe5utils6memory9AllocatorZC4vibe4http6server18HTTPServerResponse",
					"parameters": [
						{
							"deco": "C4vibe4core6stream6Stream",
							"name": "conn"
						},
						{
							"deco": "C4vibe4http6server18HTTPServerSettings",
							"name": "settings"
						},
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"name": "req_alloc"
						}
					],
					"name": "this",
					"originalType": "(Stream conn, HTTPServerSettings settings, shared(Allocator) req_alloc)",
					"endline": 634
				},
				{
					"kind": "function",
					"line": 636,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZS3std8datetime7SysTime",
					"name": "timeFinalized",
					"originalType": "SysTime()",
					"endline": 636
				},
				{
					"kind": "function",
					"line": 640,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "headerWritten",
					"comment": " Determines if the HTTP header has already been written.\n\t\n",
					"originalType": "const bool()",
					"endline": 640
				},
				{
					"kind": "function",
					"line": 644,
					"deco": "xFZb",
					"name": "isHeadResponse",
					"comment": " Determines if the response does not need a body.\n\t\n",
					"endline": 644
				},
				{
					"kind": "function",
					"line": 647,
					"deco": "FxAhAyaZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "data"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "content_type"
						}
					],
					"name": "writeBody",
					"comment": " Writes the entire response body at once.\n",
					"originalType": "void(in ubyte[] data, string content_type = null)",
					"endline": 652
				},
				{
					"kind": "function",
					"line": 654,
					"deco": "FAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "data"
						},
						{
							"deco": "Aya",
							"default": "\"text/plain; charset=UTF-8\"",
							"name": "content_type"
						}
					],
					"name": "writeBody",
					"comment": " ditto\n",
					"endline": 657
				},
				{
					"kind": "function",
					"line": 669,
					"deco": "FC4vibe4core6stream18RandomAccessStreamZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream18RandomAccessStream",
							"name": "stream"
						}
					],
					"name": "writeRawBody",
					"comment": " Writes the whole response body at once, without doing any further encoding.\n\n\t\tThe caller has to make sure that the appropriate headers are set correctly\n\t\t(i.e. Content-Type and Content-Encoding).\n\n\t\tNote that the version taking a RandomAccessStream may perform additional\n\t\toptimizations such as sending a file directly from the disk to the\n\t\tnetwork card using a DMA transfer.\n\n\t\n",
					"endline": 678
				},
				{
					"kind": "function",
					"line": 680,
					"deco": "FC4vibe4core6stream11InputStreamkZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "k",
							"default": "0u",
							"name": "num_bytes"
						}
					],
					"name": "writeRawBody",
					"comment": " ditto\n",
					"originalType": "void(InputStream stream, size_t num_bytes = 0)",
					"endline": 690
				},
				{
					"kind": "template",
					"line": 693,
					"members": [
						{
							"kind": "function",
							"line": 693,
							"type": "void(T data, int status = HTTPStatus.OK)",
							"parameters": [
								{
									"type": "T",
									"name": "data"
								},
								{
									"deco": "i",
									"default": "HTTPStatus.OK",
									"name": "status"
								}
							],
							"name": "writeJsonBody",
							"comment": " Writes a JSON message with the specified status\n",
							"endline": 702
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": " Writes a JSON message with the specified status\n",
					"name": "writeJsonBody"
				},
				{
					"kind": "function",
					"line": 711,
					"deco": "FZv",
					"name": "writeVoidBody",
					"comment": "\n Writes the response with no body.\n\n This method should be used in situations where no body is\n requested, such as a HEAD request. For an empty body, just use writeBody,\n as this method causes problems with some keep-alive connections.\n\t \n",
					"endline": 719
				},
				{
					"kind": "function",
					"line": 726,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe4core6stream12OutputStream",
					"name": "bodyWriter",
					"comment": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n\t\n",
					"originalType": "OutputStream()",
					"endline": 773
				},
				{
					"kind": "function",
					"line": 776,
					"deco": "FAyaiZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url"
						},
						{
							"deco": "i",
							"default": "302",
							"name": "status"
						}
					],
					"name": "redirect",
					"comment": " Sends a redirect request to the client.\n",
					"originalType": "void(string url, int status = HTTPStatus.Found)",
					"endline": 782
				},
				{
					"kind": "function",
					"line": 786,
					"deco": "FAyaZC4vibe4core6stream6Stream",
					"parameters": [
						{
							"deco": "Aya",
							"name": "protocol"
						}
					],
					"name": "switchProtocol",
					"comment": " Special method sending a SWITCHING_PROTOCOLS response to the client.\n\t\n",
					"endline": 791
				},
				{
					"kind": "function",
					"line": 800,
					"deco": "FAyaAyaAyaZC4vibe4http6common6Cookie",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"name": "value"
						},
						{
							"deco": "Aya",
							"default": "\"/\"",
							"name": "path"
						}
					],
					"name": "setCookie",
					"comment": " Sets the specified cookie value.\n\n\t\tParams:\n\t\t\tname = Name of the cookie\n\t\t\tvalue = New cookie value - pass null to clear the cookie\n\t\t\tpath = Path (as seen by the client) of the directory tree in which the cookie is visible\n\t\n",
					"endline": 808
				},
				{
					"kind": "function",
					"line": 817,
					"deco": "FAyabZC4vibe4http7session7Session",
					"parameters": [
						{
							"deco": "Aya",
							"default": "\"/\"",
							"name": "path"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "secure"
						}
					],
					"name": "startSession",
					"comment": "\n\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n\t\n",
					"endline": 828
				},
				{
					"kind": "function",
					"line": 833,
					"deco": "FZv",
					"name": "terminateSession",
					"comment": "\n\t\tTerminates the current session (if any).\n\t\n",
					"endline": 840
				},
				{
					"kind": "function",
					"line": 842,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "bytesWritten",
					"originalType": "ulong()",
					"endline": 844
				},
				{
					"kind": "template",
					"line": 871,
					"members": [
						{
							"kind": "function",
							"line": 871,
							"type": "void(...)",
							"name": "renderCompat",
							"comment": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tThe first template argument is the name of the template file. All following arguments\n\t\tmust be pairs of a type and a string, each specifying one parameter. Parameter values\n\t\tcan be passed either as a value of the same type as specified by the template\n\t\targuments, or as a Variant which has the same type stored.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(title, pageNumber);\n\t\t\t---\n\t\n",
							"endline": 876
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "template_file"
						},
						{
							"kind": "tuple",
							"name": "TYPES_AND_NAMES"
						}
					],
					"comment": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tThe first template argument is the name of the template file. All following arguments\n\t\tmust be pairs of a type and a string, each specifying one parameter. Parameter values\n\t\tcan be passed either as a value of the same type as specified by the template\n\t\targuments, or as a Variant which has the same type stored.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(title, pageNumber);\n\t\t\t---\n\t\n",
					"name": "renderCompat"
				},
				{
					"kind": "destructor",
					"line": 612,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"name": "HTTPServerResponse",
			"comment": "\n\tRepresents a HTTP response as sent from the server side.\n"
		},
		{
			"kind": "alias",
			"line": 972,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6server18HTTPServerResponse",
			"name": "HttpServerResponse",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.http.server",
	"comment": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/dist.d",
	"members": [
		{
			"kind": "function",
			"line": 26,
			"deco": "FC4vibe4http6server18HTTPServerSettingsDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvAyatZv",
			"parameters": [
				{
					"deco": "C4vibe4http6server18HTTPServerSettings",
					"name": "settings"
				},
				{
					"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
					"name": "handler"
				},
				{
					"deco": "Aya",
					"name": "balancer_address"
				},
				{
					"deco": "t",
					"default": "cast(ushort)11000u",
					"name": "balancer_port"
				}
			],
			"name": "listenHTTPDist",
			"comment": "\n\tListens for HTTP connections on the spefified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of\n",
			"originalType": "void(HTTPServerSettings settings, HTTPServerRequestDelegate handler, string balancer_address, ushort balancer_port = 11000)",
			"endline": 52
		},
		{
			"kind": "alias",
			"line": 55,
			"storageClass": [
				"deprecated"
			],
			"name": "listenHttpDist",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.http.dist",
	"comment": "\n\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/status.d",
	"members": [
		{
			"kind": "enum",
			"line": 13,
			"members": [
				{
					"kind": "enum member",
					"line": 14,
					"name": "continue_"
				},
				{
					"kind": "enum member",
					"line": 15,
					"name": "switchingProtocols"
				},
				{
					"kind": "enum member",
					"line": 16,
					"name": "ok"
				},
				{
					"kind": "enum member",
					"line": 17,
					"name": "created"
				},
				{
					"kind": "enum member",
					"line": 18,
					"name": "accepted"
				},
				{
					"kind": "enum member",
					"line": 19,
					"name": "nonAuthoritativeInformation"
				},
				{
					"kind": "enum member",
					"line": 20,
					"name": "noContent"
				},
				{
					"kind": "enum member",
					"line": 21,
					"name": "resetContent"
				},
				{
					"kind": "enum member",
					"line": 22,
					"name": "partialContent"
				},
				{
					"kind": "enum member",
					"line": 23,
					"name": "multipleChoices"
				},
				{
					"kind": "enum member",
					"line": 24,
					"name": "movedPermanently"
				},
				{
					"kind": "enum member",
					"line": 25,
					"name": "found"
				},
				{
					"kind": "enum member",
					"line": 26,
					"name": "seeOther"
				},
				{
					"kind": "enum member",
					"line": 27,
					"name": "notModified"
				},
				{
					"kind": "enum member",
					"line": 28,
					"name": "useProxy"
				},
				{
					"kind": "enum member",
					"line": 29,
					"name": "temporaryRedirect"
				},
				{
					"kind": "enum member",
					"line": 30,
					"name": "badRequest"
				},
				{
					"kind": "enum member",
					"line": 31,
					"name": "unauthorized"
				},
				{
					"kind": "enum member",
					"line": 32,
					"name": "paymentRequired"
				},
				{
					"kind": "enum member",
					"line": 33,
					"name": "forbidden"
				},
				{
					"kind": "enum member",
					"line": 34,
					"name": "notFound"
				},
				{
					"kind": "enum member",
					"line": 35,
					"name": "methodNotAllowed"
				},
				{
					"kind": "enum member",
					"line": 36,
					"name": "notAcceptable"
				},
				{
					"kind": "enum member",
					"line": 37,
					"name": "proxyAuthenticationRequired"
				},
				{
					"kind": "enum member",
					"line": 38,
					"name": "requestTimeout"
				},
				{
					"kind": "enum member",
					"line": 39,
					"name": "conflict"
				},
				{
					"kind": "enum member",
					"line": 40,
					"name": "gone"
				},
				{
					"kind": "enum member",
					"line": 41,
					"name": "lengthRequired"
				},
				{
					"kind": "enum member",
					"line": 42,
					"name": "preconditionFailed"
				},
				{
					"kind": "enum member",
					"line": 43,
					"name": "requestEntityTooLarge"
				},
				{
					"kind": "enum member",
					"line": 44,
					"name": "requestURITooLarge"
				},
				{
					"kind": "enum member",
					"line": 45,
					"name": "unsupportedMediaType"
				},
				{
					"kind": "enum member",
					"line": 46,
					"name": "requestedrangenotsatisfiable"
				},
				{
					"kind": "enum member",
					"line": 47,
					"name": "expectationFailed"
				},
				{
					"kind": "enum member",
					"line": 48,
					"name": "internalServerError"
				},
				{
					"kind": "enum member",
					"line": 49,
					"name": "notImplemented"
				},
				{
					"kind": "enum member",
					"line": 50,
					"name": "badGateway"
				},
				{
					"kind": "enum member",
					"line": 51,
					"name": "serviceUnavailable"
				},
				{
					"kind": "enum member",
					"line": 52,
					"name": "gatewayTimeout"
				},
				{
					"kind": "enum member",
					"line": 53,
					"name": "httpVersionNotSupported"
				},
				{
					"kind": "enum member",
					"line": 56,
					"name": "Continue",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 58,
					"name": "SwitchingProtocols",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 60,
					"name": "OK",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 62,
					"name": "Created",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 64,
					"name": "Accepted",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 66,
					"name": "NonAuthoritativeInformation",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 68,
					"name": "NoContent",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 70,
					"name": "ResetContent",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 72,
					"name": "PartialContent",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 74,
					"name": "MultipleChoices",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 76,
					"name": "MovedPermanently",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 78,
					"name": "Found",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 80,
					"name": "SeeOther",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 82,
					"name": "NotModified",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 84,
					"name": "UseProxy",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 86,
					"name": "TemporaryRedirect",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 88,
					"name": "BadRequest",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 90,
					"name": "Unauthorized",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 92,
					"name": "PaymentRequired",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 94,
					"name": "Forbidden",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 96,
					"name": "NotFound",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 98,
					"name": "MethodNotAllowed",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 100,
					"name": "NotAcceptable",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 102,
					"name": "ProxyAuthenticationRequired",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 104,
					"name": "RequestTimeout",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 106,
					"name": "Conflict",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 108,
					"name": "Gone",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 110,
					"name": "LengthRequired",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 112,
					"name": "PreconditionFailed",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 114,
					"name": "RequestEntityTooLarge",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 116,
					"name": "RequestURITooLarge",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 118,
					"name": "UnsupportedMediaType",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 120,
					"name": "Requestedrangenotsatisfiable",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 122,
					"name": "ExpectationFailed",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 124,
					"name": "InternalServerError",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 126,
					"name": "NotImplemented",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 128,
					"name": "BadGateway",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 130,
					"name": "ServiceUnavailable",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 132,
					"name": "GatewayTimeout",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 134,
					"name": "HTTPVersionNotSupported",
					"comment": " deprecated\n"
				}
			],
			"baseDeco": "i",
			"name": "HTTPStatus",
			"comment": "\n\tDefinitions of all standard HTTP status codes.\n"
		},
		{
			"kind": "alias",
			"line": 138,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4http6status10HTTPStatus",
			"name": "HttpStatus",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 144,
			"deco": "FiZAya",
			"parameters": [
				{
					"deco": "i",
					"name": "code"
				}
			],
			"name": "httpStatusText",
			"comment": "\n\tReturns a standard text description of the specified HTTP status code.\n",
			"endline": 197
		},
		{
			"kind": "function",
			"line": 202,
			"deco": "FiZb",
			"parameters": [
				{
					"deco": "i",
					"name": "status"
				}
			],
			"name": "justifiesConnectionClose",
			"comment": "\n\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n",
			"endline": 210
		}
	],
	"name": "vibe.http.status",
	"comment": "\n\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/client.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.net"
		},
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.http.common"
		},
		{
			"kind": "import",
			"line": 12,
			"name": "vibe.inet.url"
		},
		{
			"kind": "function",
			"line": 54,
			"deco": "FAyaMDFMC4vibe4http6client17HTTPClientRequestZvZC4vibe4http6client18HTTPClientResponse",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
					"storageClass": [
						"scope"
					],
					"default": "null",
					"name": "requester"
				}
			],
			"name": "requestHTTP",
			"comment": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe requester parameter allows to customize the request and to specify the request body for\n\tnon-GET requests before it is sent. A response object is then returned or passed to the\n\tresponder callback synchronously.\n\n\tNote that it is highly recommended to use one of the overloads that take a responder callback,\n\tas they can avoid some memory allocations and are safe against accidentially leaving stale\n\tresponse objects (objects whose response body wasn't fully read). For the returning overloads\n\tof the function it is recommended to put a $(D scope(exit)) right after the call in which\n\tHTTPClientResponse.dropBody is called to avoid this.\n",
			"endline": 57
		},
		{
			"kind": "function",
			"line": 59,
			"deco": "FS4vibe4inet3url3URLMDFMC4vibe4http6client17HTTPClientRequestZvZC4vibe4http6client18HTTPClientResponse",
			"parameters": [
				{
					"deco": "S4vibe4inet3url3URL",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
					"storageClass": [
						"scope"
					],
					"default": "null",
					"name": "requester"
				}
			],
			"name": "requestHTTP",
			"comment": " ditto\n",
			"endline": 77
		},
		{
			"kind": "function",
			"line": 79,
			"deco": "FAyaMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
					"storageClass": [
						"scope"
					],
					"name": "requester"
				},
				{
					"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
					"storageClass": [
						"scope"
					],
					"name": "responder"
				}
			],
			"name": "requestHTTP",
			"comment": " ditto\n",
			"endline": 82
		},
		{
			"kind": "function",
			"line": 84,
			"deco": "FS4vibe4inet3url3URLMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvZv",
			"parameters": [
				{
					"deco": "S4vibe4inet3url3URL",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
					"storageClass": [
						"scope"
					],
					"name": "requester"
				},
				{
					"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
					"storageClass": [
						"scope"
					],
					"name": "responder"
				}
			],
			"name": "requestHTTP",
			"comment": " ditto\n",
			"endline": 96
		},
		{
			"kind": "alias",
			"line": 99,
			"storageClass": [
				"deprecated"
			],
			"name": "requestHttp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 110,
			"storageClass": [
				"auto"
			],
			"deco": "FAyatbZS4vibe4core14connectionpool53__T16LockedConnectionTC4vibe4http6client10HTTPClientZ16LockedConnection",
			"parameters": [
				{
					"deco": "Aya",
					"name": "host"
				},
				{
					"deco": "t",
					"default": "cast(ushort)0u",
					"name": "port"
				},
				{
					"deco": "b",
					"default": "false",
					"name": "ssl"
				}
			],
			"name": "connectHTTP",
			"comment": "\n\tReturns a HttpClient proxy object that is connected to the specified host.\n\n\tInternally, a connection pool is used to reuse already existing connections. Note that\n\tusually requestHTTP should be used for making requests instead of manually using a\n\tHTTPClient to do so.\n",
			"originalType": "(string host, ushort port = 0, bool ssl = false)",
			"endline": 129
		},
		{
			"kind": "alias",
			"line": 132,
			"storageClass": [
				"deprecated"
			],
			"name": "connectHttp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 146,
			"members": [
				{
					"kind": "variable",
					"line": 147,
					"init": "4096",
					"storageClass": [
						"enum"
					],
					"deco": "i",
					"name": "maxHeaderLineLength"
				},
				{
					"kind": "variable",
					"line": 150,
					"init": "4096",
					"storageClass": [
						"deprecated",
						"enum"
					],
					"deco": "i",
					"name": "maxHttpHeaderLineLength",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 167,
					"storageClass": [
						"static"
					],
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "str"
						}
					],
					"name": "setUserAgentString",
					"comment": "\n\t\tSets the default user agent string for new HTTP requests.\n\t\n",
					"endline": 167
				},
				{
					"kind": "function",
					"line": 174,
					"deco": "FAyatbZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "server"
						},
						{
							"deco": "t",
							"default": "cast(ushort)80u",
							"name": "port"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "ssl"
						}
					],
					"name": "connect",
					"comment": "\n\t\tConnects to a specific server.\n\n\t\tThis method may only be called if any previous connection has been closed.\n\t\n",
					"originalType": "void(string server, ushort port = 80, bool ssl = false)",
					"endline": 183
				},
				{
					"kind": "function",
					"line": 190,
					"deco": "FZv",
					"name": "disconnect",
					"comment": "\n\t\tForcefully closes the TCP connection.\n\n\t\tBefore calling this method, be sure that no request is currently being processed.\n\t\n",
					"endline": 204
				},
				{
					"kind": "function",
					"line": 221,
					"deco": "FMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvZv",
					"parameters": [
						{
							"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
							"storageClass": [
								"scope"
							],
							"name": "requester"
						},
						{
							"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
							"storageClass": [
								"scope"
							],
							"name": "responder"
						}
					],
					"name": "request",
					"comment": "\n\t\tPerforms a HTTP request.\n\n\t\trequester is called first to populate the request with headers and the desired\n\t\tHTTP method and version. After a response has been received it is then passed\n\t\tto the caller which can in turn read the reponse body. Any part of the body\n\t\tthat has not been processed will automatically be consumed and dropped.\n\n\t\tNote that the second form of this method (returning a HTTPClientResponse) is\n\t\tnot recommended to use as it may accidentially block a HTTP connection when\n\t\tonly part of the response body was read and also requires a heap allocation\n\t\tfor the response object. The callback based version on the other hand uses\n\t\ta stack allocation and guarantees that the request has been fully processed\n\t\tonce it has returned.\n\t\n",
					"originalType": "void(scope void delegate(scope HTTPClientRequest req) requester, scope void delegate(scope HTTPClientResponse) responder)",
					"endline": 237
				},
				{
					"kind": "function",
					"line": 239,
					"deco": "FMDFC4vibe4http6client17HTTPClientRequestZvZC4vibe4http6client18HTTPClientResponse",
					"parameters": [
						{
							"deco": "DFC4vibe4http6client17HTTPClientRequestZv",
							"storageClass": [
								"scope"
							],
							"name": "requester"
						}
					],
					"name": "request",
					"comment": " ditto\n",
					"endline": 244
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "HTTPClient",
			"comment": "\n\n\n\tImplementation of a HTTP 1.0/1.1 client with keep-alive support.\n\n\tNote that it is usually recommended to use requestHTTP for making requests as that will use a\n\tpool of HTTPClient instances to keep the number of connection establishments low while not\n\tblocking requests from different tasks.\n"
		},
		{
			"kind": "alias",
			"line": 282,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6client10HTTPClient",
			"name": "HttpClient",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 288,
			"base": "HTTPRequest",
			"members": [
				{
					"kind": "function",
					"line": 305,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4core3net14NetworkAddress",
					"name": "localAddress",
					"originalType": "const NetworkAddress()",
					"endline": 305
				},
				{
					"kind": "function",
					"line": 312,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZl",
					"name": "contentLength",
					"comment": "\n\t\tAccesses the Content-Length header of the request.\n\n\t\tNegative values correspond to an unset Content-Length header.\n\t\n",
					"originalType": "const long()",
					"endline": 312
				},
				{
					"kind": "function",
					"line": 314,
					"storageClass": [
						"@property"
					],
					"deco": "FNdlZv",
					"parameters": [
						{
							"deco": "l",
							"name": "value"
						}
					],
					"name": "contentLength",
					"comment": " ditto\n",
					"originalType": "void(long value)",
					"endline": 318
				},
				{
					"kind": "function",
					"line": 323,
					"deco": "FC4vibe4core6stream18RandomAccessStreamZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream18RandomAccessStream",
							"name": "data"
						}
					],
					"name": "writeBody",
					"comment": "\n\t\tWrites the whole response body at once using raw bytes.\n\t\n",
					"endline": 326
				},
				{
					"kind": "function",
					"line": 328,
					"deco": "FC4vibe4core6stream11InputStreamZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "data"
						}
					],
					"name": "writeBody",
					"comment": " ditto\n",
					"endline": 333
				},
				{
					"kind": "function",
					"line": 335,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "data"
						},
						{
							"deco": "m",
							"name": "length"
						}
					],
					"name": "writeBody",
					"comment": " ditto\n",
					"endline": 340
				},
				{
					"kind": "function",
					"line": 342,
					"deco": "FAhAyaZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "data"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "content_type"
						}
					],
					"name": "writeBody",
					"comment": " ditto\n",
					"endline": 348
				},
				{
					"kind": "template",
					"line": 353,
					"members": [
						{
							"kind": "function",
							"line": 353,
							"type": "void(T data)",
							"parameters": [
								{
									"type": "T",
									"name": "data"
								}
							],
							"name": "writeJsonBody",
							"comment": "\n\t\tWrites the response body as JSON data.\n\t\n",
							"endline": 357
						}
					],
					"parameters": [
						{
							"kind": "type",
							"name": "T"
						}
					],
					"comment": "\n\t\tWrites the response body as JSON data.\n\t\n",
					"name": "writeJsonBody"
				},
				{
					"kind": "function",
					"line": 359,
					"deco": "FC4vibe4http6common9MultiPartZv",
					"parameters": [
						{
							"deco": "C4vibe4http6common9MultiPart",
							"name": "part"
						}
					],
					"name": "writePart",
					"endline": 362
				},
				{
					"kind": "function",
					"line": 370,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe4core6stream12OutputStream",
					"name": "bodyWriter",
					"comment": "\n\t\tAn output stream suitable for writing the request body.\n\n\t\tThe first retrieval will cause the request header to be written, make sure\n\t\tthat all headers are set up in advance.s\n\t\n",
					"originalType": "OutputStream()",
					"endline": 381
				}
			],
			"name": "HTTPClientRequest",
			"comment": "\n\tRepresents a HTTP client request (as sent to the server).\n"
		},
		{
			"kind": "alias",
			"line": 428,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6client17HTTPClientRequest",
			"name": "HttpClientRequest",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 434,
			"base": "HTTPResponse",
			"members": [
				{
					"kind": "destructor",
					"line": 494,
					"deco": "FZv",
					"name": "~this",
					"endline": 497
				},
				{
					"kind": "function",
					"line": 502,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe4core6stream11InputStream",
					"name": "bodyReader",
					"comment": "\n\t\tAn input stream suitable for reading the response body.\n\t\n",
					"originalType": "InputStream()",
					"endline": 537
				},
				{
					"kind": "function",
					"line": 549,
					"deco": "FMDFMC4vibe4core6stream11InputStreamZvZv",
					"parameters": [
						{
							"deco": "DFMC4vibe4core6stream11InputStreamZv",
							"storageClass": [
								"scope"
							],
							"name": "del"
						}
					],
					"name": "readRawBody",
					"comment": "\n\t\tProvides unsafe means to read raw data from the connection.\n\n\t\tNo transfer decoding and no content decoding is done on the data.\n\n\t\tNot that the provided delegate must read the whole stream,\n\t\tas the state of the response is unknown after raw bytes have been\n\t\ttaken. Failure to read the right amount of data will lead to\n\t\tprotocol corruption in later requests.\n\t\n",
					"endline": 554
				},
				{
					"kind": "function",
					"line": 559,
					"deco": "FZS4vibe4data4json4Json",
					"name": "readJson",
					"comment": "\n\t\tReads the whole response body and tries to parse it as JSON.\n\t\n",
					"endline": 563
				},
				{
					"kind": "function",
					"line": 568,
					"deco": "FZv",
					"name": "dropBody",
					"comment": "\n\t\tReads and discards the response body.\n\t\n",
					"endline": 578
				},
				{
					"kind": "function",
					"line": 589,
					"deco": "FZv",
					"name": "disconnect",
					"comment": "\n\t\tForcefully terminates the connection regardless of the current state.\n\n\t\tNote that this will only actually disconnect if the request has not yet\n\t\tbeen fully processed. If the whole body was already read, the\n\t\tconnection is not owned by the current request operation anymore and\n\t\tcannot be accessed. Use a \"Connection: close\" header instead in this\n\t\tcase to let the server close the connection.\n\t\n",
					"endline": 592
				},
				{
					"kind": "destructor",
					"line": 494,
					"deco": "FZv",
					"name": "~this"
				},
				{
					"kind": "destructor",
					"line": 494,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"name": "HTTPClientResponse",
			"comment": "\n\tRepresents a HTTP client response (as received from the server).\n"
		},
		{
			"kind": "alias",
			"line": 618,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6client18HTTPClientResponse",
			"name": "HttpClientResponse",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.http.client",
	"comment": "\n\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/common.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.http.status"
		},
		{
			"kind": "enum",
			"line": 30,
			"members": [
				{
					"kind": "enum member",
					"line": 31,
					"name": "HTTP_1_0"
				},
				{
					"kind": "enum member",
					"line": 32,
					"name": "HTTP_1_1"
				}
			],
			"baseDeco": "i",
			"name": "HTTPVersion"
		},
		{
			"kind": "alias",
			"line": 36,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4http6common11HTTPVersion",
			"name": "HttpVersion",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 39,
			"members": [
				{
					"kind": "enum member",
					"line": 41,
					"name": "GET"
				},
				{
					"kind": "enum member",
					"line": 42,
					"name": "HEAD"
				},
				{
					"kind": "enum member",
					"line": 43,
					"name": "PUT"
				},
				{
					"kind": "enum member",
					"line": 44,
					"name": "POST"
				},
				{
					"kind": "enum member",
					"line": 45,
					"name": "PATCH"
				},
				{
					"kind": "enum member",
					"line": 46,
					"name": "DELETE"
				},
				{
					"kind": "enum member",
					"line": 47,
					"name": "OPTIONS"
				},
				{
					"kind": "enum member",
					"line": 48,
					"name": "TRACE"
				},
				{
					"kind": "enum member",
					"line": 49,
					"name": "CONNECT"
				},
				{
					"kind": "enum member",
					"line": 52,
					"name": "COPY"
				},
				{
					"kind": "enum member",
					"line": 53,
					"name": "LOCK"
				},
				{
					"kind": "enum member",
					"line": 54,
					"name": "MKCOL"
				},
				{
					"kind": "enum member",
					"line": 55,
					"name": "MOVE"
				},
				{
					"kind": "enum member",
					"line": 56,
					"name": "PROPFIND"
				},
				{
					"kind": "enum member",
					"line": 57,
					"name": "PROPPATCH"
				},
				{
					"kind": "enum member",
					"line": 58,
					"name": "UNLOCK"
				}
			],
			"baseDeco": "i",
			"name": "HTTPMethod"
		},
		{
			"kind": "alias",
			"line": 62,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe4http6common10HTTPMethod",
			"name": "HttpMethod",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 68,
			"deco": "FE4vibe4http6common10HTTPMethodZAya",
			"parameters": [
				{
					"deco": "E4vibe4http6common10HTTPMethod",
					"name": "m"
				}
			],
			"name": "httpMethodString",
			"comment": "\n\tReturns the string representation of the given HttpMethod.\n",
			"endline": 71
		},
		{
			"kind": "function",
			"line": 76,
			"deco": "FAyaZE4vibe4http6common10HTTPMethod",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "httpMethodFromString",
			"comment": "\n\tReturns the HttpMethod value matching the given HTTP method string.\n",
			"endline": 97
		},
		{
			"kind": "template",
			"line": 111,
			"members": [
				{
					"kind": "function",
					"line": 111,
					"type": "void(T condition, HTTPStatus statusCode, string message = null)",
					"parameters": [
						{
							"type": "T",
							"name": "condition"
						},
						{
							"type": "HTTPStatus",
							"name": "statusCode"
						},
						{
							"default": "null",
							"type": "string",
							"name": "message"
						}
					],
					"name": "enforceHTTP",
					"comment": "\n\tUtility function that throws a HTTPStatusException if the _condition is not met.\n",
					"endline": 114
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "T"
				}
			],
			"comment": "\n\tUtility function that throws a HTTPStatusException if the _condition is not met.\n",
			"name": "enforceHTTP"
		},
		{
			"kind": "alias",
			"line": 117,
			"storageClass": [
				"deprecated"
			],
			"name": "enforceHttp",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 123,
			"members": [
				{
					"kind": "variable",
					"line": 130,
					"init": "cast(HTTPVersion)1",
					"deco": "E4vibe4http6common11HTTPVersion",
					"name": "httpVersion",
					"comment": " The HTTP protocol version used for the request\n",
					"offset": 12
				},
				{
					"kind": "variable",
					"line": 133,
					"init": "cast(HTTPMethod)0",
					"deco": "E4vibe4http6common10HTTPMethod",
					"name": "method",
					"comment": " The HTTP _method of the request\n",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 141,
					"init": "\"/\"",
					"deco": "Aya",
					"name": "requestURL",
					"comment": " The request URL\n\n\t\t\tNote that the request URL usually does not include the global\n\t\t\t'http://server' part, but only the local path and a query string.\n\t\t\tA possible exception is a proxy server, which will get full URLs.\n\t\t\n",
					"offset": 20
				},
				{
					"kind": "alias",
					"line": 144,
					"storageClass": [
						"deprecated"
					],
					"name": "requestUrl",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "alias",
					"line": 147,
					"storageClass": [
						"deprecated"
					],
					"name": "url",
					"comment": " Please use requestURL instead.\n"
				},
				{
					"kind": "variable",
					"line": 150,
					"deco": "S4vibe4inet7message13InetHeaderMap",
					"name": "headers",
					"comment": " All request _headers\n",
					"offset": 28
				},
				{
					"kind": "function",
					"line": 165,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "host",
					"comment": " Shortcut to the 'Host' header (always present for HTTP 1.1)\n\t\n",
					"originalType": "const string()",
					"endline": 165
				},
				{
					"kind": "function",
					"line": 167,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "host",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 167
				},
				{
					"kind": "function",
					"line": 176,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "contentType",
					"comment": " Returns the mime type part of the 'Content-Type' header.\n\n\t\tThis function gets the pure mime type (e.g. \"text/plain\")\n\t\twithout any supplimentary parameters such as \"charset=...\".\n\t\tUse contentTypeParameters to get any parameter string or\n\t\theaders[\"Content-Type\"] to get the raw value.\n\t\n",
					"originalType": "const string()",
					"endline": 182
				},
				{
					"kind": "function",
					"line": 184,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "ct"
						}
					],
					"name": "contentType",
					"comment": " ditto\n",
					"originalType": "void(string ct)",
					"endline": 184
				},
				{
					"kind": "function",
					"line": 191,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "contentTypeParameters",
					"comment": " Returns any supplementary parameters of the 'Content-Type' header.\n\n\t\tThis is a semicolon separated ist of key/value pairs. Usually, if set,\n\t\tthis contains the character set used for text based content types.\n\t\n",
					"originalType": "const string()",
					"endline": 197
				},
				{
					"kind": "function",
					"line": 201,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "persistent",
					"comment": " Determines if the connection persists across requests.\n\t\n",
					"originalType": "const bool()",
					"endline": 214
				}
			],
			"name": "HTTPRequest",
			"comment": "\n\tRepresents an HTTP request made to a server.\n"
		},
		{
			"kind": "alias",
			"line": 219,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6common11HTTPRequest",
			"name": "HttpRequest",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 225,
			"members": [
				{
					"kind": "variable",
					"line": 228,
					"init": "cast(HTTPVersion)1",
					"deco": "E4vibe4http6common11HTTPVersion",
					"name": "httpVersion",
					"comment": " The protocol version of the response - should not be changed\n",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 231,
					"init": "200",
					"deco": "i",
					"name": "statusCode",
					"comment": " The status code of the response, 200 by default\n",
					"offset": 12
				},
				{
					"kind": "variable",
					"line": 237,
					"deco": "Aya",
					"name": "statusPhrase",
					"comment": " The status phrase of the response\n\n\t\t\tIf no phrase is set, a default one corresponding to the status code will be used.\n\t\t\n",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 240,
					"deco": "S4vibe4inet7message13InetHeaderMap",
					"name": "headers",
					"comment": " The response header fields\n",
					"offset": 24
				},
				{
					"kind": "variable",
					"line": 243,
					"deco": "HAyaC4vibe4http6common6Cookie",
					"name": "cookies",
					"comment": " All cookies that shall be set on the client for this request\n",
					"offset": 1316
				},
				{
					"kind": "function",
					"line": 248,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "contentType",
					"comment": " Shortcut to the \"Content-Type\" header\n\t\n",
					"originalType": "const string()",
					"endline": 248
				},
				{
					"kind": "function",
					"line": 250,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "ct"
						}
					],
					"name": "contentType",
					"comment": " ditto\n",
					"originalType": "void(string ct)",
					"endline": 250
				}
			],
			"name": "HTTPResponse",
			"comment": "\n\tRepresents the HTTP response from the server back to the client.\n"
		},
		{
			"kind": "alias",
			"line": 254,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6common12HTTPResponse",
			"name": "HttpResponse",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 262,
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 267,
					"deco": "FiAyaAyaiC6object9ThrowableZC4vibe4http6common19HTTPStatusException",
					"parameters": [
						{
							"deco": "i",
							"name": "status"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "message"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						}
					],
					"name": "this",
					"originalType": "(int status, string message = null, string file = __FILE__, int line = __LINE__, Throwable next = null)",
					"endline": 271
				},
				{
					"kind": "function",
					"line": 274,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZi",
					"name": "status",
					"comment": " The HTTP status code\n",
					"originalType": "const int()",
					"endline": 274
				}
			],
			"name": "HTTPStatusException",
			"comment": "\n\tRespresents a HTTP response status.\n\n\tThrowing this exception from within a request handler will produce a matching error page.\n"
		},
		{
			"kind": "alias",
			"line": 278,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http6common19HTTPStatusException",
			"name": "HttpStatusException",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 281,
			"members": [
				{
					"kind": "variable",
					"line": 282,
					"deco": "Aya",
					"name": "contentType",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 284,
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream",
					"originalType": "InputStream",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 286,
					"deco": "HAyaAya",
					"name": "form",
					"offset": 20
				}
			],
			"name": "MultiPart"
		},
		{
			"kind": "function",
			"line": 289,
			"deco": "FE4vibe4http6common11HTTPVersionZAya",
			"parameters": [
				{
					"deco": "E4vibe4http6common11HTTPVersion",
					"name": "ver"
				}
			],
			"name": "getHTTPVersionString",
			"endline": 295
		},
		{
			"kind": "alias",
			"line": 298,
			"storageClass": [
				"deprecated"
			],
			"name": "getHttpVersionString",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 301,
			"deco": "FKAyaZE4vibe4http6common11HTTPVersion",
			"parameters": [
				{
					"deco": "Aya",
					"storageClass": [
						"ref"
					],
					"name": "str"
				}
			],
			"name": "parseHTTPVersion",
			"endline": 312
		},
		{
			"kind": "alias",
			"line": 315,
			"storageClass": [
				"deprecated"
			],
			"name": "parseHttpVersion",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 321,
			"members": [
				{
					"kind": "constructor",
					"line": 327,
					"deco": "FC4vibe4core6stream11InputStreamZC4vibe4http6common18ChunkedInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						}
					],
					"name": "this",
					"originalType": "(InputStream stream)",
					"endline": 332
				},
				{
					"kind": "function",
					"line": 334,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "empty",
					"originalType": "const bool()",
					"endline": 334,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 336,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZm",
					"name": "leastSize",
					"originalType": "const ulong()",
					"endline": 336,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 338,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 338,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 340,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 344,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 346,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 364,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "ChunkedInputStream",
			"comment": "\n\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n"
		},
		{
			"kind": "class",
			"line": 388,
			"members": [
				{
					"kind": "constructor",
					"line": 395,
					"deco": "FC4vibe4core6stream12OutputStreamOC4vibe5utils6memory9AllocatorZC4vibe4http6common19ChunkedOutputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "stream"
						},
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"default": "defaultAllocator()",
							"name": "alloc"
						}
					],
					"name": "this",
					"originalType": "(OutputStream stream, shared(Allocator) alloc = defaultAllocator())",
					"endline": 399
				},
				{
					"kind": "function",
					"line": 406,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "maxBufferSize",
					"comment": " Maximum buffer size used to buffer individual chunks.\n\n\t\tA size of zero means unlimited buffer size. Explicit flush is required\n\t\tin this case to empty the buffer.\n\t\n",
					"originalType": "const size_t()",
					"endline": 406
				},
				{
					"kind": "function",
					"line": 408,
					"storageClass": [
						"@property"
					],
					"deco": "FNdkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "bytes"
						}
					],
					"name": "maxBufferSize",
					"comment": " ditto\n",
					"originalType": "void(size_t bytes)",
					"endline": 408
				},
				{
					"kind": "function",
					"line": 410,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes_"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes_)",
					"endline": 424,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 426,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "data"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream data, ulong nbytes = 0)",
					"endline": 443,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 445,
					"deco": "FZv",
					"name": "flush",
					"endline": 455,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 457,
					"deco": "FZv",
					"name": "finalize",
					"endline": 462,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "ChunkedOutputStream",
			"comment": "\n\tOutputs data to an output stream in HTTP chunked format.\n"
		},
		{
			"kind": "class",
			"line": 470,
			"members": [
				{
					"kind": "function",
					"line": 481,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "value",
					"originalType": "void(string value)",
					"endline": 481
				},
				{
					"kind": "function",
					"line": 482,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "value",
					"originalType": "const string()",
					"endline": 482
				},
				{
					"kind": "function",
					"line": 484,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "domain",
					"originalType": "void(string value)",
					"endline": 484
				},
				{
					"kind": "function",
					"line": 485,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "domain",
					"originalType": "const string()",
					"endline": 485
				},
				{
					"kind": "function",
					"line": 487,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "path",
					"originalType": "void(string value)",
					"endline": 487
				},
				{
					"kind": "function",
					"line": 488,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "path",
					"originalType": "const string()",
					"endline": 488
				},
				{
					"kind": "function",
					"line": 490,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						}
					],
					"name": "expires",
					"originalType": "void(string value)",
					"endline": 490
				},
				{
					"kind": "function",
					"line": 491,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "expires",
					"originalType": "const string()",
					"endline": 491
				},
				{
					"kind": "function",
					"line": 493,
					"storageClass": [
						"@property"
					],
					"deco": "FNdlZv",
					"parameters": [
						{
							"deco": "l",
							"name": "value"
						}
					],
					"name": "maxAge",
					"originalType": "void(long value)",
					"endline": 493
				},
				{
					"kind": "function",
					"line": 494,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZl",
					"name": "maxAge",
					"originalType": "const long()",
					"endline": 494
				},
				{
					"kind": "function",
					"line": 496,
					"storageClass": [
						"@property"
					],
					"deco": "FNdbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "value"
						}
					],
					"name": "secure",
					"originalType": "void(bool value)",
					"endline": 496
				},
				{
					"kind": "function",
					"line": 497,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "secure",
					"originalType": "const bool()",
					"endline": 497
				},
				{
					"kind": "function",
					"line": 499,
					"storageClass": [
						"@property"
					],
					"deco": "FNdbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "value"
						}
					],
					"name": "httpOnly",
					"originalType": "void(bool value)",
					"endline": 499
				},
				{
					"kind": "function",
					"line": 500,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "httpOnly",
					"originalType": "const bool()",
					"endline": 500
				}
			],
			"name": "Cookie"
		},
		{
			"kind": "struct",
			"line": 506,
			"members": [
				{
					"kind": "struct",
					"line": 507,
					"members": [
						{
							"kind": "variable",
							"line": 508,
							"deco": "Aya",
							"name": "name",
							"offset": 0
						},
						{
							"kind": "variable",
							"line": 509,
							"deco": "Aya",
							"name": "value",
							"offset": 8
						}
					],
					"name": "Cookie"
				},
				{
					"kind": "function",
					"line": 516,
					"deco": "xFAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "def_value"
						}
					],
					"name": "get",
					"endline": 521
				},
				{
					"kind": "function",
					"line": 523,
					"deco": "xFAyaZAAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "getAll",
					"endline": 530
				},
				{
					"kind": "function",
					"line": 532,
					"deco": "FAyaAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "value"
						},
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndexAssign",
					"endline": 535
				},
				{
					"kind": "function",
					"line": 537,
					"deco": "xFAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "name"
						}
					],
					"name": "opIndex",
					"endline": 542
				},
				{
					"kind": "function",
					"line": 544,
					"deco": "FMDFKS4vibe4http6common14CookieValueMap6CookieZiZi",
					"parameters": [
						{
							"deco": "DFKS4vibe4http6common14CookieValueMap6CookieZi",
							"storageClass": [
								"scope"
							],
							"name": "del"
						}
					],
					"name": "opApply",
					"endline": 550
				},
				{
					"kind": "function",
					"line": 552,
					"deco": "xFMDFKS4vibe4http6common14CookieValueMap6CookieZiZi",
					"parameters": [
						{
							"deco": "DFKS4vibe4http6common14CookieValueMap6CookieZi",
							"storageClass": [
								"scope"
							],
							"name": "del"
						}
					],
					"name": "opApply",
					"endline": 558
				},
				{
					"kind": "function",
					"line": 560,
					"deco": "FMDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKAyaZi",
							"storageClass": [
								"scope"
							],
							"name": "del"
						}
					],
					"name": "opApply",
					"originalType": "int(scope int delegate(ref string name, ref string value) del)",
					"endline": 566
				},
				{
					"kind": "function",
					"line": 568,
					"deco": "xFMDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKAyaZi",
							"storageClass": [
								"scope"
							],
							"name": "del"
						}
					],
					"name": "opApply",
					"originalType": "const int(scope int delegate(ref string name, ref string value) del)",
					"endline": 574
				},
				{
					"kind": "template",
					"line": 576,
					"members": [
						{
							"kind": "function",
							"line": 576,
							"type": "inout inout(string)*(string name)",
							"parameters": [
								{
									"type": "string",
									"name": "name"
								}
							],
							"name": "opBinaryRight",
							"endline": 582
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"name": "opBinaryRight"
				}
			],
			"name": "CookieValueMap",
			"comment": "\n"
		}
	],
	"name": "vibe.http.common",
	"comment": "\n\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/fileserver.d",
	"members": [
		{
			"kind": "function",
			"line": 28,
			"deco": "FS4vibe4inet4path4PathC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "local_path"
				},
				{
					"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
					"default": "null",
					"name": "settings"
				}
			],
			"name": "serveStaticFiles",
			"comment": "\n\tReturns a request handler that serves files from the specified directory.\n\n\tSee_Also: serveStaticFile\n",
			"originalType": "HTTPServerRequestDelegate(Path local_path, HTTPFileServerSettings settings = null)",
			"endline": 59
		},
		{
			"kind": "function",
			"line": 61,
			"deco": "FAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "local_path"
				},
				{
					"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
					"default": "null",
					"name": "settings"
				}
			],
			"name": "serveStaticFiles",
			"comment": " ditto\n",
			"originalType": "HTTPServerRequestDelegate(string local_path, HTTPFileServerSettings settings = null)",
			"endline": 64
		},
		{
			"kind": "function",
			"line": 72,
			"deco": "FS4vibe4inet4path4PathC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "local_path"
				},
				{
					"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
					"default": "null",
					"name": "settings"
				}
			],
			"name": "serveStaticFile",
			"comment": "\n\tReturns a request handler that serves a specific file on disk.\n\n\tSee_Also: serveStaticFiles\n",
			"originalType": "HTTPServerRequestDelegate(Path local_path, HTTPFileServerSettings settings = null)",
			"endline": 83
		},
		{
			"kind": "function",
			"line": 85,
			"deco": "FAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "local_path"
				},
				{
					"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
					"default": "null",
					"name": "settings"
				}
			],
			"name": "serveStaticFile",
			"comment": " ditto\n",
			"originalType": "HTTPServerRequestDelegate(string local_path, HTTPFileServerSettings settings = null)",
			"endline": 88
		},
		{
			"kind": "class",
			"line": 94,
			"members": [
				{
					"kind": "variable",
					"line": 95,
					"init": "\"/\"",
					"deco": "Aya",
					"name": "serverPathPrefix",
					"offset": 8
				},
				{
					"kind": "variable",
					"line": 96,
					"init": "Duration(864000000000L)",
					"deco": "S4core4time8Duration",
					"name": "maxAge",
					"offset": 16
				},
				{
					"kind": "variable",
					"line": 97,
					"init": "false",
					"deco": "b",
					"name": "failIfNotFound",
					"offset": 24
				},
				{
					"kind": "variable",
					"line": 98,
					"deco": "HAyaAya",
					"name": "encodingFileExtension",
					"offset": 28
				},
				{
					"kind": "variable",
					"line": 108,
					"init": "null",
					"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseKAyaZv",
					"name": "preWriteCallback",
					"comment": "\n\t\tCalled just before headers and data are sent.\n\t\tAllows headers to be customized, or other custom processing to be performed.\n\n\t\tNote: Any changes you make to the response, physicalPath, or anything\n\t\telse during this function will NOT be verified by Vibe.d for correctness.\n\t\tMake sure any alterations you make are complete and correct according to HTTP spec.\n\t\n",
					"offset": 32
				},
				{
					"kind": "constructor",
					"line": 110,
					"deco": "FZC4vibe4http10fileserver22HTTPFileServerSettings",
					"name": "this",
					"originalType": "()",
					"endline": 110
				},
				{
					"kind": "constructor",
					"line": 112,
					"deco": "FAyaZC4vibe4http10fileserver22HTTPFileServerSettings",
					"parameters": [
						{
							"deco": "Aya",
							"name": "path_prefix"
						}
					],
					"name": "this",
					"originalType": "(string path_prefix)",
					"endline": 115
				}
			],
			"name": "HTTPFileServerSettings",
			"comment": "\n\tConfiguration options for the static file server.\n"
		},
		{
			"kind": "alias",
			"line": 119,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
			"name": "HttpFileServerSettings",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.http.fileserver",
	"comment": "\n\tA static HTTP file server.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/http/rest.d",
	"members": [
		{
			"kind": "template",
			"line": 127,
			"members": [
				{
					"kind": "function",
					"line": 127,
					"type": "void(URLRouter router, TImpl instance, string urlPrefix, MethodStyle style = MethodStyle.lowerUnderscored)",
					"parameters": [
						{
							"type": "URLRouter",
							"name": "router"
						},
						{
							"type": "TImpl",
							"name": "instance"
						},
						{
							"type": "string",
							"name": "urlPrefix"
						},
						{
							"default": "MethodStyle.lowerUnderscored",
							"type": "MethodStyle",
							"name": "style"
						}
					],
					"name": "registerRestInterface",
					"comment": "\n\tGenerates registers a REST interface and connects it the the given instance.\n\n\tEach method is mapped to the corresponing HTTP verb. Property methods are mapped to GET/PUT and\n\tall other methods are mapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tIf a method has its first parameter named 'id', it will be mapped to ':id/method' and\n    'id' is expected to be part of the URL instead of a JSON request. Parameters with default\n    values will be optional in the corresponding JSON request.\n\n\tAny interface that you return from a getter will be made available with the base url and its name appended.\n\n\tExamples:\n\n\t\tThe following example makes MyApi available using HTTP requests. Valid requests are:\n\n\t\t<ul>\n\t\t  $(LI GET /api/status &rarr; \"OK\")\n\t\t  $(LI GET /api/greeting &rarr; \"&lt;current greeting&gt;\")\n\t\t  $(LI PUT /api/greeting &larr; {\"text\": \"&lt;new text&gt;\"})\n\t\t  $(LI POST /api/new_user &larr; {\"name\": \"&lt;new user name&gt;\"})\n\t\t  $(LI GET /api/users &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/ &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/:id/name &rarr; [\"&lt;user name for id&gt;\"])\n\t\t  $(LI GET /api/items/text &rarr; \"Hello, World\")\n\t\t  $(LI GET /api/items/:id/index &rarr; &lt;item index&gt;)\n\t\t</ul>\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyItemsApi {\n\t\t\tstring getText();\n\t\t\tint getIndex(int id);\n\t\t}\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring getName(int id);\n\n\t\t\t@property IMyItemsApi items();\n\t\t}\n\n\t\tclass MyItemsApiImpl : IMyItemsApi {\n\t\t\tstring getText() { return \"Hello, World\"; }\n\t\t\tint getIndex(int id) { return id; }\n\t\t}\n\n\t\tclass MyApiImpl : IMyApi {\n\t\t\tprivate string m_greeting;\n\t\t\tprivate string[] m_users;\n\t\t\tprivate MyItemsApiImpl m_items;\n\n\t\t\tthis() { m_items = new MyItemsApiImpl; }\n\n\t\t\tstring getStatus() { return \"OK\"; }\n\n\t\t\t@property string greeting() { return m_greeting; }\n\t\t\t@property void greeting(string text) { m_greeting = text; }\n\n\t\t\tvoid addNewUser(string name) { m_users ~= name; }\n\t\t\t@property string[] users() { return m_users; }\n\t\t\tstring getName(int id) { return m_users[id]; }\n\n\t\t\t@property MyItemsApiImpl items() { return m_items; }\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto routes = new URLRouter;\n\n\t\t\tregisterRestInterface(routes, new MyApiImpl, \"/api/\");\n\n\t\t\tlistenHTTP(new HTTPServerSettings, routes);\n\t\t}\n\t\t---\n\n\tSee_Also:\n\n\t\tRestInterfaceClient class for a seamless way to acces such a generated API\n",
					"endline": 174
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "TImpl"
				}
			],
			"comment": "\n\tGenerates registers a REST interface and connects it the the given instance.\n\n\tEach method is mapped to the corresponing HTTP verb. Property methods are mapped to GET/PUT and\n\tall other methods are mapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tIf a method has its first parameter named 'id', it will be mapped to ':id/method' and\n    'id' is expected to be part of the URL instead of a JSON request. Parameters with default\n    values will be optional in the corresponding JSON request.\n\n\tAny interface that you return from a getter will be made available with the base url and its name appended.\n\n\tExamples:\n\n\t\tThe following example makes MyApi available using HTTP requests. Valid requests are:\n\n\t\t<ul>\n\t\t  $(LI GET /api/status &rarr; \"OK\")\n\t\t  $(LI GET /api/greeting &rarr; \"&lt;current greeting&gt;\")\n\t\t  $(LI PUT /api/greeting &larr; {\"text\": \"&lt;new text&gt;\"})\n\t\t  $(LI POST /api/new_user &larr; {\"name\": \"&lt;new user name&gt;\"})\n\t\t  $(LI GET /api/users &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/ &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/:id/name &rarr; [\"&lt;user name for id&gt;\"])\n\t\t  $(LI GET /api/items/text &rarr; \"Hello, World\")\n\t\t  $(LI GET /api/items/:id/index &rarr; &lt;item index&gt;)\n\t\t</ul>\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyItemsApi {\n\t\t\tstring getText();\n\t\t\tint getIndex(int id);\n\t\t}\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring getName(int id);\n\n\t\t\t@property IMyItemsApi items();\n\t\t}\n\n\t\tclass MyItemsApiImpl : IMyItemsApi {\n\t\t\tstring getText() { return \"Hello, World\"; }\n\t\t\tint getIndex(int id) { return id; }\n\t\t}\n\n\t\tclass MyApiImpl : IMyApi {\n\t\t\tprivate string m_greeting;\n\t\t\tprivate string[] m_users;\n\t\t\tprivate MyItemsApiImpl m_items;\n\n\t\t\tthis() { m_items = new MyItemsApiImpl; }\n\n\t\t\tstring getStatus() { return \"OK\"; }\n\n\t\t\t@property string greeting() { return m_greeting; }\n\t\t\t@property void greeting(string text) { m_greeting = text; }\n\n\t\t\tvoid addNewUser(string name) { m_users ~= name; }\n\t\t\t@property string[] users() { return m_users; }\n\t\t\tstring getName(int id) { return m_users[id]; }\n\n\t\t\t@property MyItemsApiImpl items() { return m_items; }\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto routes = new URLRouter;\n\n\t\t\tregisterRestInterface(routes, new MyApiImpl, \"/api/\");\n\n\t\t\tlistenHTTP(new HTTPServerSettings, routes);\n\t\t}\n\t\t---\n\n\tSee_Also:\n\n\t\tRestInterfaceClient class for a seamless way to acces such a generated API\n",
			"name": "registerRestInterface"
		},
		{
			"kind": "template",
			"line": 176,
			"members": [
				{
					"kind": "function",
					"line": 176,
					"type": "void(URLRouter router, TImpl instance, MethodStyle style = MethodStyle.lowerUnderscored)",
					"parameters": [
						{
							"type": "URLRouter",
							"name": "router"
						},
						{
							"type": "TImpl",
							"name": "instance"
						},
						{
							"default": "MethodStyle.lowerUnderscored",
							"type": "MethodStyle",
							"name": "style"
						}
					],
					"name": "registerRestInterface",
					"comment": " ditto\n",
					"endline": 199
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "TImpl"
				}
			],
			"comment": " ditto\n",
			"name": "registerRestInterface"
		},
		{
			"kind": "template",
			"line": 241,
			"members": [
				{
					"kind": "class",
					"line": 241,
					"members": [
						{
							"kind": "alias",
							"line": 247,
							"type": "void delegate(HTTPClientRequest req)",
							"name": "RequestFilter"
						},
						{
							"kind": "variable",
							"line": 249,
							"type": "URL",
							"name": "m_baseURL"
						},
						{
							"kind": "variable",
							"line": 250,
							"type": "MethodStyle",
							"name": "m_methodStyle"
						},
						{
							"kind": "variable",
							"line": 251,
							"type": "RequestFilter",
							"name": "m_requestFilter"
						},
						{
							"kind": "alias",
							"line": 254,
							"type": "I",
							"name": "BaseInterface"
						},
						{
							"kind": "constructor",
							"line": 258,
							"type": "(string base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
							"parameters": [
								{
									"type": "string",
									"name": "base_url"
								},
								{
									"default": "MethodStyle.lowerUnderscored",
									"type": "MethodStyle",
									"name": "style"
								}
							],
							"name": "this",
							"comment": " Creates a new REST implementation of I\n\t\n",
							"endline": 279
						},
						{
							"kind": "constructor",
							"line": 281,
							"type": "(URL base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
							"parameters": [
								{
									"type": "URL",
									"name": "base_url"
								},
								{
									"default": "MethodStyle.lowerUnderscored",
									"type": "MethodStyle",
									"name": "style"
								}
							],
							"name": "this",
							"comment": " ditto\n",
							"endline": 286
						},
						{
							"kind": "function",
							"line": 290,
							"type": "RequestFilter()",
							"name": "requestFilter",
							"comment": " An optional request filter that allows to modify each request before it is made.\n\t\n",
							"endline": 290
						},
						{
							"kind": "function",
							"line": 292,
							"type": "void(RequestFilter v)",
							"parameters": [
								{
									"type": "RequestFilter",
									"name": "v"
								}
							],
							"name": "requestFilter",
							"comment": " ditto\n",
							"endline": 295
						},
						{
							"kind": "function",
							"line": 308,
							"type": "const Json(string verb, string name, Json params, bool[string] paramIsJson)",
							"parameters": [
								{
									"type": "string",
									"name": "verb"
								},
								{
									"type": "string",
									"name": "name"
								},
								{
									"type": "Json",
									"name": "params"
								},
								{
									"type": "bool[string]",
									"name": "paramIsJson"
								}
							],
							"name": "request",
							"endline": 352
						}
					],
					"name": "RestInterfaceClient"
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "I"
				}
			],
			"comment": "\n\tImplements the given interface by forwarding all public methods to a REST server.\n\n\tThe server must talk the same protocol as registerRestInterface() generates. Be sure to set\n\tthe matching method style for this. The RestInterfaceClient class will derive from the\n\tinterface that is passed as a template argument. It can be used as a drop-in replacement\n\tof the real implementation of the API this way.\n\n\tExamples:\n\n\t\tAn example client that accesses the API defined in the registerRestInterface() example:\n\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring getName(int id);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto api = new RestInterfaceClient!IMyApi(\"http://127.0.0.1/api/\");\n\n\t\t\tlogInfo(\"Status: %s\", api.getStatus());\n\t\t\tapi.greeting = \"Hello, World!\";\n\t\t\tlogInfo(\"Greeting message: %s\", api.greeting);\n\t\t\tapi.addNewUser(\"Peter\");\n\t\t\tapi.addNewUser(\"Igor\");\n\t\t\tlogInfo(\"Users: %s\", api.users);\n\t\t}\n\t\t---\n",
			"name": "RestInterfaceClient"
		},
		{
			"kind": "function",
			"line": 379,
			"deco": "FAyaE4vibe4http4rest11MethodStyleZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "name"
				},
				{
					"deco": "E4vibe4http4rest11MethodStyle",
					"name": "style"
				}
			],
			"name": "adjustMethodStyle",
			"comment": "\n\tAdjusts the naming convention for a given function name to the specified style.\n\n\tThe input name is assumed to be in lowerCamelCase (D-style) or PascalCase. Acronyms\n\t(e.g. \"HTML\") should be written all caps\n",
			"endline": 430
		},
		{
			"kind": "enum",
			"line": 463,
			"members": [
				{
					"kind": "enum member",
					"line": 465,
					"name": "unaltered",
					"comment": " Special value for free-style conventions\n"
				},
				{
					"kind": "enum member",
					"line": 467,
					"name": "camelCase",
					"comment": " camelCaseNaming\n"
				},
				{
					"kind": "enum member",
					"line": 469,
					"name": "pascalCase",
					"comment": " PascalCaseNaming\n"
				},
				{
					"kind": "enum member",
					"line": 471,
					"name": "lowerCase",
					"comment": " lowercasenaming\n"
				},
				{
					"kind": "enum member",
					"line": 473,
					"name": "upperCase",
					"comment": " UPPERCASENAMING\n"
				},
				{
					"kind": "enum member",
					"line": 475,
					"name": "lowerUnderscored",
					"comment": " lower_case_naming\n"
				},
				{
					"kind": "enum member",
					"line": 477,
					"name": "upperUnderscored",
					"comment": " UPPER_CASE_NAMING\n"
				},
				{
					"kind": "enum member",
					"line": 480,
					"name": "Unaltered",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 482,
					"name": "CamelCase",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 484,
					"name": "PascalCase",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 486,
					"name": "LowerCase",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 488,
					"name": "UpperCase",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 490,
					"name": "LowerUnderscored",
					"comment": " deprecated\n"
				},
				{
					"kind": "enum member",
					"line": 492,
					"name": "UpperUnderscored",
					"comment": " deprecated\n"
				}
			],
			"baseDeco": "i",
			"name": "MethodStyle",
			"comment": "\n\tDetermines the naming convention of an identifier.\n"
		},
		{
			"kind": "function",
			"line": 868,
			"deco": "FE4vibe4http6common10HTTPMethodZS4vibe4http4rest15OverridenMethod",
			"parameters": [
				{
					"deco": "E4vibe4http6common10HTTPMethod",
					"name": "data"
				}
			],
			"name": "method",
			"comment": "\n\tUser Defined Attribute interface to force specific HTTP method in REST interface\n\tfor function in question. Usual URL generation rules are still applied so if there\n\tare ny \"get\", \"query\" or similar prefixes, they are filtered out.\n\n\tExample:\n\t---\n\tinterface IAPI\n\t{\n\t\t// Will be \"POST /info\" instead of default \"GET /info\"\n\t\t@method(HTTPMethod.POST) getInfo();\n\t}\n\t---\n \n",
			"endline": 873
		},
		{
			"kind": "function",
			"line": 902,
			"deco": "FAyaZS4vibe4http4rest13OverridenPath",
			"parameters": [
				{
					"deco": "Aya",
					"name": "data"
				}
			],
			"name": "path",
			"comment": "\n\tUser Defined Attribute interface to force specific URL path n REST interface\n\tfor function in question. Path attribute is relative though, not absolute.\n\n\tExample:\n\t---\n\tinterface IAPI\n\t{\n\t\t@path(\"info2\") getInfo();\n\t}\n\n\t// ...\n\n\tshared static this()\n\t{\n\t\tregisterRestInterface!IAPI(new URLRouter(), new API(), \"/root/\");\n\t\t// now IAPI.getInfo is tied to \"GET /root/info2\"\n\t}\n\t---\n",
			"endline": 907
		},
		{
			"kind": "struct",
			"line": 1032,
			"members": [
				{
					"kind": "variable",
					"line": 1033,
					"deco": "Aya",
					"name": "data",
					"offset": 0
				}
			],
			"name": "RootPath"
		},
		{
			"kind": "function",
			"line": 1041,
			"deco": "FAyaZS4vibe4http4rest8RootPath",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "rootPath",
			"comment": "\n\tUDA to define root URL prefix for annotated REST interface.\n\tEmpty path means deducing prefix from interface type name (see also rootPathFromName)\n \n",
			"endline": 1044
		},
		{
			"kind": "function",
			"line": 1049,
			"storageClass": [
				"@property"
			],
			"deco": "FNdZS4vibe4http4rest8RootPath",
			"name": "rootPathFromName",
			"comment": "\n\tConvenience alias\n \n",
			"originalType": "RootPath()",
			"endline": 1052
		}
	],
	"name": "vibe.http.rest",
	"comment": "\n\tAutomatic REST interface and client code generation facilities.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун\n"
},
{
	"kind": "module",
	"file": "source/vibe/d.d",
	"members": [
		{
			"kind": "import",
			"line": 17,
			"name": "vibe.vibe"
		}
	],
	"name": "vibe.d",
	"comment": "\n\tProvides the vibe.d API and a default main() function for the application.\n\n\tApplications that import 'vibe.d' will have most of the vibe API available and will be provided\n\twith an implicit application entry point (main). The resulting application parses command line\n\tparameters and reads the global vibe.d configuration (/etc/vibe/vibe.conf).\n\n\tInitialization is done in module constructors (static this), which run just before the event\n\tloop is started by the application entry point.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/zlib.d",
	"members": [
		{
			"kind": "class",
			"line": 21,
			"base": "ZlibOutputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 22,
					"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream4zlib19DeflateOutputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "dst"
						}
					],
					"name": "this",
					"originalType": "(OutputStream dst)",
					"endline": 25
				}
			],
			"name": "DeflateOutputStream",
			"comment": "\n\tWrites any data compressed in deflate format to the specified output stream.\n"
		},
		{
			"kind": "class",
			"line": 32,
			"base": "ZlibOutputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 33,
					"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream4zlib16GzipOutputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "dst"
						}
					],
					"name": "this",
					"originalType": "(OutputStream dst)",
					"endline": 36
				}
			],
			"name": "GzipOutputStream",
			"comment": "\n\tWrites any data compressed in gzip format to the specified output stream.\n"
		},
		{
			"kind": "class",
			"line": 42,
			"members": [
				{
					"kind": "constructor",
					"line": 48,
					"deco": "FC4vibe4core6stream12OutputStreamE3std4zlib12HeaderFormatZC4vibe6stream4zlib16ZlibOutputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "dst"
						},
						{
							"deco": "E3std4zlib12HeaderFormat",
							"name": "type"
						}
					],
					"name": "this",
					"originalType": "(OutputStream dst, HeaderFormat type)",
					"endline": 52
				},
				{
					"kind": "function",
					"line": 54,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "data"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] data)",
					"endline": 59,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 61,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 64,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 66,
					"deco": "FZv",
					"name": "flush",
					"endline": 70,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 72,
					"deco": "FZv",
					"name": "finalize",
					"endline": 78,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				},
				{
					"kind": "destructor",
					"line": 42,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "ZlibOutputStream",
			"comment": "\n\tGeneric zlib output stream.\n"
		},
		{
			"kind": "class",
			"line": 86,
			"base": "ZlibInputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 87,
					"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream4zlib18DeflateInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "dst"
						}
					],
					"name": "this",
					"originalType": "(InputStream dst)",
					"endline": 90
				}
			],
			"name": "DeflateInputStream",
			"comment": "\n\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n"
		},
		{
			"kind": "class",
			"line": 98,
			"base": "ZlibInputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 99,
					"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream4zlib15GzipInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "dst"
						}
					],
					"name": "this",
					"originalType": "(InputStream dst)",
					"endline": 102
				}
			],
			"name": "GzipInputStream",
			"comment": "\n\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n"
		},
		{
			"kind": "class",
			"line": 109,
			"members": [
				{
					"kind": "constructor",
					"line": 117,
					"deco": "FC4vibe4core6stream11InputStreamE3std4zlib12HeaderFormatZC4vibe6stream4zlib15ZlibInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "src"
						},
						{
							"deco": "E3std4zlib12HeaderFormat",
							"name": "type"
						}
					],
					"name": "this",
					"originalType": "(InputStream src, HeaderFormat type)",
					"endline": 121
				},
				{
					"kind": "function",
					"line": 123,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 130,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 132,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 142,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 144,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 147,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 149,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 152,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 154,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 168,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				},
				{
					"kind": "destructor",
					"line": 109,
					"deco": "FZv",
					"name": "~this"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "ZlibInputStream",
			"comment": "\n\tGeneric zlib input stream.\n"
		}
	],
	"name": "vibe.stream.zlib",
	"comment": "\n\tZlib input/output streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/taskpipe.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.stream"
		},
		{
			"kind": "class",
			"line": 22,
			"members": [
				{
					"kind": "class",
					"line": 24,
					"members": [
						{
							"kind": "constructor",
							"line": 26,
							"deco": "FC4vibe6stream8taskpipe12TaskPipeImplZC4vibe6stream8taskpipe8TaskPipe6Reader",
							"parameters": [
								{
									"deco": "C4vibe6stream8taskpipe12TaskPipeImpl",
									"name": "pipe"
								}
							],
							"name": "this",
							"originalType": "(TaskPipeImpl pipe)",
							"endline": 26
						},
						{
							"kind": "function",
							"line": 27,
							"storageClass": [
								"@property"
							],
							"deco": "FNdZb",
							"name": "empty",
							"originalType": "bool()",
							"endline": 27,
							"overrides": [
								"vibe.core.stream.InputStream.empty"
							]
						},
						{
							"kind": "function",
							"line": 28,
							"storageClass": [
								"@property"
							],
							"deco": "FNdZm",
							"name": "leastSize",
							"originalType": "ulong()",
							"endline": 28,
							"overrides": [
								"vibe.core.stream.InputStream.leastSize"
							]
						},
						{
							"kind": "function",
							"line": 29,
							"storageClass": [
								"@property"
							],
							"deco": "FNdZb",
							"name": "dataAvailableForRead",
							"originalType": "bool()",
							"endline": 29,
							"overrides": [
								"vibe.core.stream.InputStream.dataAvailableForRead"
							]
						},
						{
							"kind": "function",
							"line": 30,
							"deco": "FZAxh",
							"name": "peek",
							"endline": 30,
							"overrides": [
								"vibe.core.stream.InputStream.peek"
							]
						},
						{
							"kind": "function",
							"line": 31,
							"deco": "FAhZv",
							"parameters": [
								{
									"deco": "Ah",
									"name": "dst"
								}
							],
							"name": "read",
							"endline": 31,
							"overrides": [
								"vibe.core.stream.InputStream.read"
							]
						}
					],
					"interfaces": [
						"InputStream"
					],
					"name": "Reader",
					"comment": " Proxy around TaskPipeImpl implementing an InputStream \n"
				},
				{
					"kind": "class",
					"line": 35,
					"members": [
						{
							"kind": "constructor",
							"line": 37,
							"deco": "FC4vibe6stream8taskpipe12TaskPipeImplZC4vibe6stream8taskpipe8TaskPipe6Writer",
							"parameters": [
								{
									"deco": "C4vibe6stream8taskpipe12TaskPipeImpl",
									"name": "pipe"
								}
							],
							"name": "this",
							"originalType": "(TaskPipeImpl pipe)",
							"endline": 37
						},
						{
							"kind": "function",
							"line": 38,
							"deco": "FxAhZv",
							"parameters": [
								{
									"deco": "xAh",
									"name": "bytes"
								}
							],
							"name": "write",
							"originalType": "void(in ubyte[] bytes)",
							"endline": 38,
							"overrides": [
								"vibe.core.stream.OutputStream.write"
							]
						},
						{
							"kind": "function",
							"line": 39,
							"deco": "FZv",
							"name": "flush",
							"endline": 39,
							"overrides": [
								"vibe.core.stream.OutputStream.flush"
							]
						},
						{
							"kind": "function",
							"line": 40,
							"deco": "FZv",
							"name": "finalize",
							"endline": 40,
							"overrides": [
								"vibe.core.stream.OutputStream.finalize"
							]
						},
						{
							"kind": "function",
							"line": 41,
							"deco": "FC4vibe4core6stream11InputStreammZv",
							"parameters": [
								{
									"deco": "C4vibe4core6stream11InputStream",
									"name": "stream"
								},
								{
									"deco": "m",
									"default": "0LU",
									"name": "nbytes"
								}
							],
							"name": "write",
							"originalType": "void(InputStream stream, ulong nbytes = 0)",
							"endline": 41,
							"overrides": [
								"vibe.core.stream.OutputStream.write"
							]
						}
					],
					"interfaces": [
						"OutputStream"
					],
					"name": "Writer",
					"comment": " Proxy around TaskPipeImpl implementing an OutputStream \n"
				},
				{
					"kind": "constructor",
					"line": 52,
					"deco": "FZC4vibe6stream8taskpipe8TaskPipe",
					"name": "this",
					"comment": " Constructs a new pipe ready for use.\n\t\n",
					"originalType": "()",
					"endline": 57
				},
				{
					"kind": "function",
					"line": 60,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe6stream8taskpipe8TaskPipe6Reader",
					"name": "reader",
					"comment": " Read end of the pipe\n",
					"originalType": "Reader()",
					"endline": 60
				},
				{
					"kind": "function",
					"line": 63,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZC4vibe6stream8taskpipe8TaskPipe6Writer",
					"name": "writer",
					"comment": " Write end of the pipe\n",
					"originalType": "Writer()",
					"endline": 63
				},
				{
					"kind": "function",
					"line": 66,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "bufferSize",
					"comment": " Size of the (fixed) FIFO buffer used to transfer data between tasks\n",
					"originalType": "const size_t()",
					"endline": 66
				},
				{
					"kind": "function",
					"line": 68,
					"storageClass": [
						"@property"
					],
					"deco": "FNdkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "nbytes"
						}
					],
					"name": "bufferSize",
					"comment": " ditto\n",
					"originalType": "void(size_t nbytes)",
					"endline": 68
				}
			],
			"name": "TaskPipe",
			"comment": "\n\tImplements a unidirectional data pipe between two tasks.\n"
		},
		{
			"kind": "class",
			"line": 75,
			"members": [
				{
					"kind": "constructor",
					"line": 85,
					"deco": "FZC4vibe6stream8taskpipe12TaskPipeImpl",
					"name": "this",
					"comment": " Constructs a new pipe ready for use.\n\t\n",
					"originalType": "()",
					"endline": 90
				},
				{
					"kind": "function",
					"line": 93,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "bufferSize",
					"comment": " Size of the (fixed) buffer used to transfer data between tasks\n",
					"originalType": "const size_t()",
					"endline": 93
				},
				{
					"kind": "function",
					"line": 95,
					"storageClass": [
						"@property"
					],
					"deco": "FNdkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "nbytes"
						}
					],
					"name": "bufferSize",
					"comment": " ditto\n",
					"originalType": "void(size_t nbytes)",
					"endline": 95
				},
				{
					"kind": "function",
					"line": 98,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "fill",
					"comment": " Number of bytes currently in the transfer buffer\n",
					"originalType": "const size_t()",
					"endline": 103
				},
				{
					"kind": "function",
					"line": 107,
					"deco": "FZv",
					"name": "close",
					"comment": " Closes the pipe.\n\t\n",
					"endline": 111
				},
				{
					"kind": "function",
					"line": 115,
					"deco": "FZv",
					"name": "waitForData",
					"comment": " Blocks until at least one byte of data has been written to the pipe.\n\t\n",
					"endline": 120
				},
				{
					"kind": "function",
					"line": 124,
					"deco": "FAxhZv",
					"parameters": [
						{
							"deco": "Axh",
							"name": "data"
						}
					],
					"name": "write",
					"comment": " Writes the given byte array to the pipe.\n\t\n",
					"endline": 137
				},
				{
					"kind": "function",
					"line": 144,
					"deco": "FZxAh",
					"name": "peek",
					"comment": " Returns a temporary view of the beginning of the transfer buffer.\n\n\t\tNote that a call to read invalidates this array slice. Blocks in case\n\t\tof a filled up transfer buffer.\n\t\n",
					"endline": 149
				},
				{
					"kind": "function",
					"line": 155,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"comment": " Reads data into the supplied buffer.\n\n\t\tBlocks until a sufficient amount of data has been written to the pipe.\n\t\n",
					"endline": 170
				}
			],
			"name": "TaskPipeImpl",
			"comment": "\n\tUnderyling pipe implementation for TaskPipe with no Stream interface.\n"
		}
	],
	"name": "vibe.stream.taskpipe",
	"comment": "\n\tStream interface for passing data between different tasks.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/operations.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.core.stream"
		},
		{
			"kind": "function",
			"line": 34,
			"deco": "FC4vibe4core6stream11InputStreamkAyaOC4vibe5utils6memory9AllocatorZAh",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream"
				},
				{
					"deco": "k",
					"default": "4294967295u",
					"name": "max_bytes"
				},
				{
					"deco": "Aya",
					"default": "\"\\x0d\\x0a\"",
					"name": "linesep"
				},
				{
					"deco": "OC4vibe5utils6memory9Allocator",
					"default": "defaultAllocator()",
					"name": "alloc"
				}
			],
			"name": "readLine",
			"comment": "\n\n\n\tReads and returns a single line from the stream.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a newline first, or\n\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n",
			"originalType": "ubyte[](InputStream stream, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\", shared(Allocator) alloc = defaultAllocator())",
			"endline": 37
		},
		{
			"kind": "function",
			"line": 76,
			"deco": "FC4vibe4core6stream11InputStreamxAhkOC4vibe5utils6memory9AllocatorZAh",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream"
				},
				{
					"deco": "xAh",
					"name": "end_marker"
				},
				{
					"deco": "k",
					"default": "4294967295u",
					"name": "max_bytes"
				},
				{
					"deco": "OC4vibe5utils6memory9Allocator",
					"default": "defaultAllocator()",
					"name": "alloc"
				}
			],
			"name": "readUntil",
			"comment": "\n\tReads all data of a stream until the specified end marker is detected.\n\n\tParams:\n\t\tstream = The input stream which is searched for end_marker\n\t\tend_marker = The byte sequence which is searched in the stream\n\t\tmax_bytes = An optional limit of how much data is to be read from the\n\t\t\tinput stream; if the limit is reaached before hitting the end\n\t\t\tmarker, an exception is thrown.\n\t\talloc = An optional allocator that is used to build the result string\n\t\t\tin the string variant of this function\n\t\tdst = The output stream, to which the prefix to the end marker of the\n\t\t\tinput stream is written\n\n\tReturns:\n\t\tThe string variant of this function returns the complete prefix to the\n\t\tend marker of the input stream, excluding the end marker itself.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker\n\t\tfirst, or if more than max_bytes have been read from the stream in\n\t\tcase of max_bytes != 0.\n\n\tRemarks:\n\t\tThis function uses an algorithm inspired by the\n\t\t$(LINK2 http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm,\n\t\tBoyer-Moore string search algorithm). However, contrary to the original\n\t\talgorithm, it will scan the whole input string exactly once, without\n\t\tjumping over portions of it. This allows the algorithm to work with\n\t\tconstant memory requirements and without the memory copies that would\n\t\tbe necessary for streams that do not hold their complete data in\n\t\tmemory.\n\n\t\tThe current implementation has a run time complexity of O(n*m+m²) and\n\t\tO(n+m) in typical cases, with n being the length of the scanned input\n\t\tstring and m the length of the marker.\n",
			"originalType": "ubyte[](InputStream stream, in ubyte[] end_marker, size_t max_bytes = size_t.max, shared(Allocator) alloc = defaultAllocator())",
			"endline": 82
		},
		{
			"kind": "function",
			"line": 84,
			"deco": "FC4vibe4core6stream11InputStreamC4vibe4core6stream12OutputStreamxAhmZv",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream"
				},
				{
					"deco": "C4vibe4core6stream12OutputStream",
					"name": "dst"
				},
				{
					"deco": "xAh",
					"name": "end_marker"
				},
				{
					"deco": "m",
					"default": "18446744073709551615LU",
					"name": "max_bytes"
				}
			],
			"name": "readUntil",
			"comment": " ditto\n",
			"originalType": "void(InputStream stream, OutputStream dst, in ubyte[] end_marker, ulong max_bytes = (ulong).max)",
			"endline": 182
		},
		{
			"kind": "function",
			"line": 223,
			"deco": "FC4vibe4core6stream11InputStreamkZAh",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream"
				},
				{
					"deco": "k",
					"default": "0u",
					"name": "max_bytes"
				}
			],
			"name": "readAll",
			"comment": "\n\tReads the complete contents of a stream, optionally limited by max_bytes.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n",
			"originalType": "ubyte[](InputStream stream, size_t max_bytes = 0)",
			"endline": 236
		},
		{
			"kind": "function",
			"line": 254,
			"deco": "FC4vibe4core6stream11InputStreambkZAya",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "stream"
				},
				{
					"deco": "b",
					"default": "false",
					"name": "sanitize"
				},
				{
					"deco": "k",
					"default": "0u",
					"name": "max_bytes"
				}
			],
			"name": "readAllUTF8",
			"comment": "\n\tReads the complete contents of a stream, assuming UTF-8 encoding.\n\n\tParams:\n\t\tstream = Specifies the stream from which to read.\n\t\tsanitize = If true, the input data will not be validated but will instead be made valid UTF-8.\n\t\tmax_bytes = Optional size limit of the data that is read.\n\n\tReturns:\n\t\tThe full contents of the stream, excluding a possible BOM, are returned as a UTF-8 string.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n\t\tIf the sanitize parameter is fals and the stream contains invalid UTF-8 code sequences,\n\t\ta UTFException is thrown.\n",
			"originalType": "string(InputStream stream, bool sanitize = false, size_t max_bytes = 0)",
			"endline": 264
		},
		{
			"kind": "alias",
			"line": 267,
			"storageClass": [
				"deprecated"
			],
			"name": "readAllUtf8",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.stream.operations",
	"comment": "\n\tHigh level stream manipulation functions.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/memory.d",
	"members": [
		{
			"kind": "class",
			"line": 23,
			"members": [
				{
					"kind": "constructor",
					"line": 28,
					"deco": "FOC4vibe5utils6memory9AllocatorZC4vibe6stream6memory18MemoryOutputStream",
					"parameters": [
						{
							"deco": "OC4vibe5utils6memory9Allocator",
							"default": "defaultAllocator()",
							"name": "alloc"
						}
					],
					"name": "this",
					"originalType": "(shared(Allocator) alloc = defaultAllocator())",
					"endline": 31
				},
				{
					"kind": "function",
					"line": 34,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZAh",
					"name": "data",
					"comment": " An array with all data written to the stream so far.\n",
					"originalType": "ubyte[]()",
					"endline": 34
				},
				{
					"kind": "function",
					"line": 37,
					"deco": "FZv",
					"name": "reset",
					"comment": " Resets the stream to its initial state containing no data.\n",
					"endline": 40
				},
				{
					"kind": "function",
					"line": 43,
					"deco": "FkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "nbytes"
						}
					],
					"name": "reserve",
					"comment": " Reserves space for data - useful for optimization.\n",
					"originalType": "void(size_t nbytes)",
					"endline": 46
				},
				{
					"kind": "function",
					"line": 48,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 51,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 53,
					"deco": "FZv",
					"name": "flush",
					"endline": 55,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 57,
					"deco": "FZv",
					"name": "finalize",
					"endline": 59,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				},
				{
					"kind": "function",
					"line": 61,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 64,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "MemoryOutputStream",
			"comment": " OutputStream that collects the written data in memory and allows to query it\n\tas a byte array.\n"
		},
		{
			"kind": "class",
			"line": 71,
			"members": [
				{
					"kind": "constructor",
					"line": 87,
					"deco": "FAhbkZC4vibe6stream6memory12MemoryStream",
					"parameters": [
						{
							"deco": "Ah",
							"name": "data"
						},
						{
							"deco": "b",
							"default": "true",
							"name": "writable"
						},
						{
							"deco": "k",
							"default": "4294967295u",
							"name": "initial_size"
						}
					],
					"name": "this",
					"comment": " Creates a new stream with the given data array as its contents.\n\n\t\tParams:\n\t\t\tdata = The data array\n\t\t\twritable = Flag that controls whether the data array may be changed\n\t\t\tinitial_size = The initial value that size returns - the file can grow up to data.length in size\n\t\n",
					"originalType": "(ubyte[] data, bool writable = true, size_t initial_size = size_t.max)",
					"endline": 93
				},
				{
					"kind": "function",
					"line": 99,
					"storageClass": [
						"@property"
					],
					"deco": "FNdkZv",
					"parameters": [
						{
							"deco": "k",
							"name": "size"
						}
					],
					"name": "peekWindow",
					"comment": " Controls the maximum size of the array returned by peek().\n\n\t\tThis property is mainly useful for debugging purposes.\n\t\n",
					"originalType": "void(size_t size)",
					"endline": 99
				},
				{
					"kind": "function",
					"line": 101,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 101,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 102,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 102,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 103,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 103,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 104,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZm",
					"name": "size",
					"originalType": "const nothrow ulong()",
					"endline": 104,
					"overrides": [
						"vibe.core.stream.RandomAccessStream.size"
					]
				},
				{
					"kind": "function",
					"line": 105,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZk",
					"name": "capacity",
					"originalType": "const nothrow size_t()",
					"endline": 105
				},
				{
					"kind": "function",
					"line": 106,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZb",
					"name": "readable",
					"originalType": "const nothrow bool()",
					"endline": 106,
					"overrides": [
						"vibe.core.stream.RandomAccessStream.readable"
					]
				},
				{
					"kind": "function",
					"line": 107,
					"storageClass": [
						"@property"
					],
					"deco": "xFNbNdZb",
					"name": "writable",
					"originalType": "const nothrow bool()",
					"endline": 107,
					"overrides": [
						"vibe.core.stream.RandomAccessStream.writable"
					]
				},
				{
					"kind": "function",
					"line": 109,
					"deco": "FmZv",
					"parameters": [
						{
							"deco": "m",
							"name": "offset"
						}
					],
					"name": "seek",
					"endline": 109,
					"overrides": [
						"vibe.core.stream.RandomAccessStream.seek"
					]
				},
				{
					"kind": "function",
					"line": 110,
					"deco": "FNbZm",
					"name": "tell",
					"endline": 110,
					"overrides": [
						"vibe.core.stream.RandomAccessStream.tell"
					]
				},
				{
					"kind": "function",
					"line": 111,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 111,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 113,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 118,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				},
				{
					"kind": "function",
					"line": 120,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 127,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 129,
					"deco": "FZv",
					"name": "flush",
					"endline": 129,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 130,
					"deco": "FZv",
					"name": "finalize",
					"endline": 130,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				},
				{
					"kind": "function",
					"line": 131,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 131,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				}
			],
			"interfaces": [
				"RandomAccessStream"
			],
			"name": "MemoryStream",
			"comment": "\n\tProvides a random access stream interface for accessing an array of bytes.\n"
		}
	],
	"name": "vibe.stream.memory",
	"comment": "\n\tIn-memory streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/ssl.d",
	"members": [
		{
			"kind": "class",
			"line": 71,
			"members": [
				{
					"kind": "constructor",
					"line": 84,
					"deco": "FC4vibe4core6stream6StreamC4vibe6stream3ssl10SSLContextE4vibe6stream3ssl14SSLStreamStateZC4vibe6stream3ssl9SSLStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream6Stream",
							"name": "underlying"
						},
						{
							"deco": "C4vibe6stream3ssl10SSLContext",
							"name": "ctx"
						},
						{
							"deco": "E4vibe6stream3ssl14SSLStreamState",
							"name": "state"
						}
					],
					"name": "this",
					"comment": " Constructs a new SSL tunnel.\n\t\n",
					"originalType": "(Stream underlying, SSLContext ctx, SSLStreamState state)",
					"endline": 113
				},
				{
					"kind": "destructor",
					"line": 115,
					"deco": "FZv",
					"name": "~this",
					"endline": 118
				},
				{
					"kind": "function",
					"line": 120,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 123,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 125,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 129,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 131,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 134,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 136,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 141,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 143,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 151,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				},
				{
					"kind": "function",
					"line": 153,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes_"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes_)",
					"endline": 162,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 164,
					"deco": "FZv",
					"name": "flush",
					"endline": 167,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 169,
					"deco": "FZv",
					"name": "finalize",
					"endline": 179,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				},
				{
					"kind": "function",
					"line": 181,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 184,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				}
			],
			"interfaces": [
				"Stream"
			],
			"name": "SSLStream",
			"comment": "\n\n\n\tCreates an SSL/TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the SSL\n\ttunnel is properly closed first.\n"
		},
		{
			"kind": "alias",
			"line": 226,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe6stream3ssl9SSLStream",
			"name": "SslStream",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 229,
			"members": [
				{
					"kind": "enum member",
					"line": 230,
					"name": "connecting"
				},
				{
					"kind": "enum member",
					"line": 231,
					"name": "accepting"
				},
				{
					"kind": "enum member",
					"line": 232,
					"name": "connected"
				}
			],
			"baseDeco": "i",
			"name": "SSLStreamState"
		},
		{
			"kind": "alias",
			"line": 236,
			"storageClass": [
				"deprecated"
			],
			"deco": "E4vibe6stream3ssl14SSLStreamState",
			"name": "SslStreamState",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "class",
			"line": 239,
			"members": [
				{
					"kind": "constructor",
					"line": 244,
					"deco": "FAyaAyaE4vibe6stream3ssl10SSLVersionZC4vibe6stream3ssl10SSLContext",
					"parameters": [
						{
							"deco": "Aya",
							"name": "cert_file"
						},
						{
							"deco": "Aya",
							"name": "key_file"
						},
						{
							"deco": "E4vibe6stream3ssl10SSLVersion",
							"default": "cast(SSLVersion)0",
							"name": "ver"
						}
					],
					"name": "this",
					"originalType": "(string cert_file, string key_file, SSLVersion ver = SSLVersion.ssl23)",
					"endline": 261
				},
				{
					"kind": "constructor",
					"line": 263,
					"deco": "FE4vibe6stream3ssl10SSLVersionZC4vibe6stream3ssl10SSLContext",
					"parameters": [
						{
							"deco": "E4vibe6stream3ssl10SSLVersion",
							"default": "cast(SSLVersion)0",
							"name": "ver"
						}
					],
					"name": "this",
					"originalType": "(SSLVersion ver = SSLVersion.ssl23)",
					"endline": 276
				},
				{
					"kind": "destructor",
					"line": 278,
					"deco": "FZv",
					"name": "~this",
					"endline": 282
				},
				{
					"kind": "function",
					"line": 284,
					"deco": "FZPS6deimos7openssl3ssl6ssl_st",
					"name": "createClientCtx",
					"endline": 288
				}
			],
			"name": "SSLContext"
		},
		{
			"kind": "alias",
			"line": 292,
			"storageClass": [
				"deprecated"
			],
			"deco": "C4vibe6stream3ssl10SSLContext",
			"name": "SslContext",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "enum",
			"line": 295,
			"members": [
				{
					"kind": "enum member",
					"line": 296,
					"name": "ssl23"
				},
				{
					"kind": "enum member",
					"line": 297,
					"name": "ssl3"
				},
				{
					"kind": "enum member",
					"line": 298,
					"name": "tls1"
				},
				{
					"kind": "enum member",
					"line": 299,
					"name": "dtls1"
				}
			],
			"baseDeco": "i",
			"name": "SSLVersion"
		}
	],
	"name": "vibe.stream.ssl",
	"comment": "\n\tSSL/TLS stream implementation\n\n\tSSLStream can be used to implement SSL/TLS communication on top of a TCP connection. The\n\tinitial SSLStreamState determines if the SSL tunnel is on the client or server side.\n\n\tExamples:\n\t\tA simple SSL client:\n\t\t---\n\t\tvoid sendSSLMessage()\n\t\t{\n\t\t\tauto conn = connectTCP(\"127.0.0.1\", 1234);\n\t\t\tauto sslctx = mew SSLContext;\n\t\t\tauto stream = new SSLStream(conn, sslctx, SSLStreamState.connecting);\n\t\t\tstream.write(\"Hello, World!\");\n\t\t\tstream.finalize();\n\t\t\tconn.close();\n\t\t}\n\t\t---\n\n\t\tCorresponding server:\n\t\t---\n\t\tvoid listenForSSL()\n\t\t{\n\t\t\tauto sslctx = new SSLContext(\"server.crt\", \"server.key\");\n\t\t\tlistenTCP(1234, (conn){\n\t\t\t\tauto stream = new SSLStream(conn, sslctx, SSLStreamState.accepting);\n\t\t\t\tlogInfo(\"Got message: %s\", strea.readAllUtf8());\n\t\t\t\tstream.finalize();\n\t\t\t});\n\t\t}\n\t\t---\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/base64.d",
	"members": [
		{
			"kind": "class",
			"line": 15,
			"members": [
				{
					"kind": "function",
					"line": 16,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 19,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 21,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 24,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 26,
					"deco": "FZv",
					"name": "flush",
					"endline": 29,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 31,
					"deco": "FZv",
					"name": "finalize",
					"endline": 34,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "Base64OutputStream",
			"comment": "\n"
		}
	],
	"name": "vibe.stream.base64",
	"comment": "\n\tBase64 encoding routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "source/vibe/stream/counting.d",
	"members": [
		{
			"kind": "import",
			"line": 11,
			"name": "vibe.core.stream"
		},
		{
			"kind": "class",
			"line": 19,
			"members": [
				{
					"kind": "constructor",
					"line": 34,
					"deco": "FC4vibe4core6stream11InputStreammbZC4vibe6stream8counting18LimitedInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"name": "byte_limit"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "silent_limit"
						}
					],
					"name": "this",
					"comment": " Constructs a limited stream from an existing input stream.\n\n\t\tParams:\n\t\t\tstream: the input stream to be wrapped\n\t\t\tbyte_limit: the maximum number of bytes readable from the constructed stream\n\t\t\tsilent_limit: if set, the stream will behave exactly like the original stream, but\n\t\t\t\twill throw an exception as soon as the limit is reached.\n\t\n",
					"originalType": "(InputStream stream, ulong byte_limit, bool silent_limit = false)",
					"endline": 40
				},
				{
					"kind": "function",
					"line": 43,
					"storageClass": [
						"@property"
					],
					"deco": "NgFNdZNgC4vibe4core6stream11InputStream",
					"name": "sourceStream",
					"comment": " The stream that is wrapped by this one\n",
					"originalType": "inout inout(InputStream)()",
					"endline": 43
				},
				{
					"kind": "function",
					"line": 45,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 45,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 47,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 47,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 49,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 49,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 51,
					"deco": "FmZv",
					"parameters": [
						{
							"deco": "m",
							"name": "bytes"
						}
					],
					"name": "increment",
					"endline": 55
				},
				{
					"kind": "function",
					"line": 57,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 57,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 59,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 64,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "LimitedInputStream",
			"comment": "\n\tWraps an existing stream, limiting the amount of data that can be read.\n"
		},
		{
			"kind": "class",
			"line": 75,
			"members": [
				{
					"kind": "constructor",
					"line": 80,
					"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream8counting20CountingOutputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream12OutputStream",
							"name": "stream"
						}
					],
					"name": "this",
					"originalType": "(OutputStream stream)",
					"endline": 84
				},
				{
					"kind": "function",
					"line": 86,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZm",
					"name": "bytesWritten",
					"originalType": "const ulong()",
					"endline": 86
				},
				{
					"kind": "function",
					"line": 88,
					"deco": "FmZv",
					"parameters": [
						{
							"deco": "m",
							"name": "bytes"
						}
					],
					"name": "increment",
					"endline": 91
				},
				{
					"kind": "function",
					"line": 93,
					"deco": "FxAhZv",
					"parameters": [
						{
							"deco": "xAh",
							"name": "bytes"
						}
					],
					"name": "write",
					"originalType": "void(in ubyte[] bytes)",
					"endline": 97,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 99,
					"deco": "FC4vibe4core6stream11InputStreammZv",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						},
						{
							"deco": "m",
							"default": "0LU",
							"name": "nbytes"
						}
					],
					"name": "write",
					"originalType": "void(InputStream stream, ulong nbytes = 0)",
					"endline": 102,
					"overrides": [
						"vibe.core.stream.OutputStream.write"
					]
				},
				{
					"kind": "function",
					"line": 104,
					"deco": "FZv",
					"name": "flush",
					"endline": 104,
					"overrides": [
						"vibe.core.stream.OutputStream.flush"
					]
				},
				{
					"kind": "function",
					"line": 105,
					"deco": "FZv",
					"name": "finalize",
					"endline": 105,
					"overrides": [
						"vibe.core.stream.OutputStream.finalize"
					]
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "CountingOutputStream",
			"comment": "\n\tWraps an existing output stream, counting the bytes that are written.\n"
		},
		{
			"kind": "class",
			"line": 111,
			"members": [
				{
					"kind": "constructor",
					"line": 116,
					"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream8counting19CountingInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "stream"
						}
					],
					"name": "this",
					"originalType": "(InputStream stream)",
					"endline": 120
				},
				{
					"kind": "function",
					"line": 122,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZm",
					"name": "bytesRead",
					"originalType": "const ulong()",
					"endline": 122
				},
				{
					"kind": "function",
					"line": 124,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 124,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 125,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 125,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 126,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 126,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 128,
					"deco": "FmZv",
					"parameters": [
						{
							"deco": "m",
							"name": "bytes"
						}
					],
					"name": "increment",
					"endline": 131
				},
				{
					"kind": "function",
					"line": 133,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 133,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 135,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 139,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "CountingInputStream",
			"comment": "\n\tWraps an existing input stream, counting the bytes that are written.\n"
		},
		{
			"kind": "class",
			"line": 153,
			"members": [
				{
					"kind": "constructor",
					"line": 160,
					"deco": "FC4vibe4core6stream11InputStreamDFZvZC4vibe6stream8counting22EndCallbackInputStream",
					"parameters": [
						{
							"deco": "C4vibe4core6stream11InputStream",
							"name": "input"
						},
						{
							"deco": "DFZv",
							"name": "callback"
						}
					],
					"name": "this",
					"originalType": "(InputStream input, void delegate() callback)",
					"endline": 165
				},
				{
					"kind": "function",
					"line": 167,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "empty",
					"originalType": "bool()",
					"endline": 171,
					"overrides": [
						"vibe.core.stream.InputStream.empty"
					]
				},
				{
					"kind": "function",
					"line": 173,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZm",
					"name": "leastSize",
					"originalType": "ulong()",
					"endline": 178,
					"overrides": [
						"vibe.core.stream.InputStream.leastSize"
					]
				},
				{
					"kind": "function",
					"line": 180,
					"storageClass": [
						"@property"
					],
					"deco": "FNdZb",
					"name": "dataAvailableForRead",
					"originalType": "bool()",
					"endline": 184,
					"overrides": [
						"vibe.core.stream.InputStream.dataAvailableForRead"
					]
				},
				{
					"kind": "function",
					"line": 186,
					"deco": "FZAxh",
					"name": "peek",
					"endline": 190,
					"overrides": [
						"vibe.core.stream.InputStream.peek"
					]
				},
				{
					"kind": "function",
					"line": 192,
					"deco": "FAhZv",
					"parameters": [
						{
							"deco": "Ah",
							"name": "dst"
						}
					],
					"name": "read",
					"endline": 197,
					"overrides": [
						"vibe.core.stream.InputStream.read"
					]
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "EndCallbackInputStream",
			"comment": "\n\tWraps an input stream and calls the given delegate once the stream is empty.\n\n\tNote that this function will potentially block after each read operation to\n\tsee if the end has already been reached - this may take as long until either\n\tnew data has arrived or until the connection was closed.\n\n\tThe stream will also guarantee that the inner stream is not used after it\n\thas been determined to be empty. It can thus be safely deleted once the\n\tcallback is invoked.\n"
		},
		{
			"kind": "class",
			"line": 209,
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 212,
					"deco": "FAyamC6object9ThrowableAyaiZC4vibe6stream8counting14LimitException",
					"parameters": [
						{
							"deco": "Aya",
							"name": "message"
						},
						{
							"deco": "m",
							"name": "limit"
						},
						{
							"deco": "C6object9Throwable",
							"default": "null",
							"name": "next"
						},
						{
							"deco": "Aya",
							"default": "__FILE__",
							"name": "file"
						},
						{
							"deco": "i",
							"default": "__LINE__",
							"name": "line"
						}
					],
					"name": "this",
					"originalType": "(string message, ulong limit, Throwable next = null, string file = __FILE__, int line = __LINE__)",
					"endline": 215
				},
				{
					"kind": "function",
					"line": 218,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZm",
					"name": "limit",
					"comment": " The byte limit of the stream that emitted the exception\n",
					"originalType": "const ulong()",
					"endline": 218
				}
			],
			"name": "LimitException"
		}
	],
	"name": "vibe.stream.counting",
	"comment": "\n\tWrapper streams which count the number of bytes or limit the stream based on the number of\n\ttransferred bytes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/urltransfer.d",
	"members": [
		{
			"kind": "function",
			"line": 26,
			"deco": "FS4vibe4inet3url3URLMDFMC4vibe4core6stream11InputStreamZvC4vibe4http6client10HTTPClientZv",
			"parameters": [
				{
					"deco": "S4vibe4inet3url3URL",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4core6stream11InputStreamZv",
					"storageClass": [
						"scope"
					],
					"name": "callback"
				},
				{
					"deco": "C4vibe4http6client10HTTPClient",
					"default": "null",
					"name": "client"
				}
			],
			"name": "download",
			"comment": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
			"originalType": "void(URL url, scope void delegate(scope InputStream) callback, HTTPClient client = null)",
			"endline": 70
		},
		{
			"kind": "function",
			"line": 73,
			"deco": "FAyaMDFMC4vibe4core6stream11InputStreamZvC4vibe4http6client10HTTPClientZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				},
				{
					"deco": "DFMC4vibe4core6stream11InputStreamZv",
					"storageClass": [
						"scope"
					],
					"name": "callback"
				},
				{
					"deco": "C4vibe4http6client10HTTPClient",
					"default": "null",
					"name": "client"
				}
			],
			"name": "download",
			"comment": " ditto\n",
			"originalType": "void(string url, scope void delegate(scope InputStream) callback, HTTPClient client = null)",
			"endline": 76
		},
		{
			"kind": "function",
			"line": 79,
			"deco": "FAyaAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "url"
				},
				{
					"deco": "Aya",
					"name": "filename"
				}
			],
			"name": "download",
			"comment": " ditto\n",
			"endline": 86
		},
		{
			"kind": "function",
			"line": 89,
			"deco": "FS4vibe4inet3url3URLS4vibe4inet4path4PathZv",
			"parameters": [
				{
					"deco": "S4vibe4inet3url3URL",
					"name": "url"
				},
				{
					"deco": "S4vibe4inet4path4Path",
					"name": "filename"
				}
			],
			"name": "download",
			"comment": " ditto\n",
			"endline": 92
		}
	],
	"name": "vibe.inet.urltransfer",
	"comment": "\n\tDownloading and uploading of data from/to URLs.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/mimetypes.d",
	"members": [
		{
			"kind": "function",
			"line": 19,
			"deco": "FAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "filename"
				}
			],
			"name": "getMimeTypeForFile",
			"comment": "\n\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n",
			"endline": 732
		},
		{
			"kind": "function",
			"line": 740,
			"deco": "FAyaZb",
			"parameters": [
				{
					"deco": "Aya",
					"name": "mimetype"
				}
			],
			"name": "isCompressedFormat",
			"comment": "\n\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n",
			"endline": 749
		}
	],
	"name": "vibe.inet.mimetypes",
	"comment": "\n\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/path.d",
	"members": [
		{
			"kind": "struct",
			"line": 24,
			"members": [
				{
					"kind": "constructor",
					"line": 32,
					"deco": "FNcAyaZS4vibe4inet4path4Path",
					"parameters": [
						{
							"deco": "Aya",
							"name": "pathstr"
						}
					],
					"name": "this",
					"comment": " Constructs a Path object by parsing a path string.\n",
					"originalType": "(string pathstr)",
					"endline": 38
				},
				{
					"kind": "constructor",
					"line": 41,
					"deco": "FNcAyS4vibe4inet4path9PathEntrybZS4vibe4inet4path4Path",
					"parameters": [
						{
							"deco": "AyS4vibe4inet4path9PathEntry",
							"name": "nodes"
						},
						{
							"deco": "b",
							"name": "absolute"
						}
					],
					"name": "this",
					"comment": " Constructs a path object from a list of PathEntry objects.\n",
					"originalType": "(immutable(PathEntry)[] nodes, bool absolute)",
					"endline": 45
				},
				{
					"kind": "constructor",
					"line": 48,
					"deco": "FNcS4vibe4inet4path9PathEntryZS4vibe4inet4path4Path",
					"parameters": [
						{
							"deco": "S4vibe4inet4path9PathEntry",
							"name": "entry"
						}
					],
					"name": "this",
					"comment": " Constructs a relative path with one path entry.\n",
					"originalType": "(PathEntry entry)",
					"endline": 51
				},
				{
					"kind": "function",
					"line": 54,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "absolute",
					"comment": " Determines if the path is absolute.\n",
					"originalType": "const bool()",
					"endline": 54
				},
				{
					"kind": "function",
					"line": 57,
					"deco": "FZv",
					"name": "normalize",
					"comment": " Resolves all '.' and '..' path entries as far as possible.\n",
					"endline": 74
				},
				{
					"kind": "function",
					"line": 77,
					"deco": "xFZAya",
					"name": "toString",
					"comment": " Converts the Path back to a string representation using slashes.\n",
					"endline": 95
				},
				{
					"kind": "function",
					"line": 98,
					"deco": "xFZAya",
					"name": "toNativeString",
					"comment": " Converts the Path object to a native path string (backslash as path separator on Windows).\n",
					"endline": 118
				},
				{
					"kind": "function",
					"line": 121,
					"deco": "xFxS4vibe4inet4path4PathZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path4Path",
							"name": "rhs"
						}
					],
					"name": "startsWith",
					"comment": " Tests if `rhs` is an anchestor or the same as this path. \n",
					"originalType": "const bool(const Path rhs)",
					"endline": 127
				},
				{
					"kind": "function",
					"line": 130,
					"deco": "xFxS4vibe4inet4path4PathZS4vibe4inet4path4Path",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path4Path",
							"name": "parentPath"
						}
					],
					"name": "relativeTo",
					"comment": " Computes the relative path from `parentPath` to this path.\n",
					"originalType": "const Path(const Path parentPath)",
					"endline": 140
				},
				{
					"kind": "function",
					"line": 143,
					"storageClass": [
						"@property"
					],
					"deco": "xFNcNdZyS4vibe4inet4path9PathEntry",
					"name": "head",
					"comment": " The last entry of the path\n",
					"originalType": "const immutable(PathEntry)()",
					"endline": 143
				},
				{
					"kind": "function",
					"line": 146,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4inet4path4Path",
					"name": "parentPath",
					"comment": " The parent path\n",
					"originalType": "const Path()",
					"endline": 146
				},
				{
					"kind": "function",
					"line": 149,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAyS4vibe4inet4path9PathEntry",
					"name": "nodes",
					"comment": " The ist of path entries of which this path is composed\n",
					"originalType": "const immutable(PathEntry)[]()",
					"endline": 149
				},
				{
					"kind": "function",
					"line": 152,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "length",
					"comment": " The number of path entries of which this path is composed\n",
					"originalType": "const size_t()",
					"endline": 152
				},
				{
					"kind": "function",
					"line": 155,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "empty",
					"comment": " True if the path contains no entries\n",
					"originalType": "const bool()",
					"endline": 155
				},
				{
					"kind": "function",
					"line": 158,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "endsWithSlash",
					"comment": " Determines if the path ends with a slash (i.e. is a directory)\n",
					"originalType": "const bool()",
					"endline": 158
				},
				{
					"kind": "function",
					"line": 160,
					"storageClass": [
						"@property"
					],
					"deco": "FNdbZv",
					"parameters": [
						{
							"deco": "b",
							"name": "v"
						}
					],
					"name": "endsWithSlash",
					"comment": " ditto\n",
					"originalType": "void(bool v)",
					"endline": 160
				},
				{
					"kind": "function",
					"line": 163,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZb",
					"name": "external",
					"comment": " Determines if this path goes outside of its base path (i.e. begins with '..').\n",
					"originalType": "const bool()",
					"endline": 163
				},
				{
					"kind": "function",
					"line": 165,
					"deco": "xFNckZyS4vibe4inet4path9PathEntry",
					"parameters": [
						{
							"deco": "k",
							"name": "idx"
						}
					],
					"name": "opIndex",
					"originalType": "const immutable(PathEntry)(size_t idx)",
					"endline": 165
				},
				{
					"kind": "function",
					"line": 166,
					"deco": "xFkkZS4vibe4inet4path4Path",
					"parameters": [
						{
							"deco": "k",
							"name": "start"
						},
						{
							"deco": "k",
							"name": "end"
						}
					],
					"name": "opSlice",
					"originalType": "const Path(size_t start, size_t end)",
					"endline": 170
				},
				{
					"kind": "template",
					"line": 171,
					"members": [
						{
							"kind": "function",
							"line": 171,
							"type": "const size_t()",
							"name": "opDollar",
							"endline": 171
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "i",
							"name": "dim"
						}
					],
					"name": "opDollar"
				},
				{
					"kind": "template",
					"line": 174,
					"members": [
						{
							"kind": "function",
							"line": 174,
							"type": "const Path(const Path rhs)",
							"parameters": [
								{
									"storageClass": [
										"const"
									],
									"type": "Path",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 196
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 198,
					"members": [
						{
							"kind": "function",
							"line": 198,
							"type": "const Path(string rhs)",
							"parameters": [
								{
									"type": "string",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 198
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 199,
					"members": [
						{
							"kind": "function",
							"line": 199,
							"type": "const Path(PathEntry rhs)",
							"parameters": [
								{
									"type": "PathEntry",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 199
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 200,
					"members": [
						{
							"kind": "function",
							"line": 200,
							"type": "void(string rhs)",
							"parameters": [
								{
									"type": "string",
									"name": "rhs"
								}
							],
							"name": "opOpAssign",
							"endline": 200
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opOpAssign"
				},
				{
					"kind": "template",
					"line": 201,
					"members": [
						{
							"kind": "function",
							"line": 201,
							"type": "void(PathEntry rhs)",
							"parameters": [
								{
									"type": "PathEntry",
									"name": "rhs"
								}
							],
							"name": "opOpAssign",
							"endline": 201
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opOpAssign"
				},
				{
					"kind": "template",
					"line": 202,
					"members": [
						{
							"kind": "function",
							"line": 202,
							"type": "void(Path rhs)",
							"parameters": [
								{
									"type": "Path",
									"name": "rhs"
								}
							],
							"name": "opOpAssign",
							"endline": 202
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opOpAssign"
				},
				{
					"kind": "function",
					"line": 205,
					"deco": "xFKxS4vibe4inet4path4PathZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path4Path",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opEquals",
					"comment": " Tests two paths for equality using '=='.\n",
					"originalType": "const bool(ref const Path rhs)",
					"endline": 213
				},
				{
					"kind": "function",
					"line": 215,
					"deco": "xFxS4vibe4inet4path4PathZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path4Path",
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"originalType": "const bool(const Path other)",
					"endline": 215
				},
				{
					"kind": "function",
					"line": 217,
					"deco": "xFKxS4vibe4inet4path4PathZi",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path4Path",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opCmp",
					"originalType": "const int(ref const Path rhs)",
					"endline": 225
				}
			],
			"name": "Path",
			"comment": "\n\tRepresents an absolute or relative file system path.\n\n\tThis struct allows to do safe operations on paths, such as concatenation and sub paths. Checks\n\tare done to disallow invalid operations such as concatenating two absolute paths. It also\n\tvalidates path strings and allows for easy checking of malicious relative paths.\n"
		},
		{
			"kind": "struct",
			"line": 288,
			"members": [
				{
					"kind": "constructor",
					"line": 293,
					"deco": "FNcAyaZS4vibe4inet4path9PathEntry",
					"parameters": [
						{
							"deco": "Aya",
							"name": "str"
						}
					],
					"name": "this",
					"originalType": "(string str)",
					"endline": 297
				},
				{
					"kind": "function",
					"line": 299,
					"deco": "xFZAya",
					"name": "toString",
					"endline": 299
				},
				{
					"kind": "template",
					"line": 301,
					"members": [
						{
							"kind": "function",
							"line": 301,
							"type": "const Path(PathEntry rhs)",
							"parameters": [
								{
									"type": "PathEntry",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 301
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "function",
					"line": 303,
					"deco": "xFKxS4vibe4inet4path9PathEntryZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path9PathEntry",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opEquals",
					"originalType": "const bool(ref const PathEntry rhs)",
					"endline": 303
				},
				{
					"kind": "function",
					"line": 304,
					"deco": "xFS4vibe4inet4path9PathEntryZb",
					"parameters": [
						{
							"deco": "S4vibe4inet4path9PathEntry",
							"name": "rhs"
						}
					],
					"name": "opEquals",
					"endline": 304
				},
				{
					"kind": "function",
					"line": 305,
					"deco": "xFAyaZb",
					"parameters": [
						{
							"deco": "Aya",
							"name": "rhs"
						}
					],
					"name": "opEquals",
					"endline": 305
				},
				{
					"kind": "function",
					"line": 306,
					"deco": "xFKxS4vibe4inet4path9PathEntryZi",
					"parameters": [
						{
							"deco": "xS4vibe4inet4path9PathEntry",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opCmp",
					"originalType": "const int(ref const PathEntry rhs)",
					"endline": 306
				},
				{
					"kind": "function",
					"line": 307,
					"deco": "xFAyaZi",
					"parameters": [
						{
							"deco": "Aya",
							"name": "rhs"
						}
					],
					"name": "opCmp",
					"endline": 307
				}
			],
			"name": "PathEntry"
		},
		{
			"kind": "function",
			"line": 318,
			"deco": "FAyaAyaZAya",
			"parameters": [
				{
					"deco": "Aya",
					"name": "basepath"
				},
				{
					"deco": "Aya",
					"name": "subpath"
				}
			],
			"name": "joinPath",
			"comment": " Joins two path strings. subpath must be relative.\n",
			"endline": 323
		},
		{
			"kind": "function",
			"line": 326,
			"deco": "FAyaZAS4vibe4inet4path9PathEntry",
			"parameters": [
				{
					"deco": "Aya",
					"name": "path"
				}
			],
			"name": "splitPath",
			"comment": " Splits up a path string into its elements/folders\n",
			"endline": 368
		}
	],
	"name": "vibe.inet.path",
	"comment": "\n\tContains routines for high level path handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/url.d",
	"members": [
		{
			"kind": "import",
			"line": 10,
			"name": "vibe.inet.path"
		},
		{
			"kind": "struct",
			"line": 24,
			"members": [
				{
					"kind": "constructor",
					"line": 37,
					"deco": "FNcAyaAyatS4vibe4inet4path4PathZS4vibe4inet3url3URL",
					"parameters": [
						{
							"deco": "Aya",
							"name": "schema"
						},
						{
							"deco": "Aya",
							"name": "host"
						},
						{
							"deco": "t",
							"name": "port"
						},
						{
							"deco": "S4vibe4inet4path4Path",
							"name": "path"
						}
					],
					"name": "this",
					"comment": " Constructs a new URL object from its components.\n",
					"originalType": "(string schema, string host, ushort port, Path path)",
					"endline": 43
				},
				{
					"kind": "constructor",
					"line": 45,
					"deco": "FNcAyaS4vibe4inet4path4PathZS4vibe4inet3url3URL",
					"parameters": [
						{
							"deco": "Aya",
							"name": "schema"
						},
						{
							"deco": "S4vibe4inet4path4Path",
							"name": "path"
						}
					],
					"name": "this",
					"comment": " ditto\n",
					"originalType": "(string schema, Path path)",
					"endline": 48
				},
				{
					"kind": "constructor",
					"line": 54,
					"deco": "FNcAyaZS4vibe4inet3url3URL",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_string"
						}
					],
					"name": "this",
					"comment": " Constructs a URL from its string representation.\n\n\t\tTODO: additional validation required (e.g. valid host and user names and port)\n\t\n",
					"originalType": "(string url_string)",
					"endline": 107
				},
				{
					"kind": "function",
					"line": 109,
					"storageClass": [
						"static"
					],
					"deco": "FAyaZS4vibe4inet3url3URL",
					"parameters": [
						{
							"deco": "Aya",
							"name": "url_string"
						}
					],
					"name": "parse",
					"comment": " ditto\n",
					"endline": 112
				},
				{
					"kind": "function",
					"line": 115,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "schema",
					"comment": " The schema/protocol part of the URL\n",
					"originalType": "const string()",
					"endline": 115
				},
				{
					"kind": "function",
					"line": 117,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "schema",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 117
				},
				{
					"kind": "function",
					"line": 120,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "pathString",
					"comment": " The path part of the URL in the original string form\n",
					"originalType": "const string()",
					"endline": 120
				},
				{
					"kind": "function",
					"line": 123,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4inet4path4Path",
					"name": "path",
					"comment": " The path part of the URL\n",
					"originalType": "const Path()",
					"endline": 123
				},
				{
					"kind": "function",
					"line": 125,
					"storageClass": [
						"@property"
					],
					"deco": "FNdS4vibe4inet4path4PathZv",
					"parameters": [
						{
							"deco": "S4vibe4inet4path4Path",
							"name": "p"
						}
					],
					"name": "path",
					"comment": " ditto\n",
					"originalType": "void(Path p)",
					"endline": 129
				},
				{
					"kind": "function",
					"line": 132,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "host",
					"comment": " The host part of the URL (depends on the schema)\n",
					"originalType": "const string()",
					"endline": 132
				},
				{
					"kind": "function",
					"line": 134,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "host",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 134
				},
				{
					"kind": "function",
					"line": 137,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZt",
					"name": "port",
					"comment": " The port part of the URL (optional)\n",
					"originalType": "const ushort()",
					"endline": 137
				},
				{
					"kind": "function",
					"line": 139,
					"deco": "FNdtZv",
					"parameters": [
						{
							"deco": "t",
							"name": "v"
						}
					],
					"name": "port",
					"comment": " ditto\n",
					"originalType": "@property (ushort v)",
					"endline": 139
				},
				{
					"kind": "function",
					"line": 142,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "username",
					"comment": " The user name part of the URL (optional)\n",
					"originalType": "const string()",
					"endline": 142
				},
				{
					"kind": "function",
					"line": 144,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "username",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 144
				},
				{
					"kind": "function",
					"line": 147,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "password",
					"comment": " The password part of the URL (optional)\n",
					"originalType": "const string()",
					"endline": 147
				},
				{
					"kind": "function",
					"line": 149,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "password",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 149
				},
				{
					"kind": "function",
					"line": 152,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "queryString",
					"comment": " The query string part of the URL (optional)\n",
					"originalType": "const string()",
					"endline": 152
				},
				{
					"kind": "function",
					"line": 154,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "v"
						}
					],
					"name": "queryString",
					"comment": " ditto\n",
					"originalType": "void(string v)",
					"endline": 154
				},
				{
					"kind": "function",
					"line": 157,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "anchor",
					"comment": " The anchor part of the URL (optional)\n",
					"originalType": "const string()",
					"endline": 157
				},
				{
					"kind": "function",
					"line": 160,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZAya",
					"name": "localURI",
					"comment": " The path part plus query string and anchor\n",
					"originalType": "const string()",
					"endline": 174
				},
				{
					"kind": "function",
					"line": 176,
					"storageClass": [
						"@property"
					],
					"deco": "FNdAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "str"
						}
					],
					"name": "localURI",
					"comment": " ditto\n",
					"originalType": "void(string str)",
					"endline": 191
				},
				{
					"kind": "function",
					"line": 194,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4inet3url3URL",
					"name": "parentURL",
					"comment": " The URL to the parent path with query string and anchor stripped.\n",
					"originalType": "const URL()",
					"endline": 203
				},
				{
					"kind": "alias",
					"line": 206,
					"storageClass": [
						"deprecated"
					],
					"name": "parentUrl",
					"comment": " Deprecated compatibility alias\n"
				},
				{
					"kind": "function",
					"line": 209,
					"deco": "xFZAya",
					"name": "toString",
					"comment": " Converts this URL object to its string representation.\n",
					"endline": 230
				},
				{
					"kind": "function",
					"line": 232,
					"deco": "xFxS4vibe4inet3url3URLZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet3url3URL",
							"name": "rhs"
						}
					],
					"name": "startsWith",
					"originalType": "const bool(const URL rhs)",
					"endline": 237
				},
				{
					"kind": "template",
					"line": 239,
					"members": [
						{
							"kind": "function",
							"line": 239,
							"type": "const URL(Path rhs)",
							"parameters": [
								{
									"type": "Path",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 239
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 240,
					"members": [
						{
							"kind": "function",
							"line": 240,
							"type": "const URL(PathEntry rhs)",
							"parameters": [
								{
									"type": "PathEntry",
									"name": "rhs"
								}
							],
							"name": "opBinary",
							"endline": 240
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opBinary"
				},
				{
					"kind": "template",
					"line": 241,
					"members": [
						{
							"kind": "function",
							"line": 241,
							"type": "void(Path rhs)",
							"parameters": [
								{
									"type": "Path",
									"name": "rhs"
								}
							],
							"name": "opOpAssign",
							"endline": 241
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opOpAssign"
				},
				{
					"kind": "template",
					"line": 242,
					"members": [
						{
							"kind": "function",
							"line": 242,
							"type": "void(PathEntry rhs)",
							"parameters": [
								{
									"type": "PathEntry",
									"name": "rhs"
								}
							],
							"name": "opOpAssign",
							"endline": 242
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "OP"
						}
					],
					"name": "opOpAssign"
				},
				{
					"kind": "function",
					"line": 245,
					"deco": "xFKxS4vibe4inet3url3URLZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet3url3URL",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opEquals",
					"comment": " Tests two URLs for equality using '=='.\n",
					"originalType": "const bool(ref const URL rhs)",
					"endline": 250
				},
				{
					"kind": "function",
					"line": 252,
					"deco": "xFxS4vibe4inet3url3URLZb",
					"parameters": [
						{
							"deco": "xS4vibe4inet3url3URL",
							"name": "other"
						}
					],
					"name": "opEquals",
					"comment": " ditto\n",
					"originalType": "const bool(const URL other)",
					"endline": 252
				},
				{
					"kind": "function",
					"line": 254,
					"deco": "xFKxS4vibe4inet3url3URLZi",
					"parameters": [
						{
							"deco": "xS4vibe4inet3url3URL",
							"storageClass": [
								"ref"
							],
							"name": "rhs"
						}
					],
					"name": "opCmp",
					"originalType": "const int(ref const URL rhs)",
					"endline": 259
				}
			],
			"name": "URL",
			"comment": "\n\tRepresents a URL decomposed into its components.\n"
		},
		{
			"kind": "alias",
			"line": 263,
			"storageClass": [
				"deprecated"
			],
			"deco": "S4vibe4inet3url3URL",
			"name": "Url",
			"comment": " Deprecated compatibility alias\n"
		}
	],
	"name": "vibe.inet.url",
	"comment": "\n\tURL parsing routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/message.d",
	"members": [
		{
			"kind": "function",
			"line": 27,
			"deco": "FC4vibe4core6stream11InputStreamKS4vibe4inet7message13InetHeaderMapkOC4vibe5utils6memory9AllocatorZv",
			"parameters": [
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "input"
				},
				{
					"deco": "S4vibe4inet7message13InetHeaderMap",
					"storageClass": [
						"ref"
					],
					"name": "dst"
				},
				{
					"deco": "k",
					"default": "1000u",
					"name": "max_line_length"
				},
				{
					"deco": "OC4vibe5utils6memory9Allocator",
					"default": "defaultAllocator()",
					"name": "alloc"
				}
			],
			"name": "parseRFC5322Header",
			"comment": "\n\tParses an internet header according to RFC5322 (with RFC822 compatibility).\n",
			"originalType": "void(InputStream input, ref InetHeaderMap dst, size_t max_line_length = 1000, shared(Allocator) alloc = defaultAllocator())",
			"endline": 54
		},
		{
			"kind": "alias",
			"line": 57,
			"storageClass": [
				"deprecated"
			],
			"name": "parseRfc5322Header",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "template",
			"line": 65,
			"members": [
				{
					"kind": "function",
					"line": 65,
					"type": "void(ref R dst, SysTime time)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "SysTime",
							"name": "time"
						}
					],
					"name": "writeRFC822DateString",
					"comment": "\n\tWrites an RFC-822/5322 date string to the given output range.\n",
					"endline": 75
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites an RFC-822/5322 date string to the given output range.\n",
			"name": "writeRFC822DateString"
		},
		{
			"kind": "template",
			"line": 80,
			"members": [
				{
					"kind": "function",
					"line": 80,
					"type": "void(ref R dst, SysTime time)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "SysTime",
							"name": "time"
						}
					],
					"name": "writeRFC822TimeString",
					"comment": "\n\tWrites an RFC-822 time string to the given output range.\n",
					"endline": 97
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites an RFC-822 time string to the given output range.\n",
			"name": "writeRFC822TimeString"
		},
		{
			"kind": "template",
			"line": 102,
			"members": [
				{
					"kind": "function",
					"line": 102,
					"type": "void(ref R dst, SysTime time)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "SysTime",
							"name": "time"
						}
					],
					"name": "writeRFC822DateTimeString",
					"comment": "\n\tWrites an RFC-822 date+time string to the given output range.\n",
					"endline": 107
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": "\n\tWrites an RFC-822 date+time string to the given output range.\n",
			"name": "writeRFC822DateTimeString"
		},
		{
			"kind": "function",
			"line": 112,
			"deco": "FS3std8datetime7SysTimeZAya",
			"parameters": [
				{
					"deco": "S3std8datetime7SysTime",
					"name": "time"
				}
			],
			"name": "toRFC822TimeString",
			"comment": "\n\tReturns the RFC-822 time string representation of the given time.\n",
			"endline": 117
		},
		{
			"kind": "function",
			"line": 122,
			"deco": "FS3std8datetime7SysTimeZAya",
			"parameters": [
				{
					"deco": "S3std8datetime7SysTime",
					"name": "time"
				}
			],
			"name": "toRFC822DateString",
			"comment": "\n\tReturns the RFC-822/5322 date string representation of the given time.\n",
			"endline": 127
		},
		{
			"kind": "function",
			"line": 132,
			"deco": "FS3std8datetime7SysTimeZAya",
			"parameters": [
				{
					"deco": "S3std8datetime7SysTime",
					"name": "time"
				}
			],
			"name": "toRFC822DateTimeString",
			"comment": "\n\tReturns the RFC-822 date+time string representation of the given time.\n",
			"endline": 137
		},
		{
			"kind": "function",
			"line": 142,
			"deco": "FAyaZS3std8datetime7SysTime",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				}
			],
			"name": "parseRFC822DateTimeString",
			"comment": "\n\tParses a date+time string according to RFC-822/5322.\n",
			"endline": 180
		},
		{
			"kind": "template",
			"line": 204,
			"members": [
				{
					"kind": "function",
					"line": 204,
					"type": "string(string encoded)",
					"parameters": [
						{
							"type": "string",
							"name": "encoded"
						}
					],
					"name": "decodeEncodedWords",
					"comment": "\n\tDecodes a string in encoded-word form.\n\n\tSee_Also: $(LINK http://tools.ietf.org/html/rfc2047#section-2)\n",
					"endline": 210
				}
			],
			"parameters": [],
			"comment": "\n\tDecodes a string in encoded-word form.\n\n\tSee_Also: $(LINK http://tools.ietf.org/html/rfc2047#section-2)\n",
			"name": "decodeEncodedWords"
		},
		{
			"kind": "template",
			"line": 212,
			"members": [
				{
					"kind": "function",
					"line": 212,
					"type": "void(ref R dst, string encoded)",
					"parameters": [
						{
							"storageClass": [
								"ref"
							],
							"type": "R",
							"name": "dst"
						},
						{
							"type": "string",
							"name": "encoded"
						}
					],
					"name": "decodeEncodedWords",
					"comment": " ditto\n",
					"endline": 252
				}
			],
			"parameters": [
				{
					"kind": "type",
					"name": "R"
				}
			],
			"comment": " ditto\n",
			"name": "decodeEncodedWords"
		},
		{
			"kind": "function",
			"line": 258,
			"deco": "FAyaJAyaJAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "header"
				},
				{
					"deco": "Aya",
					"storageClass": [
						"out"
					],
					"name": "name"
				},
				{
					"deco": "Aya",
					"storageClass": [
						"out"
					],
					"name": "address"
				}
			],
			"name": "decodeEmailAddressHeader",
			"comment": "\n\tDecodes a From/To header value as it appears in emails.\n",
			"endline": 282
		},
		{
			"kind": "function",
			"line": 291,
			"deco": "FxAhAyaZAya",
			"parameters": [
				{
					"deco": "xAh",
					"name": "message_body"
				},
				{
					"deco": "Aya",
					"name": "content_transfer_encoding"
				}
			],
			"name": "decodeMessage",
			"comment": "\n\tDecodes a message body according to the specified content transfer\n\tencoding (\"Content-Transfer-Encoding\" header).\n\n\tThe result is returned as a UTF-8 string.\n",
			"originalType": "string(in ubyte[] message_body, string content_transfer_encoding)",
			"endline": 320
		},
		{
			"kind": "struct",
			"line": 332,
			"members": [
				{
					"kind": "function",
					"line": 341,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZk",
					"name": "length",
					"originalType": "const size_t()",
					"endline": 341
				},
				{
					"kind": "function",
					"line": 343,
					"deco": "FAyaZv",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "remove",
					"endline": 355
				},
				{
					"kind": "function",
					"line": 357,
					"deco": "xFAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						},
						{
							"deco": "Aya",
							"default": "null",
							"name": "def_val"
						}
					],
					"name": "get",
					"endline": 361
				},
				{
					"kind": "function",
					"line": 363,
					"deco": "xFAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "opIndex",
					"endline": 368
				},
				{
					"kind": "function",
					"line": 370,
					"deco": "FAyaAyaZAya",
					"parameters": [
						{
							"deco": "Aya",
							"name": "val"
						},
						{
							"deco": "Aya",
							"name": "key"
						}
					],
					"name": "opIndexAssign",
					"endline": 377
				},
				{
					"kind": "template",
					"line": 379,
					"members": [
						{
							"kind": "function",
							"line": 379,
							"type": "inout inout(string)*(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "opBinaryRight",
							"endline": 386
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"name": "opBinaryRight"
				},
				{
					"kind": "template",
					"line": 388,
					"members": [
						{
							"kind": "function",
							"line": 388,
							"type": "inout bool(string key)",
							"parameters": [
								{
									"type": "string",
									"name": "key"
								}
							],
							"name": "opBinaryRight",
							"endline": 390
						}
					],
					"parameters": [
						{
							"kind": "value",
							"deco": "Aya",
							"name": "op"
						}
					],
					"name": "opBinaryRight"
				},
				{
					"kind": "function",
					"line": 392,
					"deco": "FDFKAyaKAyaZiZi",
					"parameters": [
						{
							"deco": "DFKAyaKAyaZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"endline": 405
				},
				{
					"kind": "function",
					"line": 407,
					"deco": "FDFKAyaZiZi",
					"parameters": [
						{
							"deco": "DFKAyaZi",
							"name": "del"
						}
					],
					"name": "opApply",
					"endline": 418
				},
				{
					"kind": "function",
					"line": 420,
					"storageClass": [
						"@property"
					],
					"deco": "xFNdZS4vibe4inet7message13InetHeaderMap",
					"name": "dup",
					"originalType": "const InetHeaderMap()",
					"endline": 427
				}
			],
			"name": "InetHeaderMap",
			"comment": "\n\tBehaves like string[string] but case does not matter for the key and the insertion order is not changed.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n"
		},
		{
			"kind": "struct",
			"line": 455,
			"members": [
				{
					"kind": "function",
					"line": 456,
					"storageClass": [
						"static"
					],
					"deco": "FxAabZAh",
					"parameters": [
						{
							"deco": "xAa",
							"name": "input"
						},
						{
							"deco": "b",
							"default": "false",
							"name": "in_header"
						}
					],
					"name": "decode",
					"originalType": "ubyte[](in char[] input, bool in_header = false)",
					"endline": 469
				}
			],
			"name": "QuotedPrintable",
			"comment": "\n\tPerforms quoted-printable decoding.\n"
		}
	],
	"name": "vibe.inet.message",
	"comment": "\n\tInternet message handling according to RFC822/RFC5322\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "source/vibe/inet/webform.d",
	"members": [
		{
			"kind": "function",
			"line": 25,
			"deco": "FKHAyaAyaKHAyaS4vibe4inet7webform8FilePartAyaC4vibe4core6stream11InputStreamkZb",
			"parameters": [
				{
					"deco": "HAyaAya",
					"storageClass": [
						"ref"
					],
					"name": "fields"
				},
				{
					"deco": "HAyaS4vibe4inet7webform8FilePart",
					"storageClass": [
						"ref"
					],
					"name": "files"
				},
				{
					"deco": "Aya",
					"name": "content_type"
				},
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "body_reader"
				},
				{
					"deco": "k",
					"name": "max_line_length"
				}
			],
			"name": "parseFormData",
			"comment": "\n\tParses the form given by content_type and body_reader.\n",
			"originalType": "bool(ref string[string] fields, ref FilePart[string] files, string content_type, InputStream body_reader, size_t max_line_length)",
			"endline": 41
		},
		{
			"kind": "function",
			"line": 46,
			"deco": "FAyaKHAyaAyaZv",
			"parameters": [
				{
					"deco": "Aya",
					"name": "str"
				},
				{
					"deco": "HAyaAya",
					"storageClass": [
						"ref"
					],
					"name": "params"
				}
			],
			"name": "parseURLEncodedForm",
			"comment": "\n\tParses a url encoded form (query string format) and puts the key/value pairs into params.\n",
			"endline": 78
		},
		{
			"kind": "alias",
			"line": 81,
			"storageClass": [
				"deprecated"
			],
			"name": "parseUrlEncodedForm",
			"comment": " Deprecated compatibility alias\n"
		},
		{
			"kind": "function",
			"line": 101,
			"deco": "FKHAyaAyaKHAyaS4vibe4inet7webform8FilePartAyaC4vibe4core6stream11InputStreamkZv",
			"parameters": [
				{
					"deco": "HAyaAya",
					"storageClass": [
						"ref"
					],
					"name": "fields"
				},
				{
					"deco": "HAyaS4vibe4inet7webform8FilePart",
					"storageClass": [
						"ref"
					],
					"name": "files"
				},
				{
					"deco": "Aya",
					"name": "content_type"
				},
				{
					"deco": "C4vibe4core6stream11InputStream",
					"name": "body_reader"
				},
				{
					"deco": "k",
					"name": "max_line_length"
				}
			],
			"name": "parseMultiPartForm",
			"comment": "\n\tParses a form in \"multipart/form-data\" format.\n\n\tIf any _files are contained in the form, they are written to temporary _files using\n\tvibe.core.file.createTempFile and returned in the files field.\n",
			"originalType": "void(ref string[string] fields, ref FilePart[string] files, string content_type, InputStream body_reader, size_t max_line_length)",
			"endline": 111
		},
		{
			"kind": "struct",
			"line": 114,
			"members": [
				{
					"kind": "variable",
					"line": 115,
					"deco": "S4vibe4inet7message13InetHeaderMap",
					"name": "headers",
					"offset": 0
				},
				{
					"kind": "variable",
					"line": 116,
					"deco": "S4vibe4inet4path9PathEntry",
					"name": "filename",
					"offset": 1292
				},
				{
					"kind": "variable",
					"line": 117,
					"deco": "S4vibe4inet4path4Path",
					"name": "tempPath",
					"offset": 1300
				}
			],
			"name": "FilePart"
		}
	],
	"name": "vibe.inet.webform",
	"comment": "\n\tContains HTML/urlencoded form parsing and construction routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
}
]
